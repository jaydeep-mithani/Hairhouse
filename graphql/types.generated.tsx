export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Date: any;
  DateTime: any;
  Hex: any;
  Json: any;
  Long: any;
  RGBAHue: any;
  RGBATransparency: any;
  RichTextAST: any;
  ShopifyStorefront_Color: any;
  ShopifyStorefront_Decimal: any;
  ShopifyStorefront_HTML: any;
  ShopifyStorefront_JSON: any;
  ShopifyStorefront_URL: any;
  ShopifyStorefront_UnsignedInt64: any;
};

export type AccordionContent = {
  __typename?: 'AccordionContent';
  content?: Maybe<RichText>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System stage field */
  stage: Stage;
  title?: Maybe<Scalars['String']>;
};

export type AccordionContentConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: AccordionContentWhereUniqueInput;
};

/** A connection to a list of items. */
export type AccordionContentConnection = {
  __typename?: 'AccordionContentConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<AccordionContentEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type AccordionContentCreateInput = {
  content?: InputMaybe<Scalars['RichTextAST']>;
  title?: InputMaybe<Scalars['String']>;
};

export type AccordionContentCreateManyInlineInput = {
  /** Create and connect multiple existing AccordionContent documents */
  create?: InputMaybe<Array<AccordionContentCreateInput>>;
};

export type AccordionContentCreateOneInlineInput = {
  /** Create and connect one AccordionContent document */
  create?: InputMaybe<AccordionContentCreateInput>;
};

export type AccordionContentCreateWithPositionInput = {
  /** Document to create */
  data: AccordionContentCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type AccordionContentEdge = {
  __typename?: 'AccordionContentEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: AccordionContent;
};

/** Identifies documents */
export type AccordionContentManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AccordionContentWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AccordionContentWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AccordionContentWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
};

export enum AccordionContentOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC'
}

export type AccordionContentParent = ConfigSalonMenu | SectionsAccordion;

export type AccordionContentParentConnectInput = {
  ConfigSalonMenu?: InputMaybe<ConfigSalonMenuConnectInput>;
  SectionsAccordion?: InputMaybe<SectionsAccordionConnectInput>;
};

export type AccordionContentParentCreateInput = {
  ConfigSalonMenu?: InputMaybe<ConfigSalonMenuCreateInput>;
  SectionsAccordion?: InputMaybe<SectionsAccordionCreateInput>;
};

export type AccordionContentParentCreateManyInlineInput = {
  /** Connect multiple existing AccordionContentParent documents */
  connect?: InputMaybe<Array<AccordionContentParentWhereUniqueInput>>;
  /** Create and connect multiple existing AccordionContentParent documents */
  create?: InputMaybe<Array<AccordionContentParentCreateInput>>;
};

export type AccordionContentParentCreateOneInlineInput = {
  /** Connect one existing AccordionContentParent document */
  connect?: InputMaybe<AccordionContentParentWhereUniqueInput>;
  /** Create and connect one AccordionContentParent document */
  create?: InputMaybe<AccordionContentParentCreateInput>;
};

export type AccordionContentParentUpdateInput = {
  ConfigSalonMenu?: InputMaybe<ConfigSalonMenuUpdateInput>;
  SectionsAccordion?: InputMaybe<SectionsAccordionUpdateInput>;
};

export type AccordionContentParentUpdateManyInlineInput = {
  /** Connect multiple existing AccordionContentParent documents */
  connect?: InputMaybe<Array<AccordionContentParentConnectInput>>;
  /** Create and connect multiple AccordionContentParent documents */
  create?: InputMaybe<Array<AccordionContentParentCreateInput>>;
  /** Delete multiple AccordionContentParent documents */
  delete?: InputMaybe<Array<AccordionContentParentWhereUniqueInput>>;
  /** Disconnect multiple AccordionContentParent documents */
  disconnect?: InputMaybe<Array<AccordionContentParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing AccordionContentParent documents */
  set?: InputMaybe<Array<AccordionContentParentWhereUniqueInput>>;
  /** Update multiple AccordionContentParent documents */
  update?: InputMaybe<Array<AccordionContentParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple AccordionContentParent documents */
  upsert?: InputMaybe<Array<AccordionContentParentUpsertWithNestedWhereUniqueInput>>;
};

export type AccordionContentParentUpdateManyWithNestedWhereInput = {
  ConfigSalonMenu?: InputMaybe<ConfigSalonMenuUpdateManyWithNestedWhereInput>;
  SectionsAccordion?: InputMaybe<SectionsAccordionUpdateManyWithNestedWhereInput>;
};

export type AccordionContentParentUpdateOneInlineInput = {
  /** Connect existing AccordionContentParent document */
  connect?: InputMaybe<AccordionContentParentWhereUniqueInput>;
  /** Create and connect one AccordionContentParent document */
  create?: InputMaybe<AccordionContentParentCreateInput>;
  /** Delete currently connected AccordionContentParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected AccordionContentParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single AccordionContentParent document */
  update?: InputMaybe<AccordionContentParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single AccordionContentParent document */
  upsert?: InputMaybe<AccordionContentParentUpsertWithNestedWhereUniqueInput>;
};

export type AccordionContentParentUpdateWithNestedWhereUniqueInput = {
  ConfigSalonMenu?: InputMaybe<ConfigSalonMenuUpdateWithNestedWhereUniqueInput>;
  SectionsAccordion?: InputMaybe<SectionsAccordionUpdateWithNestedWhereUniqueInput>;
};

export type AccordionContentParentUpsertWithNestedWhereUniqueInput = {
  ConfigSalonMenu?: InputMaybe<ConfigSalonMenuUpsertWithNestedWhereUniqueInput>;
  SectionsAccordion?: InputMaybe<SectionsAccordionUpsertWithNestedWhereUniqueInput>;
};

export type AccordionContentParentWhereInput = {
  ConfigSalonMenu?: InputMaybe<ConfigSalonMenuWhereInput>;
  SectionsAccordion?: InputMaybe<SectionsAccordionWhereInput>;
};

export type AccordionContentParentWhereUniqueInput = {
  ConfigSalonMenu?: InputMaybe<ConfigSalonMenuWhereUniqueInput>;
  SectionsAccordion?: InputMaybe<SectionsAccordionWhereUniqueInput>;
};

export type AccordionContentUpdateInput = {
  content?: InputMaybe<Scalars['RichTextAST']>;
  title?: InputMaybe<Scalars['String']>;
};

export type AccordionContentUpdateManyInlineInput = {
  /** Create and connect multiple AccordionContent component instances */
  create?: InputMaybe<Array<AccordionContentCreateWithPositionInput>>;
  /** Delete multiple AccordionContent documents */
  delete?: InputMaybe<Array<AccordionContentWhereUniqueInput>>;
  /** Update multiple AccordionContent component instances */
  update?: InputMaybe<Array<AccordionContentUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple AccordionContent component instances */
  upsert?: InputMaybe<Array<AccordionContentUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type AccordionContentUpdateManyInput = {
  content?: InputMaybe<Scalars['RichTextAST']>;
  title?: InputMaybe<Scalars['String']>;
};

export type AccordionContentUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: AccordionContentUpdateManyInput;
  /** Document search */
  where: AccordionContentWhereInput;
};

export type AccordionContentUpdateOneInlineInput = {
  /** Create and connect one AccordionContent document */
  create?: InputMaybe<AccordionContentCreateInput>;
  /** Delete currently connected AccordionContent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single AccordionContent document */
  update?: InputMaybe<AccordionContentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single AccordionContent document */
  upsert?: InputMaybe<AccordionContentUpsertWithNestedWhereUniqueInput>;
};

export type AccordionContentUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<AccordionContentUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: AccordionContentWhereUniqueInput;
};

export type AccordionContentUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: AccordionContentUpdateInput;
  /** Unique document search */
  where: AccordionContentWhereUniqueInput;
};

export type AccordionContentUpsertInput = {
  /** Create document if it didn't exist */
  create: AccordionContentCreateInput;
  /** Update document if it exists */
  update: AccordionContentUpdateInput;
};

export type AccordionContentUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<AccordionContentUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: AccordionContentWhereUniqueInput;
};

export type AccordionContentUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: AccordionContentUpsertInput;
  /** Unique document search */
  where: AccordionContentWhereUniqueInput;
};

/** Identifies documents */
export type AccordionContentWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AccordionContentWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AccordionContentWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AccordionContentWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
};

/** References AccordionContent record uniquely */
export type AccordionContentWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Aggregate = {
  __typename?: 'Aggregate';
  count: Scalars['Int'];
};

/** Asset system model */
export type Asset = Node & {
  __typename?: 'Asset';
  altText?: Maybe<Scalars['String']>;
  articleMainImageDesktopPageBuyingGuide: Array<PageBuyingGuide>;
  authorImageBlogAuthor: Array<BlogAuthor>;
  benefitIcon1ConfigCareer: Array<ConfigCareer>;
  benefitIcon2ConfigCareer: Array<ConfigCareer>;
  benefitIcon3ConfigCareer: Array<ConfigCareer>;
  benefitIcon4ConfigCareer: Array<ConfigCareer>;
  benefitIcon5ConfigCareer: Array<ConfigCareer>;
  benefitIcon6ConfigCareer: Array<ConfigCareer>;
  brandLogoBrandsBrandLogo: Array<BrandsBrandLogo>;
  careersContentLinkedBlocksIcon2ConfigCareer: Array<ConfigCareer>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  desktopImageHeroBanner: Array<HeroBanner>;
  desktopImageJoinCTApanel: Array<JoinCtApanel>;
  desktopImageModulePromoBanner: Array<ModulePromoBanner>;
  desktopImageSectionImageTextOverlay: Array<SectionImageTextOverlay>;
  /** Get the document in other stages */
  documentInStages: Array<Asset>;
  /** The file name */
  fileName: Scalars['String'];
  footerLogoFooterConfig: Array<FooterConfig>;
  /** The file handle */
  handle: Scalars['String'];
  /** The height of the file */
  height?: Maybe<Scalars['Float']>;
  /** List of Asset versions */
  history: Array<Version>;
  howToAsset1ProductHowTo: Array<ProductHowTo>;
  howToAsset2ProductHowTo: Array<ProductHowTo>;
  /** The unique identifier */
  id: Scalars['ID'];
  imageGridSocialMediaCtaLarge: Array<SocialMediaCtaLarge>;
  imagesSectionFullWidthImage: Array<SectionFullWidthImage>;
  imagesSectionSocialMediaCtaSmall: Array<SectionSocialMediaCtaSmall>;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Asset>;
  logoHeaderConfig: Array<HeaderConfig>;
  mainImageMobilePageBuyingGuide: Array<PageBuyingGuide>;
  /** The mime type of the file */
  mimeType?: Maybe<Scalars['String']>;
  mobileImageHeroBanner: Array<HeroBanner>;
  mobileImageJoinCTApanel: Array<JoinCtApanel>;
  mobileImageModulePromoBanner: Array<ModulePromoBanner>;
  mobileImageSectionImageTextOverlay: Array<SectionImageTextOverlay>;
  paymentLogosFooterConfig: Array<FooterConfig>;
  positionBox1ImageConfigCareer: Array<ConfigCareer>;
  positionBox2ImageConfigCareer: Array<ConfigCareer>;
  positionBox3ImageConfigCareer: Array<ConfigCareer>;
  positionBox4ImageConfigCareer: Array<ConfigCareer>;
  positionBox5ImageConfigCareer: Array<ConfigCareer>;
  productThumbnailsSectionCollectionFeatureLarge: Array<SectionCollectionFeatureLarge>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  salonPartnersImage1ConfigSalonMenu: Array<ConfigSalonMenu>;
  salonPartnersImage2ConfigSalonMenu: Array<ConfigSalonMenu>;
  salonPartnersImage3ConfigSalonMenu: Array<ConfigSalonMenu>;
  salonWelcomeImage1ConfigSalonBooking: Array<ConfigSalonBooking>;
  salonWelcomeImage2ConfigSalonBooking: Array<ConfigSalonBooking>;
  scheduledIn: Array<ScheduledOperation>;
  /** The file size */
  size?: Maybe<Scalars['Float']>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** Get the url for the asset with provided transformations applied. */
  url: Scalars['String'];
  videosSectionVideoCarousel: Array<SectionVideoCarousel>;
  /** The file width */
  width?: Maybe<Scalars['Float']>;
};


/** Asset system model */
export type AssetArticleMainImageDesktopPageBuyingGuideArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<PageBuyingGuideOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PageBuyingGuideWhereInput>;
};


/** Asset system model */
export type AssetAuthorImageBlogAuthorArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<BlogAuthorOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogAuthorWhereInput>;
};


/** Asset system model */
export type AssetBenefitIcon1ConfigCareerArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ConfigCareerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigCareerWhereInput>;
};


/** Asset system model */
export type AssetBenefitIcon2ConfigCareerArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ConfigCareerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigCareerWhereInput>;
};


/** Asset system model */
export type AssetBenefitIcon3ConfigCareerArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ConfigCareerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigCareerWhereInput>;
};


/** Asset system model */
export type AssetBenefitIcon4ConfigCareerArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ConfigCareerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigCareerWhereInput>;
};


/** Asset system model */
export type AssetBenefitIcon5ConfigCareerArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ConfigCareerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigCareerWhereInput>;
};


/** Asset system model */
export type AssetBenefitIcon6ConfigCareerArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ConfigCareerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigCareerWhereInput>;
};


/** Asset system model */
export type AssetBrandLogoBrandsBrandLogoArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<BrandsBrandLogoOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BrandsBrandLogoWhereInput>;
};


/** Asset system model */
export type AssetCareersContentLinkedBlocksIcon2ConfigCareerArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ConfigCareerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigCareerWhereInput>;
};


/** Asset system model */
export type AssetCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Asset system model */
export type AssetCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetDesktopImageHeroBannerArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<HeroBannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<HeroBannerWhereInput>;
};


/** Asset system model */
export type AssetDesktopImageJoinCtApanelArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<JoinCtApanelOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<JoinCtApanelWhereInput>;
};


/** Asset system model */
export type AssetDesktopImageModulePromoBannerArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ModulePromoBannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ModulePromoBannerWhereInput>;
};


/** Asset system model */
export type AssetDesktopImageSectionImageTextOverlayArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<SectionImageTextOverlayOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionImageTextOverlayWhereInput>;
};


/** Asset system model */
export type AssetDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


/** Asset system model */
export type AssetFooterLogoFooterConfigArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<FooterConfigOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<FooterConfigWhereInput>;
};


/** Asset system model */
export type AssetHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


/** Asset system model */
export type AssetHowToAsset1ProductHowToArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ProductHowToOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProductHowToWhereInput>;
};


/** Asset system model */
export type AssetHowToAsset2ProductHowToArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ProductHowToOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProductHowToWhereInput>;
};


/** Asset system model */
export type AssetImageGridSocialMediaCtaLargeArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<SocialMediaCtaLargeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SocialMediaCtaLargeWhereInput>;
};


/** Asset system model */
export type AssetImagesSectionFullWidthImageArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<SectionFullWidthImageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionFullWidthImageWhereInput>;
};


/** Asset system model */
export type AssetImagesSectionSocialMediaCtaSmallArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<SectionSocialMediaCtaSmallOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionSocialMediaCtaSmallWhereInput>;
};


/** Asset system model */
export type AssetLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};


/** Asset system model */
export type AssetLogoHeaderConfigArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<HeaderConfigOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<HeaderConfigWhereInput>;
};


/** Asset system model */
export type AssetMainImageMobilePageBuyingGuideArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<PageBuyingGuideOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PageBuyingGuideWhereInput>;
};


/** Asset system model */
export type AssetMobileImageHeroBannerArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<HeroBannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<HeroBannerWhereInput>;
};


/** Asset system model */
export type AssetMobileImageJoinCtApanelArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<JoinCtApanelOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<JoinCtApanelWhereInput>;
};


/** Asset system model */
export type AssetMobileImageModulePromoBannerArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ModulePromoBannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ModulePromoBannerWhereInput>;
};


/** Asset system model */
export type AssetMobileImageSectionImageTextOverlayArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<SectionImageTextOverlayOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionImageTextOverlayWhereInput>;
};


/** Asset system model */
export type AssetPaymentLogosFooterConfigArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<FooterConfigOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<FooterConfigWhereInput>;
};


/** Asset system model */
export type AssetPositionBox1ImageConfigCareerArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ConfigCareerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigCareerWhereInput>;
};


/** Asset system model */
export type AssetPositionBox2ImageConfigCareerArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ConfigCareerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigCareerWhereInput>;
};


/** Asset system model */
export type AssetPositionBox3ImageConfigCareerArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ConfigCareerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigCareerWhereInput>;
};


/** Asset system model */
export type AssetPositionBox4ImageConfigCareerArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ConfigCareerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigCareerWhereInput>;
};


/** Asset system model */
export type AssetPositionBox5ImageConfigCareerArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ConfigCareerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigCareerWhereInput>;
};


/** Asset system model */
export type AssetProductThumbnailsSectionCollectionFeatureLargeArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<SectionCollectionFeatureLargeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionCollectionFeatureLargeWhereInput>;
};


/** Asset system model */
export type AssetPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Asset system model */
export type AssetPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetSalonPartnersImage1ConfigSalonMenuArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ConfigSalonMenuOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigSalonMenuWhereInput>;
};


/** Asset system model */
export type AssetSalonPartnersImage2ConfigSalonMenuArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ConfigSalonMenuOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigSalonMenuWhereInput>;
};


/** Asset system model */
export type AssetSalonPartnersImage3ConfigSalonMenuArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ConfigSalonMenuOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigSalonMenuWhereInput>;
};


/** Asset system model */
export type AssetSalonWelcomeImage1ConfigSalonBookingArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ConfigSalonBookingOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigSalonBookingWhereInput>;
};


/** Asset system model */
export type AssetSalonWelcomeImage2ConfigSalonBookingArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ConfigSalonBookingOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigSalonBookingWhereInput>;
};


/** Asset system model */
export type AssetScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


/** Asset system model */
export type AssetUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Asset system model */
export type AssetUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetUrlArgs = {
  transformation?: InputMaybe<AssetTransformationInput>;
};


/** Asset system model */
export type AssetVideosSectionVideoCarouselArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<SectionVideoCarouselOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionVideoCarouselWhereInput>;
};

export type AssetConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: AssetWhereUniqueInput;
};

/** A connection to a list of items. */
export type AssetConnection = {
  __typename?: 'AssetConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<AssetEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type AssetCreateInput = {
  altText?: InputMaybe<Scalars['String']>;
  articleMainImageDesktopPageBuyingGuide?: InputMaybe<PageBuyingGuideCreateManyInlineInput>;
  authorImageBlogAuthor?: InputMaybe<BlogAuthorCreateManyInlineInput>;
  benefitIcon1ConfigCareer?: InputMaybe<ConfigCareerCreateManyInlineInput>;
  benefitIcon2ConfigCareer?: InputMaybe<ConfigCareerCreateManyInlineInput>;
  benefitIcon3ConfigCareer?: InputMaybe<ConfigCareerCreateManyInlineInput>;
  benefitIcon4ConfigCareer?: InputMaybe<ConfigCareerCreateManyInlineInput>;
  benefitIcon5ConfigCareer?: InputMaybe<ConfigCareerCreateManyInlineInput>;
  benefitIcon6ConfigCareer?: InputMaybe<ConfigCareerCreateManyInlineInput>;
  brandLogoBrandsBrandLogo?: InputMaybe<BrandsBrandLogoCreateManyInlineInput>;
  careersContentLinkedBlocksIcon2ConfigCareer?: InputMaybe<ConfigCareerCreateManyInlineInput>;
  careersContentLinkedBlocksIconLinkCareerContentLinkedBlock?: InputMaybe<LinkCareerContentLinkedBlockCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  desktopImageHeroBanner?: InputMaybe<HeroBannerCreateManyInlineInput>;
  desktopImageJoinCTApanel?: InputMaybe<JoinCtApanelCreateManyInlineInput>;
  desktopImageModulePromoBanner?: InputMaybe<ModulePromoBannerCreateManyInlineInput>;
  desktopImageSectionImageTextOverlay?: InputMaybe<SectionImageTextOverlayCreateManyInlineInput>;
  fileName: Scalars['String'];
  footerLogoFooterConfig?: InputMaybe<FooterConfigCreateManyInlineInput>;
  handle: Scalars['String'];
  height?: InputMaybe<Scalars['Float']>;
  howToAsset1ProductHowTo?: InputMaybe<ProductHowToCreateManyInlineInput>;
  howToAsset2ProductHowTo?: InputMaybe<ProductHowToCreateManyInlineInput>;
  iconFileLinkIcon?: InputMaybe<LinkIconCreateManyInlineInput>;
  iconModuleIconAndText?: InputMaybe<ModuleIconAndTextCreateManyInlineInput>;
  iconProductIcon?: InputMaybe<ProductIconCreateManyInlineInput>;
  imageBrand?: InputMaybe<BrandCreateManyInlineInput>;
  imageCollectionLink?: InputMaybe<CollectionLinkCreateManyInlineInput>;
  imageGridSocialMediaCtaLarge?: InputMaybe<SocialMediaCtaLargeCreateManyInlineInput>;
  imageModuleImageAndText?: InputMaybe<ModuleImageAndTextCreateManyInlineInput>;
  imageOfferItem?: InputMaybe<OfferItemCreateManyInlineInput>;
  imageProductBenefitsItem?: InputMaybe<ProductBenefitsItemCreateManyInlineInput>;
  imagesSectionFullWidthImage?: InputMaybe<SectionFullWidthImageCreateManyInlineInput>;
  imagesSectionSocialMediaCtaSmall?: InputMaybe<SectionSocialMediaCtaSmallCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<AssetCreateLocalizationsInput>;
  logoHeaderConfig?: InputMaybe<HeaderConfigCreateManyInlineInput>;
  mainImageMobilePageBuyingGuide?: InputMaybe<PageBuyingGuideCreateManyInlineInput>;
  mimeType?: InputMaybe<Scalars['String']>;
  mobileImageHeroBanner?: InputMaybe<HeroBannerCreateManyInlineInput>;
  mobileImageJoinCTApanel?: InputMaybe<JoinCtApanelCreateManyInlineInput>;
  mobileImageModulePromoBanner?: InputMaybe<ModulePromoBannerCreateManyInlineInput>;
  mobileImageSectionImageTextOverlay?: InputMaybe<SectionImageTextOverlayCreateManyInlineInput>;
  paymentLogosFooterConfig?: InputMaybe<FooterConfigCreateManyInlineInput>;
  positionBox1ImageConfigCareer?: InputMaybe<ConfigCareerCreateManyInlineInput>;
  positionBox2ImageConfigCareer?: InputMaybe<ConfigCareerCreateManyInlineInput>;
  positionBox3ImageConfigCareer?: InputMaybe<ConfigCareerCreateManyInlineInput>;
  positionBox4ImageConfigCareer?: InputMaybe<ConfigCareerCreateManyInlineInput>;
  positionBox5ImageConfigCareer?: InputMaybe<ConfigCareerCreateManyInlineInput>;
  productThumbnailsSectionCollectionFeatureLarge?: InputMaybe<SectionCollectionFeatureLargeCreateManyInlineInput>;
  promoImageLinkPromoImage?: InputMaybe<LinkPromoImageCreateManyInlineInput>;
  salonBookingStep2HairLengthImage1SalonBookingStep?: InputMaybe<SalonBookingStepCreateManyInlineInput>;
  salonBookingStep2HairLengthImage2SalonBookingStep?: InputMaybe<SalonBookingStepCreateManyInlineInput>;
  salonBookingStep2HairLengthImage3SalonBookingStep?: InputMaybe<SalonBookingStepCreateManyInlineInput>;
  salonPartnersImage1ConfigSalonMenu?: InputMaybe<ConfigSalonMenuCreateManyInlineInput>;
  salonPartnersImage2ConfigSalonMenu?: InputMaybe<ConfigSalonMenuCreateManyInlineInput>;
  salonPartnersImage3ConfigSalonMenu?: InputMaybe<ConfigSalonMenuCreateManyInlineInput>;
  salonWelcomeImage1ConfigSalonBooking?: InputMaybe<ConfigSalonBookingCreateManyInlineInput>;
  salonWelcomeImage2ConfigSalonBooking?: InputMaybe<ConfigSalonBookingCreateManyInlineInput>;
  size?: InputMaybe<Scalars['Float']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  videosSectionVideoCarousel?: InputMaybe<SectionVideoCarouselCreateManyInlineInput>;
  width?: InputMaybe<Scalars['Float']>;
};

export type AssetCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  fileName: Scalars['String'];
  handle: Scalars['String'];
  height?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  size?: InputMaybe<Scalars['Float']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type AssetCreateLocalizationInput = {
  /** Localization input */
  data: AssetCreateLocalizationDataInput;
  locale: Locale;
};

export type AssetCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<AssetCreateLocalizationInput>>;
};

export type AssetCreateManyInlineInput = {
  /** Connect multiple existing Asset documents */
  connect?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Create and connect multiple existing Asset documents */
  create?: InputMaybe<Array<AssetCreateInput>>;
};

export type AssetCreateOneInlineInput = {
  /** Connect one existing Asset document */
  connect?: InputMaybe<AssetWhereUniqueInput>;
  /** Create and connect one Asset document */
  create?: InputMaybe<AssetCreateInput>;
};

/** An edge in a connection. */
export type AssetEdge = {
  __typename?: 'AssetEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Asset;
};

/** Identifies documents */
export type AssetManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AssetWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  altText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  altText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  altText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  altText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  altText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  altText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  altText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  altText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  altText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  altText_starts_with?: InputMaybe<Scalars['String']>;
  articleMainImageDesktopPageBuyingGuide_every?: InputMaybe<PageBuyingGuideWhereInput>;
  articleMainImageDesktopPageBuyingGuide_none?: InputMaybe<PageBuyingGuideWhereInput>;
  articleMainImageDesktopPageBuyingGuide_some?: InputMaybe<PageBuyingGuideWhereInput>;
  authorImageBlogAuthor_every?: InputMaybe<BlogAuthorWhereInput>;
  authorImageBlogAuthor_none?: InputMaybe<BlogAuthorWhereInput>;
  authorImageBlogAuthor_some?: InputMaybe<BlogAuthorWhereInput>;
  benefitIcon1ConfigCareer_every?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon1ConfigCareer_none?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon1ConfigCareer_some?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon2ConfigCareer_every?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon2ConfigCareer_none?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon2ConfigCareer_some?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon3ConfigCareer_every?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon3ConfigCareer_none?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon3ConfigCareer_some?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon4ConfigCareer_every?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon4ConfigCareer_none?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon4ConfigCareer_some?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon5ConfigCareer_every?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon5ConfigCareer_none?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon5ConfigCareer_some?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon6ConfigCareer_every?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon6ConfigCareer_none?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon6ConfigCareer_some?: InputMaybe<ConfigCareerWhereInput>;
  brandLogoBrandsBrandLogo_every?: InputMaybe<BrandsBrandLogoWhereInput>;
  brandLogoBrandsBrandLogo_none?: InputMaybe<BrandsBrandLogoWhereInput>;
  brandLogoBrandsBrandLogo_some?: InputMaybe<BrandsBrandLogoWhereInput>;
  careersContentLinkedBlocksIcon2ConfigCareer_every?: InputMaybe<ConfigCareerWhereInput>;
  careersContentLinkedBlocksIcon2ConfigCareer_none?: InputMaybe<ConfigCareerWhereInput>;
  careersContentLinkedBlocksIcon2ConfigCareer_some?: InputMaybe<ConfigCareerWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  desktopImageHeroBanner_every?: InputMaybe<HeroBannerWhereInput>;
  desktopImageHeroBanner_none?: InputMaybe<HeroBannerWhereInput>;
  desktopImageHeroBanner_some?: InputMaybe<HeroBannerWhereInput>;
  desktopImageJoinCTApanel_every?: InputMaybe<JoinCtApanelWhereInput>;
  desktopImageJoinCTApanel_none?: InputMaybe<JoinCtApanelWhereInput>;
  desktopImageJoinCTApanel_some?: InputMaybe<JoinCtApanelWhereInput>;
  desktopImageModulePromoBanner_every?: InputMaybe<ModulePromoBannerWhereInput>;
  desktopImageModulePromoBanner_none?: InputMaybe<ModulePromoBannerWhereInput>;
  desktopImageModulePromoBanner_some?: InputMaybe<ModulePromoBannerWhereInput>;
  desktopImageSectionImageTextOverlay_every?: InputMaybe<SectionImageTextOverlayWhereInput>;
  desktopImageSectionImageTextOverlay_none?: InputMaybe<SectionImageTextOverlayWhereInput>;
  desktopImageSectionImageTextOverlay_some?: InputMaybe<SectionImageTextOverlayWhereInput>;
  documentInStages_every?: InputMaybe<AssetWhereStageInput>;
  documentInStages_none?: InputMaybe<AssetWhereStageInput>;
  documentInStages_some?: InputMaybe<AssetWhereStageInput>;
  footerLogoFooterConfig_every?: InputMaybe<FooterConfigWhereInput>;
  footerLogoFooterConfig_none?: InputMaybe<FooterConfigWhereInput>;
  footerLogoFooterConfig_some?: InputMaybe<FooterConfigWhereInput>;
  howToAsset1ProductHowTo_every?: InputMaybe<ProductHowToWhereInput>;
  howToAsset1ProductHowTo_none?: InputMaybe<ProductHowToWhereInput>;
  howToAsset1ProductHowTo_some?: InputMaybe<ProductHowToWhereInput>;
  howToAsset2ProductHowTo_every?: InputMaybe<ProductHowToWhereInput>;
  howToAsset2ProductHowTo_none?: InputMaybe<ProductHowToWhereInput>;
  howToAsset2ProductHowTo_some?: InputMaybe<ProductHowToWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  imageGridSocialMediaCtaLarge_every?: InputMaybe<SocialMediaCtaLargeWhereInput>;
  imageGridSocialMediaCtaLarge_none?: InputMaybe<SocialMediaCtaLargeWhereInput>;
  imageGridSocialMediaCtaLarge_some?: InputMaybe<SocialMediaCtaLargeWhereInput>;
  imagesSectionFullWidthImage_every?: InputMaybe<SectionFullWidthImageWhereInput>;
  imagesSectionFullWidthImage_none?: InputMaybe<SectionFullWidthImageWhereInput>;
  imagesSectionFullWidthImage_some?: InputMaybe<SectionFullWidthImageWhereInput>;
  imagesSectionSocialMediaCtaSmall_every?: InputMaybe<SectionSocialMediaCtaSmallWhereInput>;
  imagesSectionSocialMediaCtaSmall_none?: InputMaybe<SectionSocialMediaCtaSmallWhereInput>;
  imagesSectionSocialMediaCtaSmall_some?: InputMaybe<SectionSocialMediaCtaSmallWhereInput>;
  logoHeaderConfig_every?: InputMaybe<HeaderConfigWhereInput>;
  logoHeaderConfig_none?: InputMaybe<HeaderConfigWhereInput>;
  logoHeaderConfig_some?: InputMaybe<HeaderConfigWhereInput>;
  mainImageMobilePageBuyingGuide_every?: InputMaybe<PageBuyingGuideWhereInput>;
  mainImageMobilePageBuyingGuide_none?: InputMaybe<PageBuyingGuideWhereInput>;
  mainImageMobilePageBuyingGuide_some?: InputMaybe<PageBuyingGuideWhereInput>;
  mobileImageHeroBanner_every?: InputMaybe<HeroBannerWhereInput>;
  mobileImageHeroBanner_none?: InputMaybe<HeroBannerWhereInput>;
  mobileImageHeroBanner_some?: InputMaybe<HeroBannerWhereInput>;
  mobileImageJoinCTApanel_every?: InputMaybe<JoinCtApanelWhereInput>;
  mobileImageJoinCTApanel_none?: InputMaybe<JoinCtApanelWhereInput>;
  mobileImageJoinCTApanel_some?: InputMaybe<JoinCtApanelWhereInput>;
  mobileImageModulePromoBanner_every?: InputMaybe<ModulePromoBannerWhereInput>;
  mobileImageModulePromoBanner_none?: InputMaybe<ModulePromoBannerWhereInput>;
  mobileImageModulePromoBanner_some?: InputMaybe<ModulePromoBannerWhereInput>;
  mobileImageSectionImageTextOverlay_every?: InputMaybe<SectionImageTextOverlayWhereInput>;
  mobileImageSectionImageTextOverlay_none?: InputMaybe<SectionImageTextOverlayWhereInput>;
  mobileImageSectionImageTextOverlay_some?: InputMaybe<SectionImageTextOverlayWhereInput>;
  paymentLogosFooterConfig_every?: InputMaybe<FooterConfigWhereInput>;
  paymentLogosFooterConfig_none?: InputMaybe<FooterConfigWhereInput>;
  paymentLogosFooterConfig_some?: InputMaybe<FooterConfigWhereInput>;
  positionBox1ImageConfigCareer_every?: InputMaybe<ConfigCareerWhereInput>;
  positionBox1ImageConfigCareer_none?: InputMaybe<ConfigCareerWhereInput>;
  positionBox1ImageConfigCareer_some?: InputMaybe<ConfigCareerWhereInput>;
  positionBox2ImageConfigCareer_every?: InputMaybe<ConfigCareerWhereInput>;
  positionBox2ImageConfigCareer_none?: InputMaybe<ConfigCareerWhereInput>;
  positionBox2ImageConfigCareer_some?: InputMaybe<ConfigCareerWhereInput>;
  positionBox3ImageConfigCareer_every?: InputMaybe<ConfigCareerWhereInput>;
  positionBox3ImageConfigCareer_none?: InputMaybe<ConfigCareerWhereInput>;
  positionBox3ImageConfigCareer_some?: InputMaybe<ConfigCareerWhereInput>;
  positionBox4ImageConfigCareer_every?: InputMaybe<ConfigCareerWhereInput>;
  positionBox4ImageConfigCareer_none?: InputMaybe<ConfigCareerWhereInput>;
  positionBox4ImageConfigCareer_some?: InputMaybe<ConfigCareerWhereInput>;
  positionBox5ImageConfigCareer_every?: InputMaybe<ConfigCareerWhereInput>;
  positionBox5ImageConfigCareer_none?: InputMaybe<ConfigCareerWhereInput>;
  positionBox5ImageConfigCareer_some?: InputMaybe<ConfigCareerWhereInput>;
  productThumbnailsSectionCollectionFeatureLarge_every?: InputMaybe<SectionCollectionFeatureLargeWhereInput>;
  productThumbnailsSectionCollectionFeatureLarge_none?: InputMaybe<SectionCollectionFeatureLargeWhereInput>;
  productThumbnailsSectionCollectionFeatureLarge_some?: InputMaybe<SectionCollectionFeatureLargeWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  salonPartnersImage1ConfigSalonMenu_every?: InputMaybe<ConfigSalonMenuWhereInput>;
  salonPartnersImage1ConfigSalonMenu_none?: InputMaybe<ConfigSalonMenuWhereInput>;
  salonPartnersImage1ConfigSalonMenu_some?: InputMaybe<ConfigSalonMenuWhereInput>;
  salonPartnersImage2ConfigSalonMenu_every?: InputMaybe<ConfigSalonMenuWhereInput>;
  salonPartnersImage2ConfigSalonMenu_none?: InputMaybe<ConfigSalonMenuWhereInput>;
  salonPartnersImage2ConfigSalonMenu_some?: InputMaybe<ConfigSalonMenuWhereInput>;
  salonPartnersImage3ConfigSalonMenu_every?: InputMaybe<ConfigSalonMenuWhereInput>;
  salonPartnersImage3ConfigSalonMenu_none?: InputMaybe<ConfigSalonMenuWhereInput>;
  salonPartnersImage3ConfigSalonMenu_some?: InputMaybe<ConfigSalonMenuWhereInput>;
  salonWelcomeImage1ConfigSalonBooking_every?: InputMaybe<ConfigSalonBookingWhereInput>;
  salonWelcomeImage1ConfigSalonBooking_none?: InputMaybe<ConfigSalonBookingWhereInput>;
  salonWelcomeImage1ConfigSalonBooking_some?: InputMaybe<ConfigSalonBookingWhereInput>;
  salonWelcomeImage2ConfigSalonBooking_every?: InputMaybe<ConfigSalonBookingWhereInput>;
  salonWelcomeImage2ConfigSalonBooking_none?: InputMaybe<ConfigSalonBookingWhereInput>;
  salonWelcomeImage2ConfigSalonBooking_some?: InputMaybe<ConfigSalonBookingWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  videosSectionVideoCarousel_every?: InputMaybe<SectionVideoCarouselWhereInput>;
  videosSectionVideoCarousel_none?: InputMaybe<SectionVideoCarouselWhereInput>;
  videosSectionVideoCarousel_some?: InputMaybe<SectionVideoCarouselWhereInput>;
};

export enum AssetOrderByInput {
  AltTextAsc = 'altText_ASC',
  AltTextDesc = 'altText_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  FileNameAsc = 'fileName_ASC',
  FileNameDesc = 'fileName_DESC',
  HandleAsc = 'handle_ASC',
  HandleDesc = 'handle_DESC',
  HeightAsc = 'height_ASC',
  HeightDesc = 'height_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  MimeTypeAsc = 'mimeType_ASC',
  MimeTypeDesc = 'mimeType_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SizeAsc = 'size_ASC',
  SizeDesc = 'size_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WidthAsc = 'width_ASC',
  WidthDesc = 'width_DESC'
}

/** Transformations for Assets */
export type AssetTransformationInput = {
  document?: InputMaybe<DocumentTransformationInput>;
  image?: InputMaybe<ImageTransformationInput>;
  /** Pass true if you want to validate the passed transformation parameters */
  validateOptions?: InputMaybe<Scalars['Boolean']>;
};

export type AssetUpdateInput = {
  altText?: InputMaybe<Scalars['String']>;
  articleMainImageDesktopPageBuyingGuide?: InputMaybe<PageBuyingGuideUpdateManyInlineInput>;
  authorImageBlogAuthor?: InputMaybe<BlogAuthorUpdateManyInlineInput>;
  benefitIcon1ConfigCareer?: InputMaybe<ConfigCareerUpdateManyInlineInput>;
  benefitIcon2ConfigCareer?: InputMaybe<ConfigCareerUpdateManyInlineInput>;
  benefitIcon3ConfigCareer?: InputMaybe<ConfigCareerUpdateManyInlineInput>;
  benefitIcon4ConfigCareer?: InputMaybe<ConfigCareerUpdateManyInlineInput>;
  benefitIcon5ConfigCareer?: InputMaybe<ConfigCareerUpdateManyInlineInput>;
  benefitIcon6ConfigCareer?: InputMaybe<ConfigCareerUpdateManyInlineInput>;
  brandLogoBrandsBrandLogo?: InputMaybe<BrandsBrandLogoUpdateManyInlineInput>;
  careersContentLinkedBlocksIcon2ConfigCareer?: InputMaybe<ConfigCareerUpdateManyInlineInput>;
  careersContentLinkedBlocksIconLinkCareerContentLinkedBlock?: InputMaybe<LinkCareerContentLinkedBlockUpdateManyInlineInput>;
  desktopImageHeroBanner?: InputMaybe<HeroBannerUpdateManyInlineInput>;
  desktopImageJoinCTApanel?: InputMaybe<JoinCtApanelUpdateManyInlineInput>;
  desktopImageModulePromoBanner?: InputMaybe<ModulePromoBannerUpdateManyInlineInput>;
  desktopImageSectionImageTextOverlay?: InputMaybe<SectionImageTextOverlayUpdateManyInlineInput>;
  fileName?: InputMaybe<Scalars['String']>;
  footerLogoFooterConfig?: InputMaybe<FooterConfigUpdateManyInlineInput>;
  handle?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  howToAsset1ProductHowTo?: InputMaybe<ProductHowToUpdateManyInlineInput>;
  howToAsset2ProductHowTo?: InputMaybe<ProductHowToUpdateManyInlineInput>;
  iconFileLinkIcon?: InputMaybe<LinkIconUpdateManyInlineInput>;
  iconModuleIconAndText?: InputMaybe<ModuleIconAndTextUpdateManyInlineInput>;
  iconProductIcon?: InputMaybe<ProductIconUpdateManyInlineInput>;
  imageBrand?: InputMaybe<BrandUpdateManyInlineInput>;
  imageCollectionLink?: InputMaybe<CollectionLinkUpdateManyInlineInput>;
  imageGridSocialMediaCtaLarge?: InputMaybe<SocialMediaCtaLargeUpdateManyInlineInput>;
  imageModuleImageAndText?: InputMaybe<ModuleImageAndTextUpdateManyInlineInput>;
  imageOfferItem?: InputMaybe<OfferItemUpdateManyInlineInput>;
  imageProductBenefitsItem?: InputMaybe<ProductBenefitsItemUpdateManyInlineInput>;
  imagesSectionFullWidthImage?: InputMaybe<SectionFullWidthImageUpdateManyInlineInput>;
  imagesSectionSocialMediaCtaSmall?: InputMaybe<SectionSocialMediaCtaSmallUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<AssetUpdateLocalizationsInput>;
  logoHeaderConfig?: InputMaybe<HeaderConfigUpdateManyInlineInput>;
  mainImageMobilePageBuyingGuide?: InputMaybe<PageBuyingGuideUpdateManyInlineInput>;
  mimeType?: InputMaybe<Scalars['String']>;
  mobileImageHeroBanner?: InputMaybe<HeroBannerUpdateManyInlineInput>;
  mobileImageJoinCTApanel?: InputMaybe<JoinCtApanelUpdateManyInlineInput>;
  mobileImageModulePromoBanner?: InputMaybe<ModulePromoBannerUpdateManyInlineInput>;
  mobileImageSectionImageTextOverlay?: InputMaybe<SectionImageTextOverlayUpdateManyInlineInput>;
  paymentLogosFooterConfig?: InputMaybe<FooterConfigUpdateManyInlineInput>;
  positionBox1ImageConfigCareer?: InputMaybe<ConfigCareerUpdateManyInlineInput>;
  positionBox2ImageConfigCareer?: InputMaybe<ConfigCareerUpdateManyInlineInput>;
  positionBox3ImageConfigCareer?: InputMaybe<ConfigCareerUpdateManyInlineInput>;
  positionBox4ImageConfigCareer?: InputMaybe<ConfigCareerUpdateManyInlineInput>;
  positionBox5ImageConfigCareer?: InputMaybe<ConfigCareerUpdateManyInlineInput>;
  productThumbnailsSectionCollectionFeatureLarge?: InputMaybe<SectionCollectionFeatureLargeUpdateManyInlineInput>;
  promoImageLinkPromoImage?: InputMaybe<LinkPromoImageUpdateManyInlineInput>;
  salonBookingStep2HairLengthImage1SalonBookingStep?: InputMaybe<SalonBookingStepUpdateManyInlineInput>;
  salonBookingStep2HairLengthImage2SalonBookingStep?: InputMaybe<SalonBookingStepUpdateManyInlineInput>;
  salonBookingStep2HairLengthImage3SalonBookingStep?: InputMaybe<SalonBookingStepUpdateManyInlineInput>;
  salonPartnersImage1ConfigSalonMenu?: InputMaybe<ConfigSalonMenuUpdateManyInlineInput>;
  salonPartnersImage2ConfigSalonMenu?: InputMaybe<ConfigSalonMenuUpdateManyInlineInput>;
  salonPartnersImage3ConfigSalonMenu?: InputMaybe<ConfigSalonMenuUpdateManyInlineInput>;
  salonWelcomeImage1ConfigSalonBooking?: InputMaybe<ConfigSalonBookingUpdateManyInlineInput>;
  salonWelcomeImage2ConfigSalonBooking?: InputMaybe<ConfigSalonBookingUpdateManyInlineInput>;
  size?: InputMaybe<Scalars['Float']>;
  videosSectionVideoCarousel?: InputMaybe<SectionVideoCarouselUpdateManyInlineInput>;
  width?: InputMaybe<Scalars['Float']>;
};

export type AssetUpdateLocalizationDataInput = {
  fileName?: InputMaybe<Scalars['String']>;
  handle?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  size?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type AssetUpdateLocalizationInput = {
  data: AssetUpdateLocalizationDataInput;
  locale: Locale;
};

export type AssetUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<AssetCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<AssetUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<AssetUpsertLocalizationInput>>;
};

export type AssetUpdateManyInlineInput = {
  /** Connect multiple existing Asset documents */
  connect?: InputMaybe<Array<AssetConnectInput>>;
  /** Create and connect multiple Asset documents */
  create?: InputMaybe<Array<AssetCreateInput>>;
  /** Delete multiple Asset documents */
  delete?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Disconnect multiple Asset documents */
  disconnect?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Asset documents */
  set?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Update multiple Asset documents */
  update?: InputMaybe<Array<AssetUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Asset documents */
  upsert?: InputMaybe<Array<AssetUpsertWithNestedWhereUniqueInput>>;
};

export type AssetUpdateManyInput = {
  altText?: InputMaybe<Scalars['String']>;
  fileName?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<AssetUpdateManyLocalizationsInput>;
  mimeType?: InputMaybe<Scalars['String']>;
  size?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type AssetUpdateManyLocalizationDataInput = {
  fileName?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  size?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type AssetUpdateManyLocalizationInput = {
  data: AssetUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type AssetUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<AssetUpdateManyLocalizationInput>>;
};

export type AssetUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: AssetUpdateManyInput;
  /** Document search */
  where: AssetWhereInput;
};

export type AssetUpdateOneInlineInput = {
  /** Connect existing Asset document */
  connect?: InputMaybe<AssetWhereUniqueInput>;
  /** Create and connect one Asset document */
  create?: InputMaybe<AssetCreateInput>;
  /** Delete currently connected Asset document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Asset document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Asset document */
  update?: InputMaybe<AssetUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Asset document */
  upsert?: InputMaybe<AssetUpsertWithNestedWhereUniqueInput>;
};

export type AssetUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: AssetUpdateInput;
  /** Unique document search */
  where: AssetWhereUniqueInput;
};

export type AssetUpsertInput = {
  /** Create document if it didn't exist */
  create: AssetCreateInput;
  /** Update document if it exists */
  update: AssetUpdateInput;
};

export type AssetUpsertLocalizationInput = {
  create: AssetCreateLocalizationDataInput;
  locale: Locale;
  update: AssetUpdateLocalizationDataInput;
};

export type AssetUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: AssetUpsertInput;
  /** Unique document search */
  where: AssetWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type AssetWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type AssetWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AssetWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  altText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  altText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  altText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  altText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  altText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  altText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  altText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  altText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  altText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  altText_starts_with?: InputMaybe<Scalars['String']>;
  articleMainImageDesktopPageBuyingGuide_every?: InputMaybe<PageBuyingGuideWhereInput>;
  articleMainImageDesktopPageBuyingGuide_none?: InputMaybe<PageBuyingGuideWhereInput>;
  articleMainImageDesktopPageBuyingGuide_some?: InputMaybe<PageBuyingGuideWhereInput>;
  authorImageBlogAuthor_every?: InputMaybe<BlogAuthorWhereInput>;
  authorImageBlogAuthor_none?: InputMaybe<BlogAuthorWhereInput>;
  authorImageBlogAuthor_some?: InputMaybe<BlogAuthorWhereInput>;
  benefitIcon1ConfigCareer_every?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon1ConfigCareer_none?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon1ConfigCareer_some?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon2ConfigCareer_every?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon2ConfigCareer_none?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon2ConfigCareer_some?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon3ConfigCareer_every?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon3ConfigCareer_none?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon3ConfigCareer_some?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon4ConfigCareer_every?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon4ConfigCareer_none?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon4ConfigCareer_some?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon5ConfigCareer_every?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon5ConfigCareer_none?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon5ConfigCareer_some?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon6ConfigCareer_every?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon6ConfigCareer_none?: InputMaybe<ConfigCareerWhereInput>;
  benefitIcon6ConfigCareer_some?: InputMaybe<ConfigCareerWhereInput>;
  brandLogoBrandsBrandLogo_every?: InputMaybe<BrandsBrandLogoWhereInput>;
  brandLogoBrandsBrandLogo_none?: InputMaybe<BrandsBrandLogoWhereInput>;
  brandLogoBrandsBrandLogo_some?: InputMaybe<BrandsBrandLogoWhereInput>;
  careersContentLinkedBlocksIcon2ConfigCareer_every?: InputMaybe<ConfigCareerWhereInput>;
  careersContentLinkedBlocksIcon2ConfigCareer_none?: InputMaybe<ConfigCareerWhereInput>;
  careersContentLinkedBlocksIcon2ConfigCareer_some?: InputMaybe<ConfigCareerWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  desktopImageHeroBanner_every?: InputMaybe<HeroBannerWhereInput>;
  desktopImageHeroBanner_none?: InputMaybe<HeroBannerWhereInput>;
  desktopImageHeroBanner_some?: InputMaybe<HeroBannerWhereInput>;
  desktopImageJoinCTApanel_every?: InputMaybe<JoinCtApanelWhereInput>;
  desktopImageJoinCTApanel_none?: InputMaybe<JoinCtApanelWhereInput>;
  desktopImageJoinCTApanel_some?: InputMaybe<JoinCtApanelWhereInput>;
  desktopImageModulePromoBanner_every?: InputMaybe<ModulePromoBannerWhereInput>;
  desktopImageModulePromoBanner_none?: InputMaybe<ModulePromoBannerWhereInput>;
  desktopImageModulePromoBanner_some?: InputMaybe<ModulePromoBannerWhereInput>;
  desktopImageSectionImageTextOverlay_every?: InputMaybe<SectionImageTextOverlayWhereInput>;
  desktopImageSectionImageTextOverlay_none?: InputMaybe<SectionImageTextOverlayWhereInput>;
  desktopImageSectionImageTextOverlay_some?: InputMaybe<SectionImageTextOverlayWhereInput>;
  documentInStages_every?: InputMaybe<AssetWhereStageInput>;
  documentInStages_none?: InputMaybe<AssetWhereStageInput>;
  documentInStages_some?: InputMaybe<AssetWhereStageInput>;
  fileName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  fileName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  fileName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  fileName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  fileName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  fileName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  fileName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  fileName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  fileName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  fileName_starts_with?: InputMaybe<Scalars['String']>;
  footerLogoFooterConfig_every?: InputMaybe<FooterConfigWhereInput>;
  footerLogoFooterConfig_none?: InputMaybe<FooterConfigWhereInput>;
  footerLogoFooterConfig_some?: InputMaybe<FooterConfigWhereInput>;
  handle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  handle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  handle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  handle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  handle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  handle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  handle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  handle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  handle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  handle_starts_with?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  height_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  height_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  height_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
  /** All values less than the given value. */
  height_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  height_lte?: InputMaybe<Scalars['Float']>;
  /** Any other value that exists and is not equal to the given value. */
  height_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  height_not_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
  howToAsset1ProductHowTo_every?: InputMaybe<ProductHowToWhereInput>;
  howToAsset1ProductHowTo_none?: InputMaybe<ProductHowToWhereInput>;
  howToAsset1ProductHowTo_some?: InputMaybe<ProductHowToWhereInput>;
  howToAsset2ProductHowTo_every?: InputMaybe<ProductHowToWhereInput>;
  howToAsset2ProductHowTo_none?: InputMaybe<ProductHowToWhereInput>;
  howToAsset2ProductHowTo_some?: InputMaybe<ProductHowToWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  imageGridSocialMediaCtaLarge_every?: InputMaybe<SocialMediaCtaLargeWhereInput>;
  imageGridSocialMediaCtaLarge_none?: InputMaybe<SocialMediaCtaLargeWhereInput>;
  imageGridSocialMediaCtaLarge_some?: InputMaybe<SocialMediaCtaLargeWhereInput>;
  imagesSectionFullWidthImage_every?: InputMaybe<SectionFullWidthImageWhereInput>;
  imagesSectionFullWidthImage_none?: InputMaybe<SectionFullWidthImageWhereInput>;
  imagesSectionFullWidthImage_some?: InputMaybe<SectionFullWidthImageWhereInput>;
  imagesSectionSocialMediaCtaSmall_every?: InputMaybe<SectionSocialMediaCtaSmallWhereInput>;
  imagesSectionSocialMediaCtaSmall_none?: InputMaybe<SectionSocialMediaCtaSmallWhereInput>;
  imagesSectionSocialMediaCtaSmall_some?: InputMaybe<SectionSocialMediaCtaSmallWhereInput>;
  logoHeaderConfig_every?: InputMaybe<HeaderConfigWhereInput>;
  logoHeaderConfig_none?: InputMaybe<HeaderConfigWhereInput>;
  logoHeaderConfig_some?: InputMaybe<HeaderConfigWhereInput>;
  mainImageMobilePageBuyingGuide_every?: InputMaybe<PageBuyingGuideWhereInput>;
  mainImageMobilePageBuyingGuide_none?: InputMaybe<PageBuyingGuideWhereInput>;
  mainImageMobilePageBuyingGuide_some?: InputMaybe<PageBuyingGuideWhereInput>;
  mimeType?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  mimeType_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  mimeType_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  mimeType_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  mimeType_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  mimeType_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  mimeType_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  mimeType_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  mimeType_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  mimeType_starts_with?: InputMaybe<Scalars['String']>;
  mobileImageHeroBanner_every?: InputMaybe<HeroBannerWhereInput>;
  mobileImageHeroBanner_none?: InputMaybe<HeroBannerWhereInput>;
  mobileImageHeroBanner_some?: InputMaybe<HeroBannerWhereInput>;
  mobileImageJoinCTApanel_every?: InputMaybe<JoinCtApanelWhereInput>;
  mobileImageJoinCTApanel_none?: InputMaybe<JoinCtApanelWhereInput>;
  mobileImageJoinCTApanel_some?: InputMaybe<JoinCtApanelWhereInput>;
  mobileImageModulePromoBanner_every?: InputMaybe<ModulePromoBannerWhereInput>;
  mobileImageModulePromoBanner_none?: InputMaybe<ModulePromoBannerWhereInput>;
  mobileImageModulePromoBanner_some?: InputMaybe<ModulePromoBannerWhereInput>;
  mobileImageSectionImageTextOverlay_every?: InputMaybe<SectionImageTextOverlayWhereInput>;
  mobileImageSectionImageTextOverlay_none?: InputMaybe<SectionImageTextOverlayWhereInput>;
  mobileImageSectionImageTextOverlay_some?: InputMaybe<SectionImageTextOverlayWhereInput>;
  paymentLogosFooterConfig_every?: InputMaybe<FooterConfigWhereInput>;
  paymentLogosFooterConfig_none?: InputMaybe<FooterConfigWhereInput>;
  paymentLogosFooterConfig_some?: InputMaybe<FooterConfigWhereInput>;
  positionBox1ImageConfigCareer_every?: InputMaybe<ConfigCareerWhereInput>;
  positionBox1ImageConfigCareer_none?: InputMaybe<ConfigCareerWhereInput>;
  positionBox1ImageConfigCareer_some?: InputMaybe<ConfigCareerWhereInput>;
  positionBox2ImageConfigCareer_every?: InputMaybe<ConfigCareerWhereInput>;
  positionBox2ImageConfigCareer_none?: InputMaybe<ConfigCareerWhereInput>;
  positionBox2ImageConfigCareer_some?: InputMaybe<ConfigCareerWhereInput>;
  positionBox3ImageConfigCareer_every?: InputMaybe<ConfigCareerWhereInput>;
  positionBox3ImageConfigCareer_none?: InputMaybe<ConfigCareerWhereInput>;
  positionBox3ImageConfigCareer_some?: InputMaybe<ConfigCareerWhereInput>;
  positionBox4ImageConfigCareer_every?: InputMaybe<ConfigCareerWhereInput>;
  positionBox4ImageConfigCareer_none?: InputMaybe<ConfigCareerWhereInput>;
  positionBox4ImageConfigCareer_some?: InputMaybe<ConfigCareerWhereInput>;
  positionBox5ImageConfigCareer_every?: InputMaybe<ConfigCareerWhereInput>;
  positionBox5ImageConfigCareer_none?: InputMaybe<ConfigCareerWhereInput>;
  positionBox5ImageConfigCareer_some?: InputMaybe<ConfigCareerWhereInput>;
  productThumbnailsSectionCollectionFeatureLarge_every?: InputMaybe<SectionCollectionFeatureLargeWhereInput>;
  productThumbnailsSectionCollectionFeatureLarge_none?: InputMaybe<SectionCollectionFeatureLargeWhereInput>;
  productThumbnailsSectionCollectionFeatureLarge_some?: InputMaybe<SectionCollectionFeatureLargeWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  salonPartnersImage1ConfigSalonMenu_every?: InputMaybe<ConfigSalonMenuWhereInput>;
  salonPartnersImage1ConfigSalonMenu_none?: InputMaybe<ConfigSalonMenuWhereInput>;
  salonPartnersImage1ConfigSalonMenu_some?: InputMaybe<ConfigSalonMenuWhereInput>;
  salonPartnersImage2ConfigSalonMenu_every?: InputMaybe<ConfigSalonMenuWhereInput>;
  salonPartnersImage2ConfigSalonMenu_none?: InputMaybe<ConfigSalonMenuWhereInput>;
  salonPartnersImage2ConfigSalonMenu_some?: InputMaybe<ConfigSalonMenuWhereInput>;
  salonPartnersImage3ConfigSalonMenu_every?: InputMaybe<ConfigSalonMenuWhereInput>;
  salonPartnersImage3ConfigSalonMenu_none?: InputMaybe<ConfigSalonMenuWhereInput>;
  salonPartnersImage3ConfigSalonMenu_some?: InputMaybe<ConfigSalonMenuWhereInput>;
  salonWelcomeImage1ConfigSalonBooking_every?: InputMaybe<ConfigSalonBookingWhereInput>;
  salonWelcomeImage1ConfigSalonBooking_none?: InputMaybe<ConfigSalonBookingWhereInput>;
  salonWelcomeImage1ConfigSalonBooking_some?: InputMaybe<ConfigSalonBookingWhereInput>;
  salonWelcomeImage2ConfigSalonBooking_every?: InputMaybe<ConfigSalonBookingWhereInput>;
  salonWelcomeImage2ConfigSalonBooking_none?: InputMaybe<ConfigSalonBookingWhereInput>;
  salonWelcomeImage2ConfigSalonBooking_some?: InputMaybe<ConfigSalonBookingWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  size?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  size_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  size_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  size_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
  /** All values less than the given value. */
  size_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  size_lte?: InputMaybe<Scalars['Float']>;
  /** Any other value that exists and is not equal to the given value. */
  size_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  size_not_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  videosSectionVideoCarousel_every?: InputMaybe<SectionVideoCarouselWhereInput>;
  videosSectionVideoCarousel_none?: InputMaybe<SectionVideoCarouselWhereInput>;
  videosSectionVideoCarousel_some?: InputMaybe<SectionVideoCarouselWhereInput>;
  width?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  width_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  width_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  width_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
  /** All values less than the given value. */
  width_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  width_lte?: InputMaybe<Scalars['Float']>;
  /** Any other value that exists and is not equal to the given value. */
  width_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  width_not_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type AssetWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AssetWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AssetWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AssetWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<AssetWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Asset record uniquely */
export type AssetWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum BackgroundColour {
  LightBrown = 'Light_Brown',
  None = 'None'
}

export type BatchPayload = {
  __typename?: 'BatchPayload';
  /** The number of nodes that have been affected by the Batch operation. */
  count: Scalars['Long'];
};

export type BlogArticle = Node & {
  __typename?: 'BlogArticle';
  articleSources: Array<BlogArticlearticleSourcesUnion>;
  blogAuthor?: Maybe<BlogAuthor>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<BlogArticle>;
  headline?: Maybe<Scalars['String']>;
  /** List of BlogArticle versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  pageBuilder: Array<BlogArticlePageBuilder>;
  pageMeta?: Maybe<PageMeta>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  subHeadline?: Maybe<Scalars['String']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  url?: Maybe<Scalars['String']>;
};


export type BlogArticleArticleSourcesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type BlogArticleBlogAuthorArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type BlogArticleCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type BlogArticleDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type BlogArticleHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type BlogArticlePageBuilderArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type BlogArticlePageMetaArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type BlogArticlePublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type BlogArticleScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type BlogArticleUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type BlogArticleConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: BlogArticleWhereUniqueInput;
};

/** A connection to a list of items. */
export type BlogArticleConnection = {
  __typename?: 'BlogArticleConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<BlogArticleEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type BlogArticleCreateInput = {
  articleSources?: InputMaybe<BlogArticlearticleSourcesUnionCreateManyInlineInput>;
  blogAuthor?: InputMaybe<BlogAuthorCreateOneInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  headline?: InputMaybe<Scalars['String']>;
  pageBuilder?: InputMaybe<BlogArticlePageBuilderCreateManyInlineInput>;
  pageMeta?: InputMaybe<PageMetaCreateOneInlineInput>;
  subHeadline?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  url?: InputMaybe<Scalars['String']>;
};

export type BlogArticleCreateManyInlineInput = {
  /** Connect multiple existing BlogArticle documents */
  connect?: InputMaybe<Array<BlogArticleWhereUniqueInput>>;
  /** Create and connect multiple existing BlogArticle documents */
  create?: InputMaybe<Array<BlogArticleCreateInput>>;
};

export type BlogArticleCreateOneInlineInput = {
  /** Connect one existing BlogArticle document */
  connect?: InputMaybe<BlogArticleWhereUniqueInput>;
  /** Create and connect one BlogArticle document */
  create?: InputMaybe<BlogArticleCreateInput>;
};

/** An edge in a connection. */
export type BlogArticleEdge = {
  __typename?: 'BlogArticleEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: BlogArticle;
};

/** Identifies documents */
export type BlogArticleManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BlogArticleWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BlogArticleWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BlogArticleWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** All values in which the union is empty. */
  articleSources_empty?: InputMaybe<Scalars['Boolean']>;
  /** Matches if the modular component contains at least one connection to the item provided to the filter */
  articleSources_some?: InputMaybe<BlogArticlearticleSourcesUnionWhereInput>;
  blogAuthor?: InputMaybe<BlogAuthorWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<BlogArticleWhereStageInput>;
  documentInStages_none?: InputMaybe<BlogArticleWhereStageInput>;
  documentInStages_some?: InputMaybe<BlogArticleWhereStageInput>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values in which the union is empty */
  pageBuilder_empty?: InputMaybe<Scalars['Boolean']>;
  /** Matches if the union contains at least one connection to the provided item to the filter */
  pageBuilder_some?: InputMaybe<BlogArticlePageBuilderWhereInput>;
  pageMeta?: InputMaybe<PageMetaWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  subHeadline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subHeadline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subHeadline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subHeadline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subHeadline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subHeadline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subHeadline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subHeadline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subHeadline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subHeadline_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  url?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  url_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  url_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  url_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  url_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  url_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  url_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  url_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  url_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  url_starts_with?: InputMaybe<Scalars['String']>;
};

export enum BlogArticleOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  HeadlineAsc = 'headline_ASC',
  HeadlineDesc = 'headline_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SubHeadlineAsc = 'subHeadline_ASC',
  SubHeadlineDesc = 'subHeadline_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC'
}

export type BlogArticlePageBuilder = SectionFullWidthImage | SectionTextBlock;

export type BlogArticlePageBuilderConnectInput = {
  SectionFullWidthImage?: InputMaybe<SectionFullWidthImageConnectInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockConnectInput>;
};

export type BlogArticlePageBuilderCreateInput = {
  SectionFullWidthImage?: InputMaybe<SectionFullWidthImageCreateInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockCreateInput>;
};

export type BlogArticlePageBuilderCreateManyInlineInput = {
  /** Connect multiple existing BlogArticlePageBuilder documents */
  connect?: InputMaybe<Array<BlogArticlePageBuilderWhereUniqueInput>>;
  /** Create and connect multiple existing BlogArticlePageBuilder documents */
  create?: InputMaybe<Array<BlogArticlePageBuilderCreateInput>>;
};

export type BlogArticlePageBuilderCreateOneInlineInput = {
  /** Connect one existing BlogArticlePageBuilder document */
  connect?: InputMaybe<BlogArticlePageBuilderWhereUniqueInput>;
  /** Create and connect one BlogArticlePageBuilder document */
  create?: InputMaybe<BlogArticlePageBuilderCreateInput>;
};

export type BlogArticlePageBuilderUpdateInput = {
  SectionFullWidthImage?: InputMaybe<SectionFullWidthImageUpdateInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockUpdateInput>;
};

export type BlogArticlePageBuilderUpdateManyInlineInput = {
  /** Connect multiple existing BlogArticlePageBuilder documents */
  connect?: InputMaybe<Array<BlogArticlePageBuilderConnectInput>>;
  /** Create and connect multiple BlogArticlePageBuilder documents */
  create?: InputMaybe<Array<BlogArticlePageBuilderCreateInput>>;
  /** Delete multiple BlogArticlePageBuilder documents */
  delete?: InputMaybe<Array<BlogArticlePageBuilderWhereUniqueInput>>;
  /** Disconnect multiple BlogArticlePageBuilder documents */
  disconnect?: InputMaybe<Array<BlogArticlePageBuilderWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing BlogArticlePageBuilder documents */
  set?: InputMaybe<Array<BlogArticlePageBuilderWhereUniqueInput>>;
  /** Update multiple BlogArticlePageBuilder documents */
  update?: InputMaybe<Array<BlogArticlePageBuilderUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple BlogArticlePageBuilder documents */
  upsert?: InputMaybe<Array<BlogArticlePageBuilderUpsertWithNestedWhereUniqueInput>>;
};

export type BlogArticlePageBuilderUpdateManyWithNestedWhereInput = {
  SectionFullWidthImage?: InputMaybe<SectionFullWidthImageUpdateManyWithNestedWhereInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockUpdateManyWithNestedWhereInput>;
};

export type BlogArticlePageBuilderUpdateOneInlineInput = {
  /** Connect existing BlogArticlePageBuilder document */
  connect?: InputMaybe<BlogArticlePageBuilderWhereUniqueInput>;
  /** Create and connect one BlogArticlePageBuilder document */
  create?: InputMaybe<BlogArticlePageBuilderCreateInput>;
  /** Delete currently connected BlogArticlePageBuilder document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected BlogArticlePageBuilder document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single BlogArticlePageBuilder document */
  update?: InputMaybe<BlogArticlePageBuilderUpdateWithNestedWhereUniqueInput>;
  /** Upsert single BlogArticlePageBuilder document */
  upsert?: InputMaybe<BlogArticlePageBuilderUpsertWithNestedWhereUniqueInput>;
};

export type BlogArticlePageBuilderUpdateWithNestedWhereUniqueInput = {
  SectionFullWidthImage?: InputMaybe<SectionFullWidthImageUpdateWithNestedWhereUniqueInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockUpdateWithNestedWhereUniqueInput>;
};

export type BlogArticlePageBuilderUpsertWithNestedWhereUniqueInput = {
  SectionFullWidthImage?: InputMaybe<SectionFullWidthImageUpsertWithNestedWhereUniqueInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockUpsertWithNestedWhereUniqueInput>;
};

export type BlogArticlePageBuilderWhereInput = {
  SectionFullWidthImage?: InputMaybe<SectionFullWidthImageWhereInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockWhereInput>;
};

export type BlogArticlePageBuilderWhereUniqueInput = {
  SectionFullWidthImage?: InputMaybe<SectionFullWidthImageWhereUniqueInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockWhereUniqueInput>;
};

export type BlogArticleUpdateInput = {
  articleSources?: InputMaybe<BlogArticlearticleSourcesUnionUpdateManyInlineInput>;
  blogAuthor?: InputMaybe<BlogAuthorUpdateOneInlineInput>;
  headline?: InputMaybe<Scalars['String']>;
  pageBuilder?: InputMaybe<BlogArticlePageBuilderUpdateManyInlineInput>;
  pageMeta?: InputMaybe<PageMetaUpdateOneInlineInput>;
  subHeadline?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
};

export type BlogArticleUpdateManyInlineInput = {
  /** Connect multiple existing BlogArticle documents */
  connect?: InputMaybe<Array<BlogArticleConnectInput>>;
  /** Create and connect multiple BlogArticle documents */
  create?: InputMaybe<Array<BlogArticleCreateInput>>;
  /** Delete multiple BlogArticle documents */
  delete?: InputMaybe<Array<BlogArticleWhereUniqueInput>>;
  /** Disconnect multiple BlogArticle documents */
  disconnect?: InputMaybe<Array<BlogArticleWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing BlogArticle documents */
  set?: InputMaybe<Array<BlogArticleWhereUniqueInput>>;
  /** Update multiple BlogArticle documents */
  update?: InputMaybe<Array<BlogArticleUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple BlogArticle documents */
  upsert?: InputMaybe<Array<BlogArticleUpsertWithNestedWhereUniqueInput>>;
};

export type BlogArticleUpdateManyInput = {
  headline?: InputMaybe<Scalars['String']>;
  subHeadline?: InputMaybe<Scalars['String']>;
};

export type BlogArticleUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: BlogArticleUpdateManyInput;
  /** Document search */
  where: BlogArticleWhereInput;
};

export type BlogArticleUpdateOneInlineInput = {
  /** Connect existing BlogArticle document */
  connect?: InputMaybe<BlogArticleWhereUniqueInput>;
  /** Create and connect one BlogArticle document */
  create?: InputMaybe<BlogArticleCreateInput>;
  /** Delete currently connected BlogArticle document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected BlogArticle document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single BlogArticle document */
  update?: InputMaybe<BlogArticleUpdateWithNestedWhereUniqueInput>;
  /** Upsert single BlogArticle document */
  upsert?: InputMaybe<BlogArticleUpsertWithNestedWhereUniqueInput>;
};

export type BlogArticleUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: BlogArticleUpdateInput;
  /** Unique document search */
  where: BlogArticleWhereUniqueInput;
};

export type BlogArticleUpsertInput = {
  /** Create document if it didn't exist */
  create: BlogArticleCreateInput;
  /** Update document if it exists */
  update: BlogArticleUpdateInput;
};

export type BlogArticleUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: BlogArticleUpsertInput;
  /** Unique document search */
  where: BlogArticleWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type BlogArticleWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type BlogArticleWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BlogArticleWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BlogArticleWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BlogArticleWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** All values in which the union is empty. */
  articleSources_empty?: InputMaybe<Scalars['Boolean']>;
  /** Matches if the modular component contains at least one connection to the item provided to the filter */
  articleSources_some?: InputMaybe<BlogArticlearticleSourcesUnionWhereInput>;
  blogAuthor?: InputMaybe<BlogAuthorWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<BlogArticleWhereStageInput>;
  documentInStages_none?: InputMaybe<BlogArticleWhereStageInput>;
  documentInStages_some?: InputMaybe<BlogArticleWhereStageInput>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values in which the union is empty */
  pageBuilder_empty?: InputMaybe<Scalars['Boolean']>;
  /** Matches if the union contains at least one connection to the provided item to the filter */
  pageBuilder_some?: InputMaybe<BlogArticlePageBuilderWhereInput>;
  pageMeta?: InputMaybe<PageMetaWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  subHeadline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subHeadline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subHeadline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subHeadline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subHeadline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subHeadline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subHeadline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subHeadline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subHeadline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subHeadline_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  url?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  url_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  url_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  url_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  url_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  url_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  url_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  url_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  url_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  url_starts_with?: InputMaybe<Scalars['String']>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type BlogArticleWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BlogArticleWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BlogArticleWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BlogArticleWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<BlogArticleWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References BlogArticle record uniquely */
export type BlogArticleWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  url?: InputMaybe<Scalars['String']>;
};

export type BlogArticlearticleSourcesUnion = Link;

export type BlogArticlearticleSourcesUnionConnectInput = {
  Link?: InputMaybe<LinkConnectInput>;
};

export type BlogArticlearticleSourcesUnionCreateInput = {
  Link?: InputMaybe<LinkCreateInput>;
};

export type BlogArticlearticleSourcesUnionCreateManyInlineInput = {
  /** Create and connect multiple existing BlogArticlearticleSourcesUnion documents */
  create?: InputMaybe<Array<BlogArticlearticleSourcesUnionCreateInput>>;
};

export type BlogArticlearticleSourcesUnionCreateOneInlineInput = {
  /** Create and connect one BlogArticlearticleSourcesUnion document */
  create?: InputMaybe<BlogArticlearticleSourcesUnionCreateInput>;
};

export type BlogArticlearticleSourcesUnionCreateWithPositionInput = {
  Link?: InputMaybe<LinkCreateWithPositionInput>;
};

export type BlogArticlearticleSourcesUnionUpdateInput = {
  Link?: InputMaybe<LinkUpdateInput>;
};

export type BlogArticlearticleSourcesUnionUpdateManyInlineInput = {
  /** Create and connect multiple BlogArticlearticleSourcesUnion component instances */
  create?: InputMaybe<Array<BlogArticlearticleSourcesUnionCreateWithPositionInput>>;
  /** Delete multiple BlogArticlearticleSourcesUnion documents */
  delete?: InputMaybe<Array<BlogArticlearticleSourcesUnionWhereUniqueInput>>;
  /** Update multiple BlogArticlearticleSourcesUnion component instances */
  update?: InputMaybe<Array<BlogArticlearticleSourcesUnionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple BlogArticlearticleSourcesUnion component instances */
  upsert?: InputMaybe<Array<BlogArticlearticleSourcesUnionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type BlogArticlearticleSourcesUnionUpdateManyWithNestedWhereInput = {
  Link?: InputMaybe<LinkUpdateManyWithNestedWhereInput>;
};

export type BlogArticlearticleSourcesUnionUpdateOneInlineInput = {
  /** Create and connect one BlogArticlearticleSourcesUnion document */
  create?: InputMaybe<BlogArticlearticleSourcesUnionCreateInput>;
  /** Delete currently connected BlogArticlearticleSourcesUnion document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single BlogArticlearticleSourcesUnion document */
  update?: InputMaybe<BlogArticlearticleSourcesUnionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single BlogArticlearticleSourcesUnion document */
  upsert?: InputMaybe<BlogArticlearticleSourcesUnionUpsertWithNestedWhereUniqueInput>;
};

export type BlogArticlearticleSourcesUnionUpdateWithNestedWhereUniqueAndPositionInput = {
  Link?: InputMaybe<LinkUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type BlogArticlearticleSourcesUnionUpdateWithNestedWhereUniqueInput = {
  Link?: InputMaybe<LinkUpdateWithNestedWhereUniqueInput>;
};

export type BlogArticlearticleSourcesUnionUpsertWithNestedWhereUniqueAndPositionInput = {
  Link?: InputMaybe<LinkUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type BlogArticlearticleSourcesUnionUpsertWithNestedWhereUniqueInput = {
  Link?: InputMaybe<LinkUpsertWithNestedWhereUniqueInput>;
};

export type BlogArticlearticleSourcesUnionWhereInput = {
  Link?: InputMaybe<LinkWhereInput>;
};

export type BlogArticlearticleSourcesUnionWhereUniqueInput = {
  Link?: InputMaybe<LinkWhereUniqueInput>;
};

export type BlogAuthor = Node & {
  __typename?: 'BlogAuthor';
  authorImage?: Maybe<Asset>;
  authorName?: Maybe<Scalars['String']>;
  authorPosition?: Maybe<Scalars['String']>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<BlogAuthor>;
  /** List of BlogAuthor versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  pageBlogArticles: Array<BlogArticle>;
  pageBuyingGuides: Array<PageBuyingGuide>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type BlogAuthorAuthorImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type BlogAuthorCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type BlogAuthorDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type BlogAuthorHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type BlogAuthorPageBlogArticlesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<BlogArticleOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogArticleWhereInput>;
};


export type BlogAuthorPageBuyingGuidesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<PageBuyingGuideOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PageBuyingGuideWhereInput>;
};


export type BlogAuthorPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type BlogAuthorScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type BlogAuthorUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type BlogAuthorConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: BlogAuthorWhereUniqueInput;
};

/** A connection to a list of items. */
export type BlogAuthorConnection = {
  __typename?: 'BlogAuthorConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<BlogAuthorEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type BlogAuthorCreateInput = {
  authorImage?: InputMaybe<AssetCreateOneInlineInput>;
  authorName?: InputMaybe<Scalars['String']>;
  authorPosition?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  pageBlogArticles?: InputMaybe<BlogArticleCreateManyInlineInput>;
  pageBuyingGuides?: InputMaybe<PageBuyingGuideCreateManyInlineInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type BlogAuthorCreateManyInlineInput = {
  /** Connect multiple existing BlogAuthor documents */
  connect?: InputMaybe<Array<BlogAuthorWhereUniqueInput>>;
  /** Create and connect multiple existing BlogAuthor documents */
  create?: InputMaybe<Array<BlogAuthorCreateInput>>;
};

export type BlogAuthorCreateOneInlineInput = {
  /** Connect one existing BlogAuthor document */
  connect?: InputMaybe<BlogAuthorWhereUniqueInput>;
  /** Create and connect one BlogAuthor document */
  create?: InputMaybe<BlogAuthorCreateInput>;
};

/** An edge in a connection. */
export type BlogAuthorEdge = {
  __typename?: 'BlogAuthorEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: BlogAuthor;
};

/** Identifies documents */
export type BlogAuthorManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BlogAuthorWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BlogAuthorWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BlogAuthorWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  authorImage?: InputMaybe<AssetWhereInput>;
  authorName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  authorName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  authorName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  authorName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  authorName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  authorName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  authorName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  authorName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  authorName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  authorName_starts_with?: InputMaybe<Scalars['String']>;
  authorPosition?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  authorPosition_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  authorPosition_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  authorPosition_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  authorPosition_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  authorPosition_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  authorPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  authorPosition_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  authorPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  authorPosition_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<BlogAuthorWhereStageInput>;
  documentInStages_none?: InputMaybe<BlogAuthorWhereStageInput>;
  documentInStages_some?: InputMaybe<BlogAuthorWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  pageBlogArticles_every?: InputMaybe<BlogArticleWhereInput>;
  pageBlogArticles_none?: InputMaybe<BlogArticleWhereInput>;
  pageBlogArticles_some?: InputMaybe<BlogArticleWhereInput>;
  pageBuyingGuides_every?: InputMaybe<PageBuyingGuideWhereInput>;
  pageBuyingGuides_none?: InputMaybe<PageBuyingGuideWhereInput>;
  pageBuyingGuides_some?: InputMaybe<PageBuyingGuideWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum BlogAuthorOrderByInput {
  AuthorNameAsc = 'authorName_ASC',
  AuthorNameDesc = 'authorName_DESC',
  AuthorPositionAsc = 'authorPosition_ASC',
  AuthorPositionDesc = 'authorPosition_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type BlogAuthorUpdateInput = {
  authorImage?: InputMaybe<AssetUpdateOneInlineInput>;
  authorName?: InputMaybe<Scalars['String']>;
  authorPosition?: InputMaybe<Scalars['String']>;
  pageBlogArticles?: InputMaybe<BlogArticleUpdateManyInlineInput>;
  pageBuyingGuides?: InputMaybe<PageBuyingGuideUpdateManyInlineInput>;
};

export type BlogAuthorUpdateManyInlineInput = {
  /** Connect multiple existing BlogAuthor documents */
  connect?: InputMaybe<Array<BlogAuthorConnectInput>>;
  /** Create and connect multiple BlogAuthor documents */
  create?: InputMaybe<Array<BlogAuthorCreateInput>>;
  /** Delete multiple BlogAuthor documents */
  delete?: InputMaybe<Array<BlogAuthorWhereUniqueInput>>;
  /** Disconnect multiple BlogAuthor documents */
  disconnect?: InputMaybe<Array<BlogAuthorWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing BlogAuthor documents */
  set?: InputMaybe<Array<BlogAuthorWhereUniqueInput>>;
  /** Update multiple BlogAuthor documents */
  update?: InputMaybe<Array<BlogAuthorUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple BlogAuthor documents */
  upsert?: InputMaybe<Array<BlogAuthorUpsertWithNestedWhereUniqueInput>>;
};

export type BlogAuthorUpdateManyInput = {
  authorName?: InputMaybe<Scalars['String']>;
  authorPosition?: InputMaybe<Scalars['String']>;
};

export type BlogAuthorUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: BlogAuthorUpdateManyInput;
  /** Document search */
  where: BlogAuthorWhereInput;
};

export type BlogAuthorUpdateOneInlineInput = {
  /** Connect existing BlogAuthor document */
  connect?: InputMaybe<BlogAuthorWhereUniqueInput>;
  /** Create and connect one BlogAuthor document */
  create?: InputMaybe<BlogAuthorCreateInput>;
  /** Delete currently connected BlogAuthor document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected BlogAuthor document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single BlogAuthor document */
  update?: InputMaybe<BlogAuthorUpdateWithNestedWhereUniqueInput>;
  /** Upsert single BlogAuthor document */
  upsert?: InputMaybe<BlogAuthorUpsertWithNestedWhereUniqueInput>;
};

export type BlogAuthorUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: BlogAuthorUpdateInput;
  /** Unique document search */
  where: BlogAuthorWhereUniqueInput;
};

export type BlogAuthorUpsertInput = {
  /** Create document if it didn't exist */
  create: BlogAuthorCreateInput;
  /** Update document if it exists */
  update: BlogAuthorUpdateInput;
};

export type BlogAuthorUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: BlogAuthorUpsertInput;
  /** Unique document search */
  where: BlogAuthorWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type BlogAuthorWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type BlogAuthorWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BlogAuthorWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BlogAuthorWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BlogAuthorWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  authorImage?: InputMaybe<AssetWhereInput>;
  authorName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  authorName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  authorName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  authorName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  authorName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  authorName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  authorName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  authorName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  authorName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  authorName_starts_with?: InputMaybe<Scalars['String']>;
  authorPosition?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  authorPosition_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  authorPosition_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  authorPosition_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  authorPosition_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  authorPosition_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  authorPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  authorPosition_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  authorPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  authorPosition_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<BlogAuthorWhereStageInput>;
  documentInStages_none?: InputMaybe<BlogAuthorWhereStageInput>;
  documentInStages_some?: InputMaybe<BlogAuthorWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  pageBlogArticles_every?: InputMaybe<BlogArticleWhereInput>;
  pageBlogArticles_none?: InputMaybe<BlogArticleWhereInput>;
  pageBlogArticles_some?: InputMaybe<BlogArticleWhereInput>;
  pageBuyingGuides_every?: InputMaybe<PageBuyingGuideWhereInput>;
  pageBuyingGuides_none?: InputMaybe<PageBuyingGuideWhereInput>;
  pageBuyingGuides_some?: InputMaybe<PageBuyingGuideWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type BlogAuthorWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BlogAuthorWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BlogAuthorWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BlogAuthorWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<BlogAuthorWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References BlogAuthor record uniquely */
export type BlogAuthorWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum BlogCategories {
  HairHealth = 'Hair_Health',
  InHouse = 'In_House',
  NewLove = 'New_Love',
  ProFiles = 'Pro_Files'
}

export type Brand = {
  __typename?: 'Brand';
  /** The unique identifier */
  id: Scalars['ID'];
  image: Asset;
  name?: Maybe<Scalars['String']>;
  openInNewWindow?: Maybe<Scalars['Boolean']>;
  /** System stage field */
  stage: Stage;
  url?: Maybe<Scalars['String']>;
};


export type BrandImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type BrandConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: BrandWhereUniqueInput;
};

/** A connection to a list of items. */
export type BrandConnection = {
  __typename?: 'BrandConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<BrandEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type BrandCreateInput = {
  image: AssetCreateOneInlineInput;
  name?: InputMaybe<Scalars['String']>;
  openInNewWindow?: InputMaybe<Scalars['Boolean']>;
  url?: InputMaybe<Scalars['String']>;
};

export type BrandCreateManyInlineInput = {
  /** Create and connect multiple existing Brand documents */
  create?: InputMaybe<Array<BrandCreateInput>>;
};

export type BrandCreateOneInlineInput = {
  /** Create and connect one Brand document */
  create?: InputMaybe<BrandCreateInput>;
};

export type BrandCreateWithPositionInput = {
  /** Document to create */
  data: BrandCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type BrandEdge = {
  __typename?: 'BrandEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Brand;
};

export type BrandLogoGrid = Node & {
  __typename?: 'BrandLogoGrid';
  brandsBrands: Array<BrandsBrandLogo>;
  collectionPages: Array<CollectionPage>;
  configSearches: Array<ConfigSearch>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<BrandLogoGrid>;
  fullWidthTemplates: Array<CmsPage>;
  headingText: Scalars['String'];
  /** List of BrandLogoGrid versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  name: Scalars['String'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  subtext?: Maybe<Scalars['String']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type BrandLogoGridBrandsBrandsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<BrandsBrandLogoOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BrandsBrandLogoWhereInput>;
};


export type BrandLogoGridCollectionPagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CollectionPageWhereInput>;
};


export type BrandLogoGridConfigSearchesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigSearchWhereInput>;
};


export type BrandLogoGridCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type BrandLogoGridDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type BrandLogoGridFullWidthTemplatesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsPageWhereInput>;
};


export type BrandLogoGridHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type BrandLogoGridPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type BrandLogoGridScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type BrandLogoGridUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type BrandLogoGridConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: BrandLogoGridWhereUniqueInput;
};

/** A connection to a list of items. */
export type BrandLogoGridConnection = {
  __typename?: 'BrandLogoGridConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<BrandLogoGridEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type BrandLogoGridCreateInput = {
  brandsBrands?: InputMaybe<BrandsBrandLogoCreateManyInlineInput>;
  collectionPages?: InputMaybe<CollectionPageCreateManyInlineInput>;
  configSearches?: InputMaybe<ConfigSearchCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  fullWidthTemplates?: InputMaybe<CmsPageCreateManyInlineInput>;
  headingText: Scalars['String'];
  name: Scalars['String'];
  subtext?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type BrandLogoGridCreateManyInlineInput = {
  /** Connect multiple existing BrandLogoGrid documents */
  connect?: InputMaybe<Array<BrandLogoGridWhereUniqueInput>>;
  /** Create and connect multiple existing BrandLogoGrid documents */
  create?: InputMaybe<Array<BrandLogoGridCreateInput>>;
};

export type BrandLogoGridCreateOneInlineInput = {
  /** Connect one existing BrandLogoGrid document */
  connect?: InputMaybe<BrandLogoGridWhereUniqueInput>;
  /** Create and connect one BrandLogoGrid document */
  create?: InputMaybe<BrandLogoGridCreateInput>;
};

/** An edge in a connection. */
export type BrandLogoGridEdge = {
  __typename?: 'BrandLogoGridEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: BrandLogoGrid;
};

/** Identifies documents */
export type BrandLogoGridManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BrandLogoGridWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BrandLogoGridWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BrandLogoGridWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  brandsBrands_every?: InputMaybe<BrandsBrandLogoWhereInput>;
  brandsBrands_none?: InputMaybe<BrandsBrandLogoWhereInput>;
  brandsBrands_some?: InputMaybe<BrandsBrandLogoWhereInput>;
  collectionPages_every?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_none?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_some?: InputMaybe<CollectionPageWhereInput>;
  configSearches_every?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_none?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_some?: InputMaybe<ConfigSearchWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<BrandLogoGridWhereStageInput>;
  documentInStages_none?: InputMaybe<BrandLogoGridWhereStageInput>;
  documentInStages_some?: InputMaybe<BrandLogoGridWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  headingText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headingText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headingText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headingText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headingText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headingText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headingText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headingText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headingText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headingText_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  subtext?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subtext_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subtext_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subtext_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subtext_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subtext_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subtext_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subtext_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subtext_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subtext_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum BrandLogoGridOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  HeadingTextAsc = 'headingText_ASC',
  HeadingTextDesc = 'headingText_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SubtextAsc = 'subtext_ASC',
  SubtextDesc = 'subtext_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type BrandLogoGridUpdateInput = {
  brandsBrands?: InputMaybe<BrandsBrandLogoUpdateManyInlineInput>;
  collectionPages?: InputMaybe<CollectionPageUpdateManyInlineInput>;
  configSearches?: InputMaybe<ConfigSearchUpdateManyInlineInput>;
  fullWidthTemplates?: InputMaybe<CmsPageUpdateManyInlineInput>;
  headingText?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  subtext?: InputMaybe<Scalars['String']>;
};

export type BrandLogoGridUpdateManyInlineInput = {
  /** Connect multiple existing BrandLogoGrid documents */
  connect?: InputMaybe<Array<BrandLogoGridConnectInput>>;
  /** Create and connect multiple BrandLogoGrid documents */
  create?: InputMaybe<Array<BrandLogoGridCreateInput>>;
  /** Delete multiple BrandLogoGrid documents */
  delete?: InputMaybe<Array<BrandLogoGridWhereUniqueInput>>;
  /** Disconnect multiple BrandLogoGrid documents */
  disconnect?: InputMaybe<Array<BrandLogoGridWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing BrandLogoGrid documents */
  set?: InputMaybe<Array<BrandLogoGridWhereUniqueInput>>;
  /** Update multiple BrandLogoGrid documents */
  update?: InputMaybe<Array<BrandLogoGridUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple BrandLogoGrid documents */
  upsert?: InputMaybe<Array<BrandLogoGridUpsertWithNestedWhereUniqueInput>>;
};

export type BrandLogoGridUpdateManyInput = {
  headingText?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  subtext?: InputMaybe<Scalars['String']>;
};

export type BrandLogoGridUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: BrandLogoGridUpdateManyInput;
  /** Document search */
  where: BrandLogoGridWhereInput;
};

export type BrandLogoGridUpdateOneInlineInput = {
  /** Connect existing BrandLogoGrid document */
  connect?: InputMaybe<BrandLogoGridWhereUniqueInput>;
  /** Create and connect one BrandLogoGrid document */
  create?: InputMaybe<BrandLogoGridCreateInput>;
  /** Delete currently connected BrandLogoGrid document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected BrandLogoGrid document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single BrandLogoGrid document */
  update?: InputMaybe<BrandLogoGridUpdateWithNestedWhereUniqueInput>;
  /** Upsert single BrandLogoGrid document */
  upsert?: InputMaybe<BrandLogoGridUpsertWithNestedWhereUniqueInput>;
};

export type BrandLogoGridUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: BrandLogoGridUpdateInput;
  /** Unique document search */
  where: BrandLogoGridWhereUniqueInput;
};

export type BrandLogoGridUpsertInput = {
  /** Create document if it didn't exist */
  create: BrandLogoGridCreateInput;
  /** Update document if it exists */
  update: BrandLogoGridUpdateInput;
};

export type BrandLogoGridUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: BrandLogoGridUpsertInput;
  /** Unique document search */
  where: BrandLogoGridWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type BrandLogoGridWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type BrandLogoGridWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BrandLogoGridWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BrandLogoGridWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BrandLogoGridWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  brandsBrands_every?: InputMaybe<BrandsBrandLogoWhereInput>;
  brandsBrands_none?: InputMaybe<BrandsBrandLogoWhereInput>;
  brandsBrands_some?: InputMaybe<BrandsBrandLogoWhereInput>;
  collectionPages_every?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_none?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_some?: InputMaybe<CollectionPageWhereInput>;
  configSearches_every?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_none?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_some?: InputMaybe<ConfigSearchWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<BrandLogoGridWhereStageInput>;
  documentInStages_none?: InputMaybe<BrandLogoGridWhereStageInput>;
  documentInStages_some?: InputMaybe<BrandLogoGridWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  headingText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headingText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headingText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headingText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headingText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headingText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headingText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headingText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headingText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headingText_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  subtext?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subtext_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subtext_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subtext_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subtext_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subtext_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subtext_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subtext_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subtext_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subtext_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type BrandLogoGridWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BrandLogoGridWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BrandLogoGridWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BrandLogoGridWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<BrandLogoGridWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References BrandLogoGrid record uniquely */
export type BrandLogoGridWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Identifies documents */
export type BrandManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BrandWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BrandWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BrandWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  openInNewWindow?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  openInNewWindow_not?: InputMaybe<Scalars['Boolean']>;
  url?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  url_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  url_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  url_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  url_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  url_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  url_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  url_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  url_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  url_starts_with?: InputMaybe<Scalars['String']>;
};

export enum BrandOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  OpenInNewWindowAsc = 'openInNewWindow_ASC',
  OpenInNewWindowDesc = 'openInNewWindow_DESC',
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC'
}

export type BrandUpdateInput = {
  image?: InputMaybe<AssetUpdateOneInlineInput>;
  name?: InputMaybe<Scalars['String']>;
  openInNewWindow?: InputMaybe<Scalars['Boolean']>;
  url?: InputMaybe<Scalars['String']>;
};

export type BrandUpdateManyInlineInput = {
  /** Create and connect multiple Brand component instances */
  create?: InputMaybe<Array<BrandCreateWithPositionInput>>;
  /** Delete multiple Brand documents */
  delete?: InputMaybe<Array<BrandWhereUniqueInput>>;
  /** Update multiple Brand component instances */
  update?: InputMaybe<Array<BrandUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple Brand component instances */
  upsert?: InputMaybe<Array<BrandUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type BrandUpdateManyInput = {
  name?: InputMaybe<Scalars['String']>;
  openInNewWindow?: InputMaybe<Scalars['Boolean']>;
  url?: InputMaybe<Scalars['String']>;
};

export type BrandUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: BrandUpdateManyInput;
  /** Document search */
  where: BrandWhereInput;
};

export type BrandUpdateOneInlineInput = {
  /** Create and connect one Brand document */
  create?: InputMaybe<BrandCreateInput>;
  /** Delete currently connected Brand document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single Brand document */
  update?: InputMaybe<BrandUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Brand document */
  upsert?: InputMaybe<BrandUpsertWithNestedWhereUniqueInput>;
};

export type BrandUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<BrandUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: BrandWhereUniqueInput;
};

export type BrandUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: BrandUpdateInput;
  /** Unique document search */
  where: BrandWhereUniqueInput;
};

export type BrandUpsertInput = {
  /** Create document if it didn't exist */
  create: BrandCreateInput;
  /** Update document if it exists */
  update: BrandUpdateInput;
};

export type BrandUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<BrandUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: BrandWhereUniqueInput;
};

export type BrandUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: BrandUpsertInput;
  /** Unique document search */
  where: BrandWhereUniqueInput;
};

/** Identifies documents */
export type BrandWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BrandWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BrandWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BrandWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  openInNewWindow?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  openInNewWindow_not?: InputMaybe<Scalars['Boolean']>;
  url?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  url_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  url_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  url_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  url_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  url_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  url_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  url_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  url_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  url_starts_with?: InputMaybe<Scalars['String']>;
};

/** References Brand record uniquely */
export type BrandWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type BrandsBrandLogo = Node & {
  __typename?: 'BrandsBrandLogo';
  brandLogo?: Maybe<Asset>;
  brandName?: Maybe<Scalars['String']>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<BrandsBrandLogo>;
  /** List of BrandsBrandLogo versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type BrandsBrandLogoBrandLogoArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type BrandsBrandLogoCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type BrandsBrandLogoDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type BrandsBrandLogoHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type BrandsBrandLogoPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type BrandsBrandLogoScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type BrandsBrandLogoUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type BrandsBrandLogoConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: BrandsBrandLogoWhereUniqueInput;
};

/** A connection to a list of items. */
export type BrandsBrandLogoConnection = {
  __typename?: 'BrandsBrandLogoConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<BrandsBrandLogoEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type BrandsBrandLogoCreateInput = {
  brandLogo?: InputMaybe<AssetCreateOneInlineInput>;
  brandName?: InputMaybe<Scalars['String']>;
  cli3xvsqg1tya01ul3h8ofhhp?: InputMaybe<BrandLogoGridCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type BrandsBrandLogoCreateManyInlineInput = {
  /** Connect multiple existing BrandsBrandLogo documents */
  connect?: InputMaybe<Array<BrandsBrandLogoWhereUniqueInput>>;
  /** Create and connect multiple existing BrandsBrandLogo documents */
  create?: InputMaybe<Array<BrandsBrandLogoCreateInput>>;
};

export type BrandsBrandLogoCreateOneInlineInput = {
  /** Connect one existing BrandsBrandLogo document */
  connect?: InputMaybe<BrandsBrandLogoWhereUniqueInput>;
  /** Create and connect one BrandsBrandLogo document */
  create?: InputMaybe<BrandsBrandLogoCreateInput>;
};

/** An edge in a connection. */
export type BrandsBrandLogoEdge = {
  __typename?: 'BrandsBrandLogoEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: BrandsBrandLogo;
};

/** Identifies documents */
export type BrandsBrandLogoManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BrandsBrandLogoWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BrandsBrandLogoWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BrandsBrandLogoWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  brandLogo?: InputMaybe<AssetWhereInput>;
  brandName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  brandName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  brandName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  brandName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  brandName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  brandName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  brandName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  brandName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  brandName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  brandName_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<BrandsBrandLogoWhereStageInput>;
  documentInStages_none?: InputMaybe<BrandsBrandLogoWhereStageInput>;
  documentInStages_some?: InputMaybe<BrandsBrandLogoWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum BrandsBrandLogoOrderByInput {
  BrandNameAsc = 'brandName_ASC',
  BrandNameDesc = 'brandName_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type BrandsBrandLogoUpdateInput = {
  brandLogo?: InputMaybe<AssetUpdateOneInlineInput>;
  brandName?: InputMaybe<Scalars['String']>;
  cli3xvsqg1tya01ul3h8ofhhp?: InputMaybe<BrandLogoGridUpdateManyInlineInput>;
};

export type BrandsBrandLogoUpdateManyInlineInput = {
  /** Connect multiple existing BrandsBrandLogo documents */
  connect?: InputMaybe<Array<BrandsBrandLogoConnectInput>>;
  /** Create and connect multiple BrandsBrandLogo documents */
  create?: InputMaybe<Array<BrandsBrandLogoCreateInput>>;
  /** Delete multiple BrandsBrandLogo documents */
  delete?: InputMaybe<Array<BrandsBrandLogoWhereUniqueInput>>;
  /** Disconnect multiple BrandsBrandLogo documents */
  disconnect?: InputMaybe<Array<BrandsBrandLogoWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing BrandsBrandLogo documents */
  set?: InputMaybe<Array<BrandsBrandLogoWhereUniqueInput>>;
  /** Update multiple BrandsBrandLogo documents */
  update?: InputMaybe<Array<BrandsBrandLogoUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple BrandsBrandLogo documents */
  upsert?: InputMaybe<Array<BrandsBrandLogoUpsertWithNestedWhereUniqueInput>>;
};

export type BrandsBrandLogoUpdateManyInput = {
  brandName?: InputMaybe<Scalars['String']>;
};

export type BrandsBrandLogoUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: BrandsBrandLogoUpdateManyInput;
  /** Document search */
  where: BrandsBrandLogoWhereInput;
};

export type BrandsBrandLogoUpdateOneInlineInput = {
  /** Connect existing BrandsBrandLogo document */
  connect?: InputMaybe<BrandsBrandLogoWhereUniqueInput>;
  /** Create and connect one BrandsBrandLogo document */
  create?: InputMaybe<BrandsBrandLogoCreateInput>;
  /** Delete currently connected BrandsBrandLogo document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected BrandsBrandLogo document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single BrandsBrandLogo document */
  update?: InputMaybe<BrandsBrandLogoUpdateWithNestedWhereUniqueInput>;
  /** Upsert single BrandsBrandLogo document */
  upsert?: InputMaybe<BrandsBrandLogoUpsertWithNestedWhereUniqueInput>;
};

export type BrandsBrandLogoUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: BrandsBrandLogoUpdateInput;
  /** Unique document search */
  where: BrandsBrandLogoWhereUniqueInput;
};

export type BrandsBrandLogoUpsertInput = {
  /** Create document if it didn't exist */
  create: BrandsBrandLogoCreateInput;
  /** Update document if it exists */
  update: BrandsBrandLogoUpdateInput;
};

export type BrandsBrandLogoUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: BrandsBrandLogoUpsertInput;
  /** Unique document search */
  where: BrandsBrandLogoWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type BrandsBrandLogoWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type BrandsBrandLogoWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BrandsBrandLogoWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BrandsBrandLogoWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BrandsBrandLogoWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  brandLogo?: InputMaybe<AssetWhereInput>;
  brandName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  brandName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  brandName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  brandName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  brandName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  brandName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  brandName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  brandName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  brandName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  brandName_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<BrandsBrandLogoWhereStageInput>;
  documentInStages_none?: InputMaybe<BrandsBrandLogoWhereStageInput>;
  documentInStages_some?: InputMaybe<BrandsBrandLogoWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type BrandsBrandLogoWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BrandsBrandLogoWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BrandsBrandLogoWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BrandsBrandLogoWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<BrandsBrandLogoWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References BrandsBrandLogo record uniquely */
export type BrandsBrandLogoWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type CmsPage = Node & {
  __typename?: 'CMSPage';
  adminTitle?: Maybe<Scalars['String']>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<CmsPage>;
  hideFromSitemap?: Maybe<Scalars['Boolean']>;
  /** List of CMSPage versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  pageMeta?: Maybe<PageMeta>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  sections: Array<FullWidthTemplateContent>;
  /** System stage field */
  stage: Stage;
  title: Scalars['String'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  url?: Maybe<Scalars['String']>;
};


export type CmsPageCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type CmsPageDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type CmsPageHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type CmsPagePageMetaArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type CmsPagePublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type CmsPageScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type CmsPageSectionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type CmsPageUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type CmsPageConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: CmsPageWhereUniqueInput;
};

/** A connection to a list of items. */
export type CmsPageConnection = {
  __typename?: 'CMSPageConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<CmsPageEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CmsPageCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  hideFromSitemap?: InputMaybe<Scalars['Boolean']>;
  pageMeta?: InputMaybe<PageMetaCreateOneInlineInput>;
  sections?: InputMaybe<FullWidthTemplateContentCreateManyInlineInput>;
  title: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  url?: InputMaybe<Scalars['String']>;
};

export type CmsPageCreateManyInlineInput = {
  /** Connect multiple existing CMSPage documents */
  connect?: InputMaybe<Array<CmsPageWhereUniqueInput>>;
  /** Create and connect multiple existing CMSPage documents */
  create?: InputMaybe<Array<CmsPageCreateInput>>;
};

export type CmsPageCreateOneInlineInput = {
  /** Connect one existing CMSPage document */
  connect?: InputMaybe<CmsPageWhereUniqueInput>;
  /** Create and connect one CMSPage document */
  create?: InputMaybe<CmsPageCreateInput>;
};

/** An edge in a connection. */
export type CmsPageEdge = {
  __typename?: 'CMSPageEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: CmsPage;
};

/** Identifies documents */
export type CmsPageManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CmsPageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CmsPageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CmsPageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<CmsPageWhereStageInput>;
  documentInStages_none?: InputMaybe<CmsPageWhereStageInput>;
  documentInStages_some?: InputMaybe<CmsPageWhereStageInput>;
  hideFromSitemap?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  hideFromSitemap_not?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  pageMeta?: InputMaybe<PageMetaWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  /** All values in which the union is empty */
  sections_empty?: InputMaybe<Scalars['Boolean']>;
  /** Matches if the union contains at least one connection to the provided item to the filter */
  sections_some?: InputMaybe<FullWidthTemplateContentWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  url?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  url_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  url_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  url_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  url_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  url_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  url_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  url_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  url_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  url_starts_with?: InputMaybe<Scalars['String']>;
};

export enum CmsPageOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  HideFromSitemapAsc = 'hideFromSitemap_ASC',
  HideFromSitemapDesc = 'hideFromSitemap_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC'
}

export type CmsPageUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  hideFromSitemap?: InputMaybe<Scalars['Boolean']>;
  pageMeta?: InputMaybe<PageMetaUpdateOneInlineInput>;
  sections?: InputMaybe<FullWidthTemplateContentUpdateManyInlineInput>;
  title?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
};

export type CmsPageUpdateManyInlineInput = {
  /** Connect multiple existing CMSPage documents */
  connect?: InputMaybe<Array<CmsPageConnectInput>>;
  /** Create and connect multiple CMSPage documents */
  create?: InputMaybe<Array<CmsPageCreateInput>>;
  /** Delete multiple CMSPage documents */
  delete?: InputMaybe<Array<CmsPageWhereUniqueInput>>;
  /** Disconnect multiple CMSPage documents */
  disconnect?: InputMaybe<Array<CmsPageWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing CMSPage documents */
  set?: InputMaybe<Array<CmsPageWhereUniqueInput>>;
  /** Update multiple CMSPage documents */
  update?: InputMaybe<Array<CmsPageUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple CMSPage documents */
  upsert?: InputMaybe<Array<CmsPageUpsertWithNestedWhereUniqueInput>>;
};

export type CmsPageUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  hideFromSitemap?: InputMaybe<Scalars['Boolean']>;
};

export type CmsPageUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: CmsPageUpdateManyInput;
  /** Document search */
  where: CmsPageWhereInput;
};

export type CmsPageUpdateOneInlineInput = {
  /** Connect existing CMSPage document */
  connect?: InputMaybe<CmsPageWhereUniqueInput>;
  /** Create and connect one CMSPage document */
  create?: InputMaybe<CmsPageCreateInput>;
  /** Delete currently connected CMSPage document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected CMSPage document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single CMSPage document */
  update?: InputMaybe<CmsPageUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CMSPage document */
  upsert?: InputMaybe<CmsPageUpsertWithNestedWhereUniqueInput>;
};

export type CmsPageUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: CmsPageUpdateInput;
  /** Unique document search */
  where: CmsPageWhereUniqueInput;
};

export type CmsPageUpsertInput = {
  /** Create document if it didn't exist */
  create: CmsPageCreateInput;
  /** Update document if it exists */
  update: CmsPageUpdateInput;
};

export type CmsPageUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: CmsPageUpsertInput;
  /** Unique document search */
  where: CmsPageWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type CmsPageWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type CmsPageWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CmsPageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CmsPageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CmsPageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<CmsPageWhereStageInput>;
  documentInStages_none?: InputMaybe<CmsPageWhereStageInput>;
  documentInStages_some?: InputMaybe<CmsPageWhereStageInput>;
  hideFromSitemap?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  hideFromSitemap_not?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  pageMeta?: InputMaybe<PageMetaWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  /** All values in which the union is empty */
  sections_empty?: InputMaybe<Scalars['Boolean']>;
  /** Matches if the union contains at least one connection to the provided item to the filter */
  sections_some?: InputMaybe<FullWidthTemplateContentWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  url?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  url_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  url_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  url_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  url_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  url_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  url_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  url_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  url_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  url_starts_with?: InputMaybe<Scalars['String']>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type CmsPageWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CmsPageWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CmsPageWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CmsPageWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<CmsPageWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References CMSPage record uniquely */
export type CmsPageWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  title?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
};

export type CollectionLink = {
  __typename?: 'CollectionLink';
  collectionPage?: Maybe<CollectionPage>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** Not required for all collection layouts */
  image?: Maybe<Asset>;
  /** System stage field */
  stage: Stage;
  title: Scalars['String'];
};


export type CollectionLinkCollectionPageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type CollectionLinkImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type CollectionLinkConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: CollectionLinkWhereUniqueInput;
};

/** A connection to a list of items. */
export type CollectionLinkConnection = {
  __typename?: 'CollectionLinkConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<CollectionLinkEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CollectionLinkCreateInput = {
  collectionPage?: InputMaybe<CollectionPageCreateOneInlineInput>;
  image?: InputMaybe<AssetCreateOneInlineInput>;
  title: Scalars['String'];
};

export type CollectionLinkCreateManyInlineInput = {
  /** Create and connect multiple existing CollectionLink documents */
  create?: InputMaybe<Array<CollectionLinkCreateInput>>;
};

export type CollectionLinkCreateOneInlineInput = {
  /** Create and connect one CollectionLink document */
  create?: InputMaybe<CollectionLinkCreateInput>;
};

export type CollectionLinkCreateWithPositionInput = {
  /** Document to create */
  data: CollectionLinkCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type CollectionLinkEdge = {
  __typename?: 'CollectionLinkEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: CollectionLink;
};

/** Identifies documents */
export type CollectionLinkManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CollectionLinkWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CollectionLinkWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CollectionLinkWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  collectionPage?: InputMaybe<CollectionPageWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
};

export enum CollectionLinkOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC'
}

export type CollectionLinkParent = MultiCollectionSlider | SectionCollectionCarousel | SectionCollectionDropDown;

export type CollectionLinkParentConnectInput = {
  MultiCollectionSlider?: InputMaybe<MultiCollectionSliderConnectInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselConnectInput>;
  SectionCollectionDropDown?: InputMaybe<SectionCollectionDropDownConnectInput>;
};

export type CollectionLinkParentCreateInput = {
  MultiCollectionSlider?: InputMaybe<MultiCollectionSliderCreateInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselCreateInput>;
  SectionCollectionDropDown?: InputMaybe<SectionCollectionDropDownCreateInput>;
};

export type CollectionLinkParentCreateManyInlineInput = {
  /** Connect multiple existing CollectionLinkParent documents */
  connect?: InputMaybe<Array<CollectionLinkParentWhereUniqueInput>>;
  /** Create and connect multiple existing CollectionLinkParent documents */
  create?: InputMaybe<Array<CollectionLinkParentCreateInput>>;
};

export type CollectionLinkParentCreateOneInlineInput = {
  /** Connect one existing CollectionLinkParent document */
  connect?: InputMaybe<CollectionLinkParentWhereUniqueInput>;
  /** Create and connect one CollectionLinkParent document */
  create?: InputMaybe<CollectionLinkParentCreateInput>;
};

export type CollectionLinkParentUpdateInput = {
  MultiCollectionSlider?: InputMaybe<MultiCollectionSliderUpdateInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselUpdateInput>;
  SectionCollectionDropDown?: InputMaybe<SectionCollectionDropDownUpdateInput>;
};

export type CollectionLinkParentUpdateManyInlineInput = {
  /** Connect multiple existing CollectionLinkParent documents */
  connect?: InputMaybe<Array<CollectionLinkParentConnectInput>>;
  /** Create and connect multiple CollectionLinkParent documents */
  create?: InputMaybe<Array<CollectionLinkParentCreateInput>>;
  /** Delete multiple CollectionLinkParent documents */
  delete?: InputMaybe<Array<CollectionLinkParentWhereUniqueInput>>;
  /** Disconnect multiple CollectionLinkParent documents */
  disconnect?: InputMaybe<Array<CollectionLinkParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing CollectionLinkParent documents */
  set?: InputMaybe<Array<CollectionLinkParentWhereUniqueInput>>;
  /** Update multiple CollectionLinkParent documents */
  update?: InputMaybe<Array<CollectionLinkParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple CollectionLinkParent documents */
  upsert?: InputMaybe<Array<CollectionLinkParentUpsertWithNestedWhereUniqueInput>>;
};

export type CollectionLinkParentUpdateManyWithNestedWhereInput = {
  MultiCollectionSlider?: InputMaybe<MultiCollectionSliderUpdateManyWithNestedWhereInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselUpdateManyWithNestedWhereInput>;
  SectionCollectionDropDown?: InputMaybe<SectionCollectionDropDownUpdateManyWithNestedWhereInput>;
};

export type CollectionLinkParentUpdateOneInlineInput = {
  /** Connect existing CollectionLinkParent document */
  connect?: InputMaybe<CollectionLinkParentWhereUniqueInput>;
  /** Create and connect one CollectionLinkParent document */
  create?: InputMaybe<CollectionLinkParentCreateInput>;
  /** Delete currently connected CollectionLinkParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected CollectionLinkParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single CollectionLinkParent document */
  update?: InputMaybe<CollectionLinkParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CollectionLinkParent document */
  upsert?: InputMaybe<CollectionLinkParentUpsertWithNestedWhereUniqueInput>;
};

export type CollectionLinkParentUpdateWithNestedWhereUniqueInput = {
  MultiCollectionSlider?: InputMaybe<MultiCollectionSliderUpdateWithNestedWhereUniqueInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselUpdateWithNestedWhereUniqueInput>;
  SectionCollectionDropDown?: InputMaybe<SectionCollectionDropDownUpdateWithNestedWhereUniqueInput>;
};

export type CollectionLinkParentUpsertWithNestedWhereUniqueInput = {
  MultiCollectionSlider?: InputMaybe<MultiCollectionSliderUpsertWithNestedWhereUniqueInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselUpsertWithNestedWhereUniqueInput>;
  SectionCollectionDropDown?: InputMaybe<SectionCollectionDropDownUpsertWithNestedWhereUniqueInput>;
};

export type CollectionLinkParentWhereInput = {
  MultiCollectionSlider?: InputMaybe<MultiCollectionSliderWhereInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselWhereInput>;
  SectionCollectionDropDown?: InputMaybe<SectionCollectionDropDownWhereInput>;
};

export type CollectionLinkParentWhereUniqueInput = {
  MultiCollectionSlider?: InputMaybe<MultiCollectionSliderWhereUniqueInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselWhereUniqueInput>;
  SectionCollectionDropDown?: InputMaybe<SectionCollectionDropDownWhereUniqueInput>;
};

export type CollectionLinkUpdateInput = {
  collectionPage?: InputMaybe<CollectionPageUpdateOneInlineInput>;
  image?: InputMaybe<AssetUpdateOneInlineInput>;
  title?: InputMaybe<Scalars['String']>;
};

export type CollectionLinkUpdateManyInlineInput = {
  /** Create and connect multiple CollectionLink component instances */
  create?: InputMaybe<Array<CollectionLinkCreateWithPositionInput>>;
  /** Delete multiple CollectionLink documents */
  delete?: InputMaybe<Array<CollectionLinkWhereUniqueInput>>;
  /** Update multiple CollectionLink component instances */
  update?: InputMaybe<Array<CollectionLinkUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple CollectionLink component instances */
  upsert?: InputMaybe<Array<CollectionLinkUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type CollectionLinkUpdateManyInput = {
  title?: InputMaybe<Scalars['String']>;
};

export type CollectionLinkUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: CollectionLinkUpdateManyInput;
  /** Document search */
  where: CollectionLinkWhereInput;
};

export type CollectionLinkUpdateOneInlineInput = {
  /** Create and connect one CollectionLink document */
  create?: InputMaybe<CollectionLinkCreateInput>;
  /** Delete currently connected CollectionLink document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single CollectionLink document */
  update?: InputMaybe<CollectionLinkUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CollectionLink document */
  upsert?: InputMaybe<CollectionLinkUpsertWithNestedWhereUniqueInput>;
};

export type CollectionLinkUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<CollectionLinkUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CollectionLinkWhereUniqueInput;
};

export type CollectionLinkUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: CollectionLinkUpdateInput;
  /** Unique document search */
  where: CollectionLinkWhereUniqueInput;
};

export type CollectionLinkUpsertInput = {
  /** Create document if it didn't exist */
  create: CollectionLinkCreateInput;
  /** Update document if it exists */
  update: CollectionLinkUpdateInput;
};

export type CollectionLinkUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<CollectionLinkUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CollectionLinkWhereUniqueInput;
};

export type CollectionLinkUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: CollectionLinkUpsertInput;
  /** Unique document search */
  where: CollectionLinkWhereUniqueInput;
};

/** Identifies documents */
export type CollectionLinkWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CollectionLinkWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CollectionLinkWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CollectionLinkWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  collectionPage?: InputMaybe<CollectionPageWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
};

/** References CollectionLink record uniquely */
export type CollectionLinkWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type CollectionPage = Node & {
  __typename?: 'CollectionPage';
  adminTitle?: Maybe<Scalars['String']>;
  collection?: Maybe<ShopifyStorefront_Collection>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<CollectionPage>;
  handle: Scalars['String'];
  /** List of CollectionPage versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  pageMeta?: Maybe<PageMeta>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  sections?: Maybe<CollectionPageSections>;
  shopifyId: Scalars['String'];
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type CollectionPageCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type CollectionPageDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type CollectionPageHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type CollectionPagePageMetaArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type CollectionPagePublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type CollectionPageScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type CollectionPageSectionsArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type CollectionPageUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type CollectionPageConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: CollectionPageWhereUniqueInput;
};

/** A connection to a list of items. */
export type CollectionPageConnection = {
  __typename?: 'CollectionPageConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<CollectionPageEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CollectionPageCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  clhybdfug1tyq01uh2204cebm?: InputMaybe<CollectionLinkCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  handle: Scalars['String'];
  pageMeta?: InputMaybe<PageMetaCreateOneInlineInput>;
  sections?: InputMaybe<CollectionPageSectionsCreateOneInlineInput>;
  shopifyId: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type CollectionPageCreateManyInlineInput = {
  /** Connect multiple existing CollectionPage documents */
  connect?: InputMaybe<Array<CollectionPageWhereUniqueInput>>;
  /** Create and connect multiple existing CollectionPage documents */
  create?: InputMaybe<Array<CollectionPageCreateInput>>;
};

export type CollectionPageCreateOneInlineInput = {
  /** Connect one existing CollectionPage document */
  connect?: InputMaybe<CollectionPageWhereUniqueInput>;
  /** Create and connect one CollectionPage document */
  create?: InputMaybe<CollectionPageCreateInput>;
};

/** An edge in a connection. */
export type CollectionPageEdge = {
  __typename?: 'CollectionPageEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: CollectionPage;
};

/** Identifies documents */
export type CollectionPageManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CollectionPageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CollectionPageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CollectionPageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<CollectionPageWhereStageInput>;
  documentInStages_none?: InputMaybe<CollectionPageWhereStageInput>;
  documentInStages_some?: InputMaybe<CollectionPageWhereStageInput>;
  handle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  handle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  handle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  handle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  handle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  handle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  handle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  handle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  handle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  handle_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  pageMeta?: InputMaybe<PageMetaWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  /** All values in which the union is connected to the given models */
  sections?: InputMaybe<CollectionPageSectionsWhereInput>;
  /** All values in which the union is empty */
  sections_empty?: InputMaybe<Scalars['Boolean']>;
  shopifyId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  shopifyId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  shopifyId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  shopifyId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  shopifyId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  shopifyId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  shopifyId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  shopifyId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  shopifyId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  shopifyId_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum CollectionPageOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  HandleAsc = 'handle_ASC',
  HandleDesc = 'handle_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  ShopifyIdAsc = 'shopifyId_ASC',
  ShopifyIdDesc = 'shopifyId_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type CollectionPageSections = BrandLogoGrid | HeroBanner | OfferTiles | SectionBlogListing | SectionCollectionCarousel | SectionCollectionMain | SectionPreezieProductFinder | SectionSearchTermList | SectionSeoText;

export type CollectionPageSectionsConnectInput = {
  BrandLogoGrid?: InputMaybe<BrandLogoGridConnectInput>;
  HeroBanner?: InputMaybe<HeroBannerConnectInput>;
  OfferTiles?: InputMaybe<OfferTilesConnectInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingConnectInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselConnectInput>;
  SectionCollectionMain?: InputMaybe<SectionCollectionMainConnectInput>;
  SectionPreezieProductFinder?: InputMaybe<SectionPreezieProductFinderConnectInput>;
  SectionSearchTermList?: InputMaybe<SectionSearchTermListConnectInput>;
  SectionSeoText?: InputMaybe<SectionSeoTextConnectInput>;
};

export type CollectionPageSectionsCreateInput = {
  BrandLogoGrid?: InputMaybe<BrandLogoGridCreateInput>;
  HeroBanner?: InputMaybe<HeroBannerCreateInput>;
  OfferTiles?: InputMaybe<OfferTilesCreateInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingCreateInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselCreateInput>;
  SectionCollectionMain?: InputMaybe<SectionCollectionMainCreateInput>;
  SectionPreezieProductFinder?: InputMaybe<SectionPreezieProductFinderCreateInput>;
  SectionSearchTermList?: InputMaybe<SectionSearchTermListCreateInput>;
  SectionSeoText?: InputMaybe<SectionSeoTextCreateInput>;
};

export type CollectionPageSectionsCreateManyInlineInput = {
  /** Connect multiple existing CollectionPageSections documents */
  connect?: InputMaybe<Array<CollectionPageSectionsWhereUniqueInput>>;
  /** Create and connect multiple existing CollectionPageSections documents */
  create?: InputMaybe<Array<CollectionPageSectionsCreateInput>>;
};

export type CollectionPageSectionsCreateOneInlineInput = {
  /** Connect one existing CollectionPageSections document */
  connect?: InputMaybe<CollectionPageSectionsWhereUniqueInput>;
  /** Create and connect one CollectionPageSections document */
  create?: InputMaybe<CollectionPageSectionsCreateInput>;
};

export type CollectionPageSectionsUpdateInput = {
  BrandLogoGrid?: InputMaybe<BrandLogoGridUpdateInput>;
  HeroBanner?: InputMaybe<HeroBannerUpdateInput>;
  OfferTiles?: InputMaybe<OfferTilesUpdateInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingUpdateInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselUpdateInput>;
  SectionCollectionMain?: InputMaybe<SectionCollectionMainUpdateInput>;
  SectionPreezieProductFinder?: InputMaybe<SectionPreezieProductFinderUpdateInput>;
  SectionSearchTermList?: InputMaybe<SectionSearchTermListUpdateInput>;
  SectionSeoText?: InputMaybe<SectionSeoTextUpdateInput>;
};

export type CollectionPageSectionsUpdateManyInlineInput = {
  /** Connect multiple existing CollectionPageSections documents */
  connect?: InputMaybe<Array<CollectionPageSectionsConnectInput>>;
  /** Create and connect multiple CollectionPageSections documents */
  create?: InputMaybe<Array<CollectionPageSectionsCreateInput>>;
  /** Delete multiple CollectionPageSections documents */
  delete?: InputMaybe<Array<CollectionPageSectionsWhereUniqueInput>>;
  /** Disconnect multiple CollectionPageSections documents */
  disconnect?: InputMaybe<Array<CollectionPageSectionsWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing CollectionPageSections documents */
  set?: InputMaybe<Array<CollectionPageSectionsWhereUniqueInput>>;
  /** Update multiple CollectionPageSections documents */
  update?: InputMaybe<Array<CollectionPageSectionsUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple CollectionPageSections documents */
  upsert?: InputMaybe<Array<CollectionPageSectionsUpsertWithNestedWhereUniqueInput>>;
};

export type CollectionPageSectionsUpdateManyWithNestedWhereInput = {
  BrandLogoGrid?: InputMaybe<BrandLogoGridUpdateManyWithNestedWhereInput>;
  HeroBanner?: InputMaybe<HeroBannerUpdateManyWithNestedWhereInput>;
  OfferTiles?: InputMaybe<OfferTilesUpdateManyWithNestedWhereInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingUpdateManyWithNestedWhereInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselUpdateManyWithNestedWhereInput>;
  SectionCollectionMain?: InputMaybe<SectionCollectionMainUpdateManyWithNestedWhereInput>;
  SectionPreezieProductFinder?: InputMaybe<SectionPreezieProductFinderUpdateManyWithNestedWhereInput>;
  SectionSearchTermList?: InputMaybe<SectionSearchTermListUpdateManyWithNestedWhereInput>;
  SectionSeoText?: InputMaybe<SectionSeoTextUpdateManyWithNestedWhereInput>;
};

export type CollectionPageSectionsUpdateOneInlineInput = {
  /** Connect existing CollectionPageSections document */
  connect?: InputMaybe<CollectionPageSectionsWhereUniqueInput>;
  /** Create and connect one CollectionPageSections document */
  create?: InputMaybe<CollectionPageSectionsCreateInput>;
  /** Delete currently connected CollectionPageSections document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected CollectionPageSections document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single CollectionPageSections document */
  update?: InputMaybe<CollectionPageSectionsUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CollectionPageSections document */
  upsert?: InputMaybe<CollectionPageSectionsUpsertWithNestedWhereUniqueInput>;
};

export type CollectionPageSectionsUpdateWithNestedWhereUniqueInput = {
  BrandLogoGrid?: InputMaybe<BrandLogoGridUpdateWithNestedWhereUniqueInput>;
  HeroBanner?: InputMaybe<HeroBannerUpdateWithNestedWhereUniqueInput>;
  OfferTiles?: InputMaybe<OfferTilesUpdateWithNestedWhereUniqueInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingUpdateWithNestedWhereUniqueInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselUpdateWithNestedWhereUniqueInput>;
  SectionCollectionMain?: InputMaybe<SectionCollectionMainUpdateWithNestedWhereUniqueInput>;
  SectionPreezieProductFinder?: InputMaybe<SectionPreezieProductFinderUpdateWithNestedWhereUniqueInput>;
  SectionSearchTermList?: InputMaybe<SectionSearchTermListUpdateWithNestedWhereUniqueInput>;
  SectionSeoText?: InputMaybe<SectionSeoTextUpdateWithNestedWhereUniqueInput>;
};

export type CollectionPageSectionsUpsertWithNestedWhereUniqueInput = {
  BrandLogoGrid?: InputMaybe<BrandLogoGridUpsertWithNestedWhereUniqueInput>;
  HeroBanner?: InputMaybe<HeroBannerUpsertWithNestedWhereUniqueInput>;
  OfferTiles?: InputMaybe<OfferTilesUpsertWithNestedWhereUniqueInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingUpsertWithNestedWhereUniqueInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselUpsertWithNestedWhereUniqueInput>;
  SectionCollectionMain?: InputMaybe<SectionCollectionMainUpsertWithNestedWhereUniqueInput>;
  SectionPreezieProductFinder?: InputMaybe<SectionPreezieProductFinderUpsertWithNestedWhereUniqueInput>;
  SectionSearchTermList?: InputMaybe<SectionSearchTermListUpsertWithNestedWhereUniqueInput>;
  SectionSeoText?: InputMaybe<SectionSeoTextUpsertWithNestedWhereUniqueInput>;
};

export type CollectionPageSectionsWhereInput = {
  BrandLogoGrid?: InputMaybe<BrandLogoGridWhereInput>;
  HeroBanner?: InputMaybe<HeroBannerWhereInput>;
  OfferTiles?: InputMaybe<OfferTilesWhereInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingWhereInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselWhereInput>;
  SectionCollectionMain?: InputMaybe<SectionCollectionMainWhereInput>;
  SectionPreezieProductFinder?: InputMaybe<SectionPreezieProductFinderWhereInput>;
  SectionSearchTermList?: InputMaybe<SectionSearchTermListWhereInput>;
  SectionSeoText?: InputMaybe<SectionSeoTextWhereInput>;
};

export type CollectionPageSectionsWhereUniqueInput = {
  BrandLogoGrid?: InputMaybe<BrandLogoGridWhereUniqueInput>;
  HeroBanner?: InputMaybe<HeroBannerWhereUniqueInput>;
  OfferTiles?: InputMaybe<OfferTilesWhereUniqueInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingWhereUniqueInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselWhereUniqueInput>;
  SectionCollectionMain?: InputMaybe<SectionCollectionMainWhereUniqueInput>;
  SectionPreezieProductFinder?: InputMaybe<SectionPreezieProductFinderWhereUniqueInput>;
  SectionSearchTermList?: InputMaybe<SectionSearchTermListWhereUniqueInput>;
  SectionSeoText?: InputMaybe<SectionSeoTextWhereUniqueInput>;
};

export type CollectionPageUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  clhybdfug1tyq01uh2204cebm?: InputMaybe<CollectionLinkUpdateManyInlineInput>;
  handle?: InputMaybe<Scalars['String']>;
  pageMeta?: InputMaybe<PageMetaUpdateOneInlineInput>;
  sections?: InputMaybe<CollectionPageSectionsUpdateOneInlineInput>;
  shopifyId?: InputMaybe<Scalars['String']>;
};

export type CollectionPageUpdateManyInlineInput = {
  /** Connect multiple existing CollectionPage documents */
  connect?: InputMaybe<Array<CollectionPageConnectInput>>;
  /** Create and connect multiple CollectionPage documents */
  create?: InputMaybe<Array<CollectionPageCreateInput>>;
  /** Delete multiple CollectionPage documents */
  delete?: InputMaybe<Array<CollectionPageWhereUniqueInput>>;
  /** Disconnect multiple CollectionPage documents */
  disconnect?: InputMaybe<Array<CollectionPageWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing CollectionPage documents */
  set?: InputMaybe<Array<CollectionPageWhereUniqueInput>>;
  /** Update multiple CollectionPage documents */
  update?: InputMaybe<Array<CollectionPageUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple CollectionPage documents */
  upsert?: InputMaybe<Array<CollectionPageUpsertWithNestedWhereUniqueInput>>;
};

export type CollectionPageUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  shopifyId?: InputMaybe<Scalars['String']>;
};

export type CollectionPageUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: CollectionPageUpdateManyInput;
  /** Document search */
  where: CollectionPageWhereInput;
};

export type CollectionPageUpdateOneInlineInput = {
  /** Connect existing CollectionPage document */
  connect?: InputMaybe<CollectionPageWhereUniqueInput>;
  /** Create and connect one CollectionPage document */
  create?: InputMaybe<CollectionPageCreateInput>;
  /** Delete currently connected CollectionPage document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected CollectionPage document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single CollectionPage document */
  update?: InputMaybe<CollectionPageUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CollectionPage document */
  upsert?: InputMaybe<CollectionPageUpsertWithNestedWhereUniqueInput>;
};

export type CollectionPageUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: CollectionPageUpdateInput;
  /** Unique document search */
  where: CollectionPageWhereUniqueInput;
};

export type CollectionPageUpsertInput = {
  /** Create document if it didn't exist */
  create: CollectionPageCreateInput;
  /** Update document if it exists */
  update: CollectionPageUpdateInput;
};

export type CollectionPageUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: CollectionPageUpsertInput;
  /** Unique document search */
  where: CollectionPageWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type CollectionPageWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type CollectionPageWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CollectionPageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CollectionPageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CollectionPageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<CollectionPageWhereStageInput>;
  documentInStages_none?: InputMaybe<CollectionPageWhereStageInput>;
  documentInStages_some?: InputMaybe<CollectionPageWhereStageInput>;
  handle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  handle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  handle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  handle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  handle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  handle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  handle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  handle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  handle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  handle_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  pageMeta?: InputMaybe<PageMetaWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  /** All values in which the union is connected to the given models */
  sections?: InputMaybe<CollectionPageSectionsWhereInput>;
  /** All values in which the union is empty */
  sections_empty?: InputMaybe<Scalars['Boolean']>;
  shopifyId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  shopifyId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  shopifyId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  shopifyId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  shopifyId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  shopifyId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  shopifyId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  shopifyId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  shopifyId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  shopifyId_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type CollectionPageWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CollectionPageWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CollectionPageWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CollectionPageWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<CollectionPageWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References CollectionPage record uniquely */
export type CollectionPageWhereUniqueInput = {
  handle?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
};

/** Representing a color value comprising of HEX, RGBA and css color values */
export type Color = {
  __typename?: 'Color';
  css: Scalars['String'];
  hex: Scalars['Hex'];
  rgba: Rgba;
};

/** Accepts either HEX or RGBA color value. At least one of hex or rgba value should be passed. If both are passed RGBA is used. */
export type ColorInput = {
  hex?: InputMaybe<Scalars['Hex']>;
  rgba?: InputMaybe<RgbaInput>;
};

export type ConfigCareer = Node & {
  __typename?: 'ConfigCareer';
  adminTitle?: Maybe<Scalars['String']>;
  benefitHeading?: Maybe<Scalars['String']>;
  benefitIcon1?: Maybe<Asset>;
  benefitIcon2?: Maybe<Asset>;
  benefitIcon3?: Maybe<Asset>;
  benefitIcon4?: Maybe<Asset>;
  benefitIcon5?: Maybe<Asset>;
  benefitIcon6?: Maybe<Asset>;
  benefitText1?: Maybe<Scalars['String']>;
  benefitText2?: Maybe<Scalars['String']>;
  benefitText3?: Maybe<Scalars['String']>;
  benefitText4?: Maybe<Scalars['String']>;
  benefitText5?: Maybe<Scalars['String']>;
  benefitText6?: Maybe<Scalars['String']>;
  careersContentLinkedBlocks1?: Maybe<LinkCareerContentLinkedBlock>;
  careersContentLinkedBlocks2?: Maybe<LinkCareerContentLinkedBlock>;
  careersContentLinkedBlocks3?: Maybe<LinkCareerContentLinkedBlock>;
  careersContentLinkedBlocksIcon2?: Maybe<Asset>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<ConfigCareer>;
  heroBanners: Array<HeroBanner>;
  /** List of ConfigCareer versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  positionBox1Heading?: Maybe<Scalars['String']>;
  /** https://prnt.sc/4QvfvS_LtKMy */
  positionBox1Image?: Maybe<Asset>;
  positionBox1SubText?: Maybe<Scalars['String']>;
  positionBox2Heading?: Maybe<Scalars['String']>;
  positionBox2Image?: Maybe<Asset>;
  positionBox2SubText?: Maybe<Scalars['String']>;
  positionBox3Heading?: Maybe<Scalars['String']>;
  positionBox3Image?: Maybe<Asset>;
  positionBox3SubText?: Maybe<Scalars['String']>;
  positionBox4Heading?: Maybe<Scalars['String']>;
  positionBox4Image?: Maybe<Asset>;
  positionBox4SubText?: Maybe<Scalars['String']>;
  positionBox5Image?: Maybe<Asset>;
  positionBox5SubText?: Maybe<Scalars['String']>;
  positionBox5heading?: Maybe<Scalars['String']>;
  positionHeading?: Maybe<Scalars['String']>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type ConfigCareerBenefitIcon1Args = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigCareerBenefitIcon2Args = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigCareerBenefitIcon3Args = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigCareerBenefitIcon4Args = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigCareerBenefitIcon5Args = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigCareerBenefitIcon6Args = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigCareerCareersContentLinkedBlocks1Args = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigCareerCareersContentLinkedBlocks2Args = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigCareerCareersContentLinkedBlocks3Args = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigCareerCareersContentLinkedBlocksIcon2Args = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigCareerCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigCareerDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type ConfigCareerHeroBannersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<HeroBannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<HeroBannerWhereInput>;
};


export type ConfigCareerHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type ConfigCareerPositionBox1ImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigCareerPositionBox2ImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigCareerPositionBox3ImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigCareerPositionBox4ImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigCareerPositionBox5ImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigCareerPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigCareerScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type ConfigCareerUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ConfigCareerConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ConfigCareerWhereUniqueInput;
};

/** A connection to a list of items. */
export type ConfigCareerConnection = {
  __typename?: 'ConfigCareerConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ConfigCareerEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ConfigCareerCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  benefitHeading?: InputMaybe<Scalars['String']>;
  benefitIcon1?: InputMaybe<AssetCreateOneInlineInput>;
  benefitIcon2?: InputMaybe<AssetCreateOneInlineInput>;
  benefitIcon3?: InputMaybe<AssetCreateOneInlineInput>;
  benefitIcon4?: InputMaybe<AssetCreateOneInlineInput>;
  benefitIcon5?: InputMaybe<AssetCreateOneInlineInput>;
  benefitIcon6?: InputMaybe<AssetCreateOneInlineInput>;
  benefitText1?: InputMaybe<Scalars['String']>;
  benefitText2?: InputMaybe<Scalars['String']>;
  benefitText3?: InputMaybe<Scalars['String']>;
  benefitText4?: InputMaybe<Scalars['String']>;
  benefitText5?: InputMaybe<Scalars['String']>;
  benefitText6?: InputMaybe<Scalars['String']>;
  careersContentLinkedBlocks1?: InputMaybe<LinkCareerContentLinkedBlockCreateOneInlineInput>;
  careersContentLinkedBlocks2?: InputMaybe<LinkCareerContentLinkedBlockCreateOneInlineInput>;
  careersContentLinkedBlocks3?: InputMaybe<LinkCareerContentLinkedBlockCreateOneInlineInput>;
  careersContentLinkedBlocksIcon2?: InputMaybe<AssetCreateOneInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  heroBanners?: InputMaybe<HeroBannerCreateManyInlineInput>;
  positionBox1Heading?: InputMaybe<Scalars['String']>;
  positionBox1Image?: InputMaybe<AssetCreateOneInlineInput>;
  positionBox1SubText?: InputMaybe<Scalars['String']>;
  positionBox2Heading?: InputMaybe<Scalars['String']>;
  positionBox2Image?: InputMaybe<AssetCreateOneInlineInput>;
  positionBox2SubText?: InputMaybe<Scalars['String']>;
  positionBox3Heading?: InputMaybe<Scalars['String']>;
  positionBox3Image?: InputMaybe<AssetCreateOneInlineInput>;
  positionBox3SubText?: InputMaybe<Scalars['String']>;
  positionBox4Heading?: InputMaybe<Scalars['String']>;
  positionBox4Image?: InputMaybe<AssetCreateOneInlineInput>;
  positionBox4SubText?: InputMaybe<Scalars['String']>;
  positionBox5Image?: InputMaybe<AssetCreateOneInlineInput>;
  positionBox5SubText?: InputMaybe<Scalars['String']>;
  positionBox5heading?: InputMaybe<Scalars['String']>;
  positionHeading?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type ConfigCareerCreateManyInlineInput = {
  /** Connect multiple existing ConfigCareer documents */
  connect?: InputMaybe<Array<ConfigCareerWhereUniqueInput>>;
  /** Create and connect multiple existing ConfigCareer documents */
  create?: InputMaybe<Array<ConfigCareerCreateInput>>;
};

export type ConfigCareerCreateOneInlineInput = {
  /** Connect one existing ConfigCareer document */
  connect?: InputMaybe<ConfigCareerWhereUniqueInput>;
  /** Create and connect one ConfigCareer document */
  create?: InputMaybe<ConfigCareerCreateInput>;
};

/** An edge in a connection. */
export type ConfigCareerEdge = {
  __typename?: 'ConfigCareerEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ConfigCareer;
};

/** Identifies documents */
export type ConfigCareerManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ConfigCareerWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ConfigCareerWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ConfigCareerWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  benefitHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  benefitHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  benefitHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  benefitHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  benefitHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  benefitHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  benefitHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  benefitHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  benefitHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  benefitHeading_starts_with?: InputMaybe<Scalars['String']>;
  benefitIcon1?: InputMaybe<AssetWhereInput>;
  benefitIcon2?: InputMaybe<AssetWhereInput>;
  benefitIcon3?: InputMaybe<AssetWhereInput>;
  benefitIcon4?: InputMaybe<AssetWhereInput>;
  benefitIcon5?: InputMaybe<AssetWhereInput>;
  benefitIcon6?: InputMaybe<AssetWhereInput>;
  benefitText1?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  benefitText1_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  benefitText1_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  benefitText1_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  benefitText1_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  benefitText1_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  benefitText1_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  benefitText1_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  benefitText1_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  benefitText1_starts_with?: InputMaybe<Scalars['String']>;
  benefitText2?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  benefitText2_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  benefitText2_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  benefitText2_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  benefitText2_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  benefitText2_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  benefitText2_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  benefitText2_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  benefitText2_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  benefitText2_starts_with?: InputMaybe<Scalars['String']>;
  benefitText3?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  benefitText3_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  benefitText3_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  benefitText3_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  benefitText3_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  benefitText3_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  benefitText3_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  benefitText3_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  benefitText3_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  benefitText3_starts_with?: InputMaybe<Scalars['String']>;
  benefitText4?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  benefitText4_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  benefitText4_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  benefitText4_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  benefitText4_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  benefitText4_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  benefitText4_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  benefitText4_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  benefitText4_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  benefitText4_starts_with?: InputMaybe<Scalars['String']>;
  benefitText5?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  benefitText5_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  benefitText5_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  benefitText5_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  benefitText5_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  benefitText5_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  benefitText5_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  benefitText5_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  benefitText5_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  benefitText5_starts_with?: InputMaybe<Scalars['String']>;
  benefitText6?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  benefitText6_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  benefitText6_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  benefitText6_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  benefitText6_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  benefitText6_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  benefitText6_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  benefitText6_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  benefitText6_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  benefitText6_starts_with?: InputMaybe<Scalars['String']>;
  careersContentLinkedBlocks1?: InputMaybe<LinkCareerContentLinkedBlockWhereInput>;
  careersContentLinkedBlocks2?: InputMaybe<LinkCareerContentLinkedBlockWhereInput>;
  careersContentLinkedBlocks3?: InputMaybe<LinkCareerContentLinkedBlockWhereInput>;
  careersContentLinkedBlocksIcon2?: InputMaybe<AssetWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ConfigCareerWhereStageInput>;
  documentInStages_none?: InputMaybe<ConfigCareerWhereStageInput>;
  documentInStages_some?: InputMaybe<ConfigCareerWhereStageInput>;
  heroBanners_every?: InputMaybe<HeroBannerWhereInput>;
  heroBanners_none?: InputMaybe<HeroBannerWhereInput>;
  heroBanners_some?: InputMaybe<HeroBannerWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  positionBox1Heading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  positionBox1Heading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  positionBox1Heading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  positionBox1Heading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  positionBox1Heading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  positionBox1Heading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  positionBox1Heading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  positionBox1Heading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  positionBox1Heading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  positionBox1Heading_starts_with?: InputMaybe<Scalars['String']>;
  positionBox1Image?: InputMaybe<AssetWhereInput>;
  positionBox1SubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  positionBox1SubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  positionBox1SubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  positionBox1SubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  positionBox1SubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  positionBox1SubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  positionBox1SubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  positionBox1SubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  positionBox1SubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  positionBox1SubText_starts_with?: InputMaybe<Scalars['String']>;
  positionBox2Heading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  positionBox2Heading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  positionBox2Heading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  positionBox2Heading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  positionBox2Heading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  positionBox2Heading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  positionBox2Heading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  positionBox2Heading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  positionBox2Heading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  positionBox2Heading_starts_with?: InputMaybe<Scalars['String']>;
  positionBox2Image?: InputMaybe<AssetWhereInput>;
  positionBox2SubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  positionBox2SubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  positionBox2SubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  positionBox2SubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  positionBox2SubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  positionBox2SubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  positionBox2SubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  positionBox2SubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  positionBox2SubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  positionBox2SubText_starts_with?: InputMaybe<Scalars['String']>;
  positionBox3Heading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  positionBox3Heading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  positionBox3Heading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  positionBox3Heading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  positionBox3Heading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  positionBox3Heading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  positionBox3Heading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  positionBox3Heading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  positionBox3Heading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  positionBox3Heading_starts_with?: InputMaybe<Scalars['String']>;
  positionBox3Image?: InputMaybe<AssetWhereInput>;
  positionBox3SubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  positionBox3SubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  positionBox3SubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  positionBox3SubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  positionBox3SubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  positionBox3SubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  positionBox3SubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  positionBox3SubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  positionBox3SubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  positionBox3SubText_starts_with?: InputMaybe<Scalars['String']>;
  positionBox4Heading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  positionBox4Heading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  positionBox4Heading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  positionBox4Heading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  positionBox4Heading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  positionBox4Heading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  positionBox4Heading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  positionBox4Heading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  positionBox4Heading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  positionBox4Heading_starts_with?: InputMaybe<Scalars['String']>;
  positionBox4Image?: InputMaybe<AssetWhereInput>;
  positionBox4SubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  positionBox4SubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  positionBox4SubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  positionBox4SubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  positionBox4SubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  positionBox4SubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  positionBox4SubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  positionBox4SubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  positionBox4SubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  positionBox4SubText_starts_with?: InputMaybe<Scalars['String']>;
  positionBox5Image?: InputMaybe<AssetWhereInput>;
  positionBox5SubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  positionBox5SubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  positionBox5SubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  positionBox5SubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  positionBox5SubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  positionBox5SubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  positionBox5SubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  positionBox5SubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  positionBox5SubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  positionBox5SubText_starts_with?: InputMaybe<Scalars['String']>;
  positionBox5heading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  positionBox5heading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  positionBox5heading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  positionBox5heading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  positionBox5heading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  positionBox5heading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  positionBox5heading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  positionBox5heading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  positionBox5heading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  positionBox5heading_starts_with?: InputMaybe<Scalars['String']>;
  positionHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  positionHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  positionHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  positionHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  positionHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  positionHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  positionHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  positionHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  positionHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  positionHeading_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ConfigCareerOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  BenefitHeadingAsc = 'benefitHeading_ASC',
  BenefitHeadingDesc = 'benefitHeading_DESC',
  BenefitText1Asc = 'benefitText1_ASC',
  BenefitText1Desc = 'benefitText1_DESC',
  BenefitText2Asc = 'benefitText2_ASC',
  BenefitText2Desc = 'benefitText2_DESC',
  BenefitText3Asc = 'benefitText3_ASC',
  BenefitText3Desc = 'benefitText3_DESC',
  BenefitText4Asc = 'benefitText4_ASC',
  BenefitText4Desc = 'benefitText4_DESC',
  BenefitText5Asc = 'benefitText5_ASC',
  BenefitText5Desc = 'benefitText5_DESC',
  BenefitText6Asc = 'benefitText6_ASC',
  BenefitText6Desc = 'benefitText6_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PositionBox1HeadingAsc = 'positionBox1Heading_ASC',
  PositionBox1HeadingDesc = 'positionBox1Heading_DESC',
  PositionBox1SubTextAsc = 'positionBox1SubText_ASC',
  PositionBox1SubTextDesc = 'positionBox1SubText_DESC',
  PositionBox2HeadingAsc = 'positionBox2Heading_ASC',
  PositionBox2HeadingDesc = 'positionBox2Heading_DESC',
  PositionBox2SubTextAsc = 'positionBox2SubText_ASC',
  PositionBox2SubTextDesc = 'positionBox2SubText_DESC',
  PositionBox3HeadingAsc = 'positionBox3Heading_ASC',
  PositionBox3HeadingDesc = 'positionBox3Heading_DESC',
  PositionBox3SubTextAsc = 'positionBox3SubText_ASC',
  PositionBox3SubTextDesc = 'positionBox3SubText_DESC',
  PositionBox4HeadingAsc = 'positionBox4Heading_ASC',
  PositionBox4HeadingDesc = 'positionBox4Heading_DESC',
  PositionBox4SubTextAsc = 'positionBox4SubText_ASC',
  PositionBox4SubTextDesc = 'positionBox4SubText_DESC',
  PositionBox5SubTextAsc = 'positionBox5SubText_ASC',
  PositionBox5SubTextDesc = 'positionBox5SubText_DESC',
  PositionBox5headingAsc = 'positionBox5heading_ASC',
  PositionBox5headingDesc = 'positionBox5heading_DESC',
  PositionHeadingAsc = 'positionHeading_ASC',
  PositionHeadingDesc = 'positionHeading_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type ConfigCareerUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  benefitHeading?: InputMaybe<Scalars['String']>;
  benefitIcon1?: InputMaybe<AssetUpdateOneInlineInput>;
  benefitIcon2?: InputMaybe<AssetUpdateOneInlineInput>;
  benefitIcon3?: InputMaybe<AssetUpdateOneInlineInput>;
  benefitIcon4?: InputMaybe<AssetUpdateOneInlineInput>;
  benefitIcon5?: InputMaybe<AssetUpdateOneInlineInput>;
  benefitIcon6?: InputMaybe<AssetUpdateOneInlineInput>;
  benefitText1?: InputMaybe<Scalars['String']>;
  benefitText2?: InputMaybe<Scalars['String']>;
  benefitText3?: InputMaybe<Scalars['String']>;
  benefitText4?: InputMaybe<Scalars['String']>;
  benefitText5?: InputMaybe<Scalars['String']>;
  benefitText6?: InputMaybe<Scalars['String']>;
  careersContentLinkedBlocks1?: InputMaybe<LinkCareerContentLinkedBlockUpdateOneInlineInput>;
  careersContentLinkedBlocks2?: InputMaybe<LinkCareerContentLinkedBlockUpdateOneInlineInput>;
  careersContentLinkedBlocks3?: InputMaybe<LinkCareerContentLinkedBlockUpdateOneInlineInput>;
  careersContentLinkedBlocksIcon2?: InputMaybe<AssetUpdateOneInlineInput>;
  heroBanners?: InputMaybe<HeroBannerUpdateManyInlineInput>;
  positionBox1Heading?: InputMaybe<Scalars['String']>;
  positionBox1Image?: InputMaybe<AssetUpdateOneInlineInput>;
  positionBox1SubText?: InputMaybe<Scalars['String']>;
  positionBox2Heading?: InputMaybe<Scalars['String']>;
  positionBox2Image?: InputMaybe<AssetUpdateOneInlineInput>;
  positionBox2SubText?: InputMaybe<Scalars['String']>;
  positionBox3Heading?: InputMaybe<Scalars['String']>;
  positionBox3Image?: InputMaybe<AssetUpdateOneInlineInput>;
  positionBox3SubText?: InputMaybe<Scalars['String']>;
  positionBox4Heading?: InputMaybe<Scalars['String']>;
  positionBox4Image?: InputMaybe<AssetUpdateOneInlineInput>;
  positionBox4SubText?: InputMaybe<Scalars['String']>;
  positionBox5Image?: InputMaybe<AssetUpdateOneInlineInput>;
  positionBox5SubText?: InputMaybe<Scalars['String']>;
  positionBox5heading?: InputMaybe<Scalars['String']>;
  positionHeading?: InputMaybe<Scalars['String']>;
};

export type ConfigCareerUpdateManyInlineInput = {
  /** Connect multiple existing ConfigCareer documents */
  connect?: InputMaybe<Array<ConfigCareerConnectInput>>;
  /** Create and connect multiple ConfigCareer documents */
  create?: InputMaybe<Array<ConfigCareerCreateInput>>;
  /** Delete multiple ConfigCareer documents */
  delete?: InputMaybe<Array<ConfigCareerWhereUniqueInput>>;
  /** Disconnect multiple ConfigCareer documents */
  disconnect?: InputMaybe<Array<ConfigCareerWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ConfigCareer documents */
  set?: InputMaybe<Array<ConfigCareerWhereUniqueInput>>;
  /** Update multiple ConfigCareer documents */
  update?: InputMaybe<Array<ConfigCareerUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ConfigCareer documents */
  upsert?: InputMaybe<Array<ConfigCareerUpsertWithNestedWhereUniqueInput>>;
};

export type ConfigCareerUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  benefitHeading?: InputMaybe<Scalars['String']>;
  benefitText1?: InputMaybe<Scalars['String']>;
  benefitText2?: InputMaybe<Scalars['String']>;
  benefitText3?: InputMaybe<Scalars['String']>;
  benefitText4?: InputMaybe<Scalars['String']>;
  benefitText5?: InputMaybe<Scalars['String']>;
  benefitText6?: InputMaybe<Scalars['String']>;
  positionBox1Heading?: InputMaybe<Scalars['String']>;
  positionBox1SubText?: InputMaybe<Scalars['String']>;
  positionBox2Heading?: InputMaybe<Scalars['String']>;
  positionBox2SubText?: InputMaybe<Scalars['String']>;
  positionBox3Heading?: InputMaybe<Scalars['String']>;
  positionBox3SubText?: InputMaybe<Scalars['String']>;
  positionBox4Heading?: InputMaybe<Scalars['String']>;
  positionBox4SubText?: InputMaybe<Scalars['String']>;
  positionBox5SubText?: InputMaybe<Scalars['String']>;
  positionBox5heading?: InputMaybe<Scalars['String']>;
  positionHeading?: InputMaybe<Scalars['String']>;
};

export type ConfigCareerUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ConfigCareerUpdateManyInput;
  /** Document search */
  where: ConfigCareerWhereInput;
};

export type ConfigCareerUpdateOneInlineInput = {
  /** Connect existing ConfigCareer document */
  connect?: InputMaybe<ConfigCareerWhereUniqueInput>;
  /** Create and connect one ConfigCareer document */
  create?: InputMaybe<ConfigCareerCreateInput>;
  /** Delete currently connected ConfigCareer document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected ConfigCareer document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single ConfigCareer document */
  update?: InputMaybe<ConfigCareerUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ConfigCareer document */
  upsert?: InputMaybe<ConfigCareerUpsertWithNestedWhereUniqueInput>;
};

export type ConfigCareerUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ConfigCareerUpdateInput;
  /** Unique document search */
  where: ConfigCareerWhereUniqueInput;
};

export type ConfigCareerUpsertInput = {
  /** Create document if it didn't exist */
  create: ConfigCareerCreateInput;
  /** Update document if it exists */
  update: ConfigCareerUpdateInput;
};

export type ConfigCareerUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ConfigCareerUpsertInput;
  /** Unique document search */
  where: ConfigCareerWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type ConfigCareerWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type ConfigCareerWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ConfigCareerWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ConfigCareerWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ConfigCareerWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  benefitHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  benefitHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  benefitHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  benefitHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  benefitHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  benefitHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  benefitHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  benefitHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  benefitHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  benefitHeading_starts_with?: InputMaybe<Scalars['String']>;
  benefitIcon1?: InputMaybe<AssetWhereInput>;
  benefitIcon2?: InputMaybe<AssetWhereInput>;
  benefitIcon3?: InputMaybe<AssetWhereInput>;
  benefitIcon4?: InputMaybe<AssetWhereInput>;
  benefitIcon5?: InputMaybe<AssetWhereInput>;
  benefitIcon6?: InputMaybe<AssetWhereInput>;
  benefitText1?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  benefitText1_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  benefitText1_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  benefitText1_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  benefitText1_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  benefitText1_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  benefitText1_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  benefitText1_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  benefitText1_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  benefitText1_starts_with?: InputMaybe<Scalars['String']>;
  benefitText2?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  benefitText2_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  benefitText2_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  benefitText2_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  benefitText2_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  benefitText2_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  benefitText2_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  benefitText2_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  benefitText2_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  benefitText2_starts_with?: InputMaybe<Scalars['String']>;
  benefitText3?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  benefitText3_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  benefitText3_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  benefitText3_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  benefitText3_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  benefitText3_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  benefitText3_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  benefitText3_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  benefitText3_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  benefitText3_starts_with?: InputMaybe<Scalars['String']>;
  benefitText4?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  benefitText4_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  benefitText4_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  benefitText4_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  benefitText4_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  benefitText4_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  benefitText4_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  benefitText4_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  benefitText4_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  benefitText4_starts_with?: InputMaybe<Scalars['String']>;
  benefitText5?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  benefitText5_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  benefitText5_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  benefitText5_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  benefitText5_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  benefitText5_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  benefitText5_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  benefitText5_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  benefitText5_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  benefitText5_starts_with?: InputMaybe<Scalars['String']>;
  benefitText6?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  benefitText6_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  benefitText6_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  benefitText6_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  benefitText6_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  benefitText6_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  benefitText6_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  benefitText6_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  benefitText6_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  benefitText6_starts_with?: InputMaybe<Scalars['String']>;
  careersContentLinkedBlocks1?: InputMaybe<LinkCareerContentLinkedBlockWhereInput>;
  careersContentLinkedBlocks2?: InputMaybe<LinkCareerContentLinkedBlockWhereInput>;
  careersContentLinkedBlocks3?: InputMaybe<LinkCareerContentLinkedBlockWhereInput>;
  careersContentLinkedBlocksIcon2?: InputMaybe<AssetWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ConfigCareerWhereStageInput>;
  documentInStages_none?: InputMaybe<ConfigCareerWhereStageInput>;
  documentInStages_some?: InputMaybe<ConfigCareerWhereStageInput>;
  heroBanners_every?: InputMaybe<HeroBannerWhereInput>;
  heroBanners_none?: InputMaybe<HeroBannerWhereInput>;
  heroBanners_some?: InputMaybe<HeroBannerWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  positionBox1Heading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  positionBox1Heading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  positionBox1Heading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  positionBox1Heading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  positionBox1Heading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  positionBox1Heading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  positionBox1Heading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  positionBox1Heading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  positionBox1Heading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  positionBox1Heading_starts_with?: InputMaybe<Scalars['String']>;
  positionBox1Image?: InputMaybe<AssetWhereInput>;
  positionBox1SubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  positionBox1SubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  positionBox1SubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  positionBox1SubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  positionBox1SubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  positionBox1SubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  positionBox1SubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  positionBox1SubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  positionBox1SubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  positionBox1SubText_starts_with?: InputMaybe<Scalars['String']>;
  positionBox2Heading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  positionBox2Heading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  positionBox2Heading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  positionBox2Heading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  positionBox2Heading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  positionBox2Heading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  positionBox2Heading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  positionBox2Heading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  positionBox2Heading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  positionBox2Heading_starts_with?: InputMaybe<Scalars['String']>;
  positionBox2Image?: InputMaybe<AssetWhereInput>;
  positionBox2SubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  positionBox2SubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  positionBox2SubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  positionBox2SubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  positionBox2SubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  positionBox2SubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  positionBox2SubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  positionBox2SubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  positionBox2SubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  positionBox2SubText_starts_with?: InputMaybe<Scalars['String']>;
  positionBox3Heading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  positionBox3Heading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  positionBox3Heading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  positionBox3Heading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  positionBox3Heading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  positionBox3Heading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  positionBox3Heading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  positionBox3Heading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  positionBox3Heading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  positionBox3Heading_starts_with?: InputMaybe<Scalars['String']>;
  positionBox3Image?: InputMaybe<AssetWhereInput>;
  positionBox3SubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  positionBox3SubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  positionBox3SubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  positionBox3SubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  positionBox3SubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  positionBox3SubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  positionBox3SubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  positionBox3SubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  positionBox3SubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  positionBox3SubText_starts_with?: InputMaybe<Scalars['String']>;
  positionBox4Heading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  positionBox4Heading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  positionBox4Heading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  positionBox4Heading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  positionBox4Heading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  positionBox4Heading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  positionBox4Heading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  positionBox4Heading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  positionBox4Heading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  positionBox4Heading_starts_with?: InputMaybe<Scalars['String']>;
  positionBox4Image?: InputMaybe<AssetWhereInput>;
  positionBox4SubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  positionBox4SubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  positionBox4SubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  positionBox4SubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  positionBox4SubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  positionBox4SubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  positionBox4SubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  positionBox4SubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  positionBox4SubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  positionBox4SubText_starts_with?: InputMaybe<Scalars['String']>;
  positionBox5Image?: InputMaybe<AssetWhereInput>;
  positionBox5SubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  positionBox5SubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  positionBox5SubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  positionBox5SubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  positionBox5SubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  positionBox5SubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  positionBox5SubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  positionBox5SubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  positionBox5SubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  positionBox5SubText_starts_with?: InputMaybe<Scalars['String']>;
  positionBox5heading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  positionBox5heading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  positionBox5heading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  positionBox5heading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  positionBox5heading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  positionBox5heading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  positionBox5heading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  positionBox5heading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  positionBox5heading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  positionBox5heading_starts_with?: InputMaybe<Scalars['String']>;
  positionHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  positionHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  positionHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  positionHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  positionHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  positionHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  positionHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  positionHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  positionHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  positionHeading_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type ConfigCareerWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ConfigCareerWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ConfigCareerWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ConfigCareerWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<ConfigCareerWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References ConfigCareer record uniquely */
export type ConfigCareerWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type ConfigSalonBooking = Node & {
  __typename?: 'ConfigSalonBooking';
  adminTitle?: Maybe<Scalars['String']>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<ConfigSalonBooking>;
  /** List of ConfigSalonBooking versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  salonCreateAnAccountSubtext?: Maybe<Scalars['String']>;
  /** https://prnt.sc/9YyacUNVqvIO */
  salonWelcomeImage2?: Maybe<Asset>;
  salonWelcomeImageHeading1?: Maybe<Scalars['String']>;
  salonWelcomeImageHeading2?: Maybe<Scalars['String']>;
  /** https://prnt.sc/9YyacUNVqvIO */
  salonWelcomeImageSalon?: Maybe<Asset>;
  salonsubtitle?: Maybe<Scalars['String']>;
  /** Welcome Screen */
  salonwelcometitle?: Maybe<Scalars['String']>;
  saloonbookingstep?: Maybe<SalonBookingStep>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type ConfigSalonBookingCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigSalonBookingDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type ConfigSalonBookingHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type ConfigSalonBookingPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigSalonBookingSalonWelcomeImage2Args = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigSalonBookingSalonWelcomeImageSalonArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigSalonBookingSaloonbookingstepArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigSalonBookingScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type ConfigSalonBookingUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ConfigSalonBookingConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ConfigSalonBookingWhereUniqueInput;
};

/** A connection to a list of items. */
export type ConfigSalonBookingConnection = {
  __typename?: 'ConfigSalonBookingConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ConfigSalonBookingEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ConfigSalonBookingCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  salonCreateAnAccountSubtext?: InputMaybe<Scalars['String']>;
  salonWelcomeImage2?: InputMaybe<AssetCreateOneInlineInput>;
  salonWelcomeImageHeading1?: InputMaybe<Scalars['String']>;
  salonWelcomeImageHeading2?: InputMaybe<Scalars['String']>;
  salonWelcomeImageSalon?: InputMaybe<AssetCreateOneInlineInput>;
  salonsubtitle?: InputMaybe<Scalars['String']>;
  salonwelcometitle?: InputMaybe<Scalars['String']>;
  saloonbookingstep?: InputMaybe<SalonBookingStepCreateOneInlineInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type ConfigSalonBookingCreateManyInlineInput = {
  /** Connect multiple existing ConfigSalonBooking documents */
  connect?: InputMaybe<Array<ConfigSalonBookingWhereUniqueInput>>;
  /** Create and connect multiple existing ConfigSalonBooking documents */
  create?: InputMaybe<Array<ConfigSalonBookingCreateInput>>;
};

export type ConfigSalonBookingCreateOneInlineInput = {
  /** Connect one existing ConfigSalonBooking document */
  connect?: InputMaybe<ConfigSalonBookingWhereUniqueInput>;
  /** Create and connect one ConfigSalonBooking document */
  create?: InputMaybe<ConfigSalonBookingCreateInput>;
};

/** An edge in a connection. */
export type ConfigSalonBookingEdge = {
  __typename?: 'ConfigSalonBookingEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ConfigSalonBooking;
};

/** Identifies documents */
export type ConfigSalonBookingManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ConfigSalonBookingWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ConfigSalonBookingWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ConfigSalonBookingWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ConfigSalonBookingWhereStageInput>;
  documentInStages_none?: InputMaybe<ConfigSalonBookingWhereStageInput>;
  documentInStages_some?: InputMaybe<ConfigSalonBookingWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  salonCreateAnAccountSubtext?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonCreateAnAccountSubtext_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonCreateAnAccountSubtext_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonCreateAnAccountSubtext_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonCreateAnAccountSubtext_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonCreateAnAccountSubtext_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonCreateAnAccountSubtext_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonCreateAnAccountSubtext_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonCreateAnAccountSubtext_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonCreateAnAccountSubtext_starts_with?: InputMaybe<Scalars['String']>;
  salonWelcomeImage2?: InputMaybe<AssetWhereInput>;
  salonWelcomeImageHeading1?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonWelcomeImageHeading1_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonWelcomeImageHeading1_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonWelcomeImageHeading1_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonWelcomeImageHeading1_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonWelcomeImageHeading1_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonWelcomeImageHeading1_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonWelcomeImageHeading1_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonWelcomeImageHeading1_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonWelcomeImageHeading1_starts_with?: InputMaybe<Scalars['String']>;
  salonWelcomeImageHeading2?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonWelcomeImageHeading2_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonWelcomeImageHeading2_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonWelcomeImageHeading2_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonWelcomeImageHeading2_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonWelcomeImageHeading2_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonWelcomeImageHeading2_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonWelcomeImageHeading2_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonWelcomeImageHeading2_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonWelcomeImageHeading2_starts_with?: InputMaybe<Scalars['String']>;
  salonWelcomeImageSalon?: InputMaybe<AssetWhereInput>;
  salonsubtitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonsubtitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonsubtitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonsubtitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonsubtitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonsubtitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonsubtitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonsubtitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonsubtitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonsubtitle_starts_with?: InputMaybe<Scalars['String']>;
  salonwelcometitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonwelcometitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonwelcometitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonwelcometitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonwelcometitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonwelcometitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonwelcometitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonwelcometitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonwelcometitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonwelcometitle_starts_with?: InputMaybe<Scalars['String']>;
  saloonbookingstep?: InputMaybe<SalonBookingStepWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ConfigSalonBookingOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SalonCreateAnAccountSubtextAsc = 'salonCreateAnAccountSubtext_ASC',
  SalonCreateAnAccountSubtextDesc = 'salonCreateAnAccountSubtext_DESC',
  SalonWelcomeImageHeading1Asc = 'salonWelcomeImageHeading1_ASC',
  SalonWelcomeImageHeading1Desc = 'salonWelcomeImageHeading1_DESC',
  SalonWelcomeImageHeading2Asc = 'salonWelcomeImageHeading2_ASC',
  SalonWelcomeImageHeading2Desc = 'salonWelcomeImageHeading2_DESC',
  SalonsubtitleAsc = 'salonsubtitle_ASC',
  SalonsubtitleDesc = 'salonsubtitle_DESC',
  SalonwelcometitleAsc = 'salonwelcometitle_ASC',
  SalonwelcometitleDesc = 'salonwelcometitle_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type ConfigSalonBookingUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  salonCreateAnAccountSubtext?: InputMaybe<Scalars['String']>;
  salonWelcomeImage2?: InputMaybe<AssetUpdateOneInlineInput>;
  salonWelcomeImageHeading1?: InputMaybe<Scalars['String']>;
  salonWelcomeImageHeading2?: InputMaybe<Scalars['String']>;
  salonWelcomeImageSalon?: InputMaybe<AssetUpdateOneInlineInput>;
  salonsubtitle?: InputMaybe<Scalars['String']>;
  salonwelcometitle?: InputMaybe<Scalars['String']>;
  saloonbookingstep?: InputMaybe<SalonBookingStepUpdateOneInlineInput>;
};

export type ConfigSalonBookingUpdateManyInlineInput = {
  /** Connect multiple existing ConfigSalonBooking documents */
  connect?: InputMaybe<Array<ConfigSalonBookingConnectInput>>;
  /** Create and connect multiple ConfigSalonBooking documents */
  create?: InputMaybe<Array<ConfigSalonBookingCreateInput>>;
  /** Delete multiple ConfigSalonBooking documents */
  delete?: InputMaybe<Array<ConfigSalonBookingWhereUniqueInput>>;
  /** Disconnect multiple ConfigSalonBooking documents */
  disconnect?: InputMaybe<Array<ConfigSalonBookingWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ConfigSalonBooking documents */
  set?: InputMaybe<Array<ConfigSalonBookingWhereUniqueInput>>;
  /** Update multiple ConfigSalonBooking documents */
  update?: InputMaybe<Array<ConfigSalonBookingUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ConfigSalonBooking documents */
  upsert?: InputMaybe<Array<ConfigSalonBookingUpsertWithNestedWhereUniqueInput>>;
};

export type ConfigSalonBookingUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  salonCreateAnAccountSubtext?: InputMaybe<Scalars['String']>;
  salonWelcomeImageHeading1?: InputMaybe<Scalars['String']>;
  salonWelcomeImageHeading2?: InputMaybe<Scalars['String']>;
  salonsubtitle?: InputMaybe<Scalars['String']>;
  salonwelcometitle?: InputMaybe<Scalars['String']>;
};

export type ConfigSalonBookingUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ConfigSalonBookingUpdateManyInput;
  /** Document search */
  where: ConfigSalonBookingWhereInput;
};

export type ConfigSalonBookingUpdateOneInlineInput = {
  /** Connect existing ConfigSalonBooking document */
  connect?: InputMaybe<ConfigSalonBookingWhereUniqueInput>;
  /** Create and connect one ConfigSalonBooking document */
  create?: InputMaybe<ConfigSalonBookingCreateInput>;
  /** Delete currently connected ConfigSalonBooking document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected ConfigSalonBooking document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single ConfigSalonBooking document */
  update?: InputMaybe<ConfigSalonBookingUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ConfigSalonBooking document */
  upsert?: InputMaybe<ConfigSalonBookingUpsertWithNestedWhereUniqueInput>;
};

export type ConfigSalonBookingUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ConfigSalonBookingUpdateInput;
  /** Unique document search */
  where: ConfigSalonBookingWhereUniqueInput;
};

export type ConfigSalonBookingUpsertInput = {
  /** Create document if it didn't exist */
  create: ConfigSalonBookingCreateInput;
  /** Update document if it exists */
  update: ConfigSalonBookingUpdateInput;
};

export type ConfigSalonBookingUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ConfigSalonBookingUpsertInput;
  /** Unique document search */
  where: ConfigSalonBookingWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type ConfigSalonBookingWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type ConfigSalonBookingWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ConfigSalonBookingWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ConfigSalonBookingWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ConfigSalonBookingWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ConfigSalonBookingWhereStageInput>;
  documentInStages_none?: InputMaybe<ConfigSalonBookingWhereStageInput>;
  documentInStages_some?: InputMaybe<ConfigSalonBookingWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  salonCreateAnAccountSubtext?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonCreateAnAccountSubtext_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonCreateAnAccountSubtext_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonCreateAnAccountSubtext_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonCreateAnAccountSubtext_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonCreateAnAccountSubtext_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonCreateAnAccountSubtext_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonCreateAnAccountSubtext_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonCreateAnAccountSubtext_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonCreateAnAccountSubtext_starts_with?: InputMaybe<Scalars['String']>;
  salonWelcomeImage2?: InputMaybe<AssetWhereInput>;
  salonWelcomeImageHeading1?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonWelcomeImageHeading1_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonWelcomeImageHeading1_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonWelcomeImageHeading1_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonWelcomeImageHeading1_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonWelcomeImageHeading1_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonWelcomeImageHeading1_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonWelcomeImageHeading1_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonWelcomeImageHeading1_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonWelcomeImageHeading1_starts_with?: InputMaybe<Scalars['String']>;
  salonWelcomeImageHeading2?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonWelcomeImageHeading2_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonWelcomeImageHeading2_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonWelcomeImageHeading2_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonWelcomeImageHeading2_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonWelcomeImageHeading2_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonWelcomeImageHeading2_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonWelcomeImageHeading2_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonWelcomeImageHeading2_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonWelcomeImageHeading2_starts_with?: InputMaybe<Scalars['String']>;
  salonWelcomeImageSalon?: InputMaybe<AssetWhereInput>;
  salonsubtitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonsubtitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonsubtitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonsubtitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonsubtitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonsubtitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonsubtitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonsubtitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonsubtitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonsubtitle_starts_with?: InputMaybe<Scalars['String']>;
  salonwelcometitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonwelcometitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonwelcometitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonwelcometitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonwelcometitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonwelcometitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonwelcometitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonwelcometitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonwelcometitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonwelcometitle_starts_with?: InputMaybe<Scalars['String']>;
  saloonbookingstep?: InputMaybe<SalonBookingStepWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type ConfigSalonBookingWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ConfigSalonBookingWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ConfigSalonBookingWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ConfigSalonBookingWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<ConfigSalonBookingWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References ConfigSalonBooking record uniquely */
export type ConfigSalonBookingWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type ConfigSalonMenu = Node & {
  __typename?: 'ConfigSalonMenu';
  adminTitle?: Maybe<Scalars['String']>;
  colourHeading?: Maybe<Scalars['String']>;
  colourSubText?: Maybe<Scalars['String']>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  cuttingHeading?: Maybe<Scalars['String']>;
  cuttingSubText?: Maybe<Scalars['String']>;
  /** Get the document in other stages */
  documentInStages: Array<ConfigSalonMenu>;
  /** https://prnt.sc/Um-DX7iHyr6_ */
  heroBanners: Array<HeroBanner>;
  /** List of ConfigSalonMenu versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  locationHeading?: Maybe<Scalars['String']>;
  locationSubtext?: Maybe<Scalars['String']>;
  participatingSalonAccordion?: Maybe<AccordionContent>;
  participatingSalonHeading?: Maybe<Scalars['String']>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  salonLocation: Array<ModuleIconAndText>;
  salonPartnersHeading?: Maybe<Scalars['String']>;
  /** https://prnt.sc/HrqF-HTkBfFR */
  salonPartnersImage1?: Maybe<Asset>;
  salonPartnersImage2?: Maybe<Asset>;
  salonPartnersImage3?: Maybe<Asset>;
  salonPartnersSubText?: Maybe<Scalars['String']>;
  scheduledIn: Array<ScheduledOperation>;
  sectionSalonServiceBlocks: Array<SectionSalonServiceBlock>;
  /** System stage field */
  stage: Stage;
  stylingHeading?: Maybe<Scalars['String']>;
  stylingSubText?: Maybe<Scalars['String']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type ConfigSalonMenuCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigSalonMenuDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type ConfigSalonMenuHeroBannersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<HeroBannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<HeroBannerWhereInput>;
};


export type ConfigSalonMenuHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type ConfigSalonMenuParticipatingSalonAccordionArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigSalonMenuPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigSalonMenuSalonLocationArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ModuleIconAndTextOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ModuleIconAndTextWhereInput>;
};


export type ConfigSalonMenuSalonPartnersImage1Args = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigSalonMenuSalonPartnersImage2Args = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigSalonMenuSalonPartnersImage3Args = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigSalonMenuScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type ConfigSalonMenuSectionSalonServiceBlocksArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<SectionSalonServiceBlockOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionSalonServiceBlockWhereInput>;
};


export type ConfigSalonMenuUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ConfigSalonMenuConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ConfigSalonMenuWhereUniqueInput;
};

/** A connection to a list of items. */
export type ConfigSalonMenuConnection = {
  __typename?: 'ConfigSalonMenuConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ConfigSalonMenuEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ConfigSalonMenuCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  colourHeading?: InputMaybe<Scalars['String']>;
  colourSubText?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  cuttingHeading?: InputMaybe<Scalars['String']>;
  cuttingSubText?: InputMaybe<Scalars['String']>;
  heroBanners?: InputMaybe<HeroBannerCreateManyInlineInput>;
  locationHeading?: InputMaybe<Scalars['String']>;
  locationSubtext?: InputMaybe<Scalars['String']>;
  participatingSalonAccordion?: InputMaybe<AccordionContentCreateOneInlineInput>;
  participatingSalonHeading?: InputMaybe<Scalars['String']>;
  salonLocation?: InputMaybe<ModuleIconAndTextCreateManyInlineInput>;
  salonPartnersHeading?: InputMaybe<Scalars['String']>;
  salonPartnersImage1?: InputMaybe<AssetCreateOneInlineInput>;
  salonPartnersImage2?: InputMaybe<AssetCreateOneInlineInput>;
  salonPartnersImage3?: InputMaybe<AssetCreateOneInlineInput>;
  salonPartnersSubText?: InputMaybe<Scalars['String']>;
  sectionSalonServiceBlocks?: InputMaybe<SectionSalonServiceBlockCreateManyInlineInput>;
  stylingHeading?: InputMaybe<Scalars['String']>;
  stylingSubText?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type ConfigSalonMenuCreateManyInlineInput = {
  /** Connect multiple existing ConfigSalonMenu documents */
  connect?: InputMaybe<Array<ConfigSalonMenuWhereUniqueInput>>;
  /** Create and connect multiple existing ConfigSalonMenu documents */
  create?: InputMaybe<Array<ConfigSalonMenuCreateInput>>;
};

export type ConfigSalonMenuCreateOneInlineInput = {
  /** Connect one existing ConfigSalonMenu document */
  connect?: InputMaybe<ConfigSalonMenuWhereUniqueInput>;
  /** Create and connect one ConfigSalonMenu document */
  create?: InputMaybe<ConfigSalonMenuCreateInput>;
};

/** An edge in a connection. */
export type ConfigSalonMenuEdge = {
  __typename?: 'ConfigSalonMenuEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ConfigSalonMenu;
};

/** Identifies documents */
export type ConfigSalonMenuManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ConfigSalonMenuWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ConfigSalonMenuWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ConfigSalonMenuWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  colourHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  colourHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  colourHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  colourHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  colourHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  colourHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  colourHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  colourHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  colourHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  colourHeading_starts_with?: InputMaybe<Scalars['String']>;
  colourSubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  colourSubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  colourSubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  colourSubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  colourSubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  colourSubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  colourSubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  colourSubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  colourSubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  colourSubText_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  cuttingHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  cuttingHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  cuttingHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  cuttingHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  cuttingHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  cuttingHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  cuttingHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  cuttingHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  cuttingHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  cuttingHeading_starts_with?: InputMaybe<Scalars['String']>;
  cuttingSubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  cuttingSubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  cuttingSubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  cuttingSubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  cuttingSubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  cuttingSubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  cuttingSubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  cuttingSubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  cuttingSubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  cuttingSubText_starts_with?: InputMaybe<Scalars['String']>;
  documentInStages_every?: InputMaybe<ConfigSalonMenuWhereStageInput>;
  documentInStages_none?: InputMaybe<ConfigSalonMenuWhereStageInput>;
  documentInStages_some?: InputMaybe<ConfigSalonMenuWhereStageInput>;
  heroBanners_every?: InputMaybe<HeroBannerWhereInput>;
  heroBanners_none?: InputMaybe<HeroBannerWhereInput>;
  heroBanners_some?: InputMaybe<HeroBannerWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  locationHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  locationHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  locationHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  locationHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  locationHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  locationHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  locationHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  locationHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  locationHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  locationHeading_starts_with?: InputMaybe<Scalars['String']>;
  locationSubtext?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  locationSubtext_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  locationSubtext_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  locationSubtext_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  locationSubtext_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  locationSubtext_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  locationSubtext_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  locationSubtext_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  locationSubtext_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  locationSubtext_starts_with?: InputMaybe<Scalars['String']>;
  participatingSalonAccordion?: InputMaybe<AccordionContentWhereInput>;
  participatingSalonHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  participatingSalonHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  participatingSalonHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  participatingSalonHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  participatingSalonHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  participatingSalonHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  participatingSalonHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  participatingSalonHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  participatingSalonHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  participatingSalonHeading_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  salonLocation_every?: InputMaybe<ModuleIconAndTextWhereInput>;
  salonLocation_none?: InputMaybe<ModuleIconAndTextWhereInput>;
  salonLocation_some?: InputMaybe<ModuleIconAndTextWhereInput>;
  salonPartnersHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonPartnersHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonPartnersHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonPartnersHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonPartnersHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonPartnersHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonPartnersHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonPartnersHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonPartnersHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonPartnersHeading_starts_with?: InputMaybe<Scalars['String']>;
  salonPartnersImage1?: InputMaybe<AssetWhereInput>;
  salonPartnersImage2?: InputMaybe<AssetWhereInput>;
  salonPartnersImage3?: InputMaybe<AssetWhereInput>;
  salonPartnersSubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonPartnersSubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonPartnersSubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonPartnersSubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonPartnersSubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonPartnersSubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonPartnersSubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonPartnersSubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonPartnersSubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonPartnersSubText_starts_with?: InputMaybe<Scalars['String']>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  sectionSalonServiceBlocks_every?: InputMaybe<SectionSalonServiceBlockWhereInput>;
  sectionSalonServiceBlocks_none?: InputMaybe<SectionSalonServiceBlockWhereInput>;
  sectionSalonServiceBlocks_some?: InputMaybe<SectionSalonServiceBlockWhereInput>;
  stylingHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  stylingHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  stylingHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  stylingHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  stylingHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  stylingHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  stylingHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  stylingHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  stylingHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  stylingHeading_starts_with?: InputMaybe<Scalars['String']>;
  stylingSubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  stylingSubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  stylingSubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  stylingSubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  stylingSubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  stylingSubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  stylingSubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  stylingSubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  stylingSubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  stylingSubText_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ConfigSalonMenuOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  ColourHeadingAsc = 'colourHeading_ASC',
  ColourHeadingDesc = 'colourHeading_DESC',
  ColourSubTextAsc = 'colourSubText_ASC',
  ColourSubTextDesc = 'colourSubText_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CuttingHeadingAsc = 'cuttingHeading_ASC',
  CuttingHeadingDesc = 'cuttingHeading_DESC',
  CuttingSubTextAsc = 'cuttingSubText_ASC',
  CuttingSubTextDesc = 'cuttingSubText_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LocationHeadingAsc = 'locationHeading_ASC',
  LocationHeadingDesc = 'locationHeading_DESC',
  LocationSubtextAsc = 'locationSubtext_ASC',
  LocationSubtextDesc = 'locationSubtext_DESC',
  ParticipatingSalonHeadingAsc = 'participatingSalonHeading_ASC',
  ParticipatingSalonHeadingDesc = 'participatingSalonHeading_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SalonPartnersHeadingAsc = 'salonPartnersHeading_ASC',
  SalonPartnersHeadingDesc = 'salonPartnersHeading_DESC',
  SalonPartnersSubTextAsc = 'salonPartnersSubText_ASC',
  SalonPartnersSubTextDesc = 'salonPartnersSubText_DESC',
  StylingHeadingAsc = 'stylingHeading_ASC',
  StylingHeadingDesc = 'stylingHeading_DESC',
  StylingSubTextAsc = 'stylingSubText_ASC',
  StylingSubTextDesc = 'stylingSubText_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type ConfigSalonMenuUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  colourHeading?: InputMaybe<Scalars['String']>;
  colourSubText?: InputMaybe<Scalars['String']>;
  cuttingHeading?: InputMaybe<Scalars['String']>;
  cuttingSubText?: InputMaybe<Scalars['String']>;
  heroBanners?: InputMaybe<HeroBannerUpdateManyInlineInput>;
  locationHeading?: InputMaybe<Scalars['String']>;
  locationSubtext?: InputMaybe<Scalars['String']>;
  participatingSalonAccordion?: InputMaybe<AccordionContentUpdateOneInlineInput>;
  participatingSalonHeading?: InputMaybe<Scalars['String']>;
  salonLocation?: InputMaybe<ModuleIconAndTextUpdateManyInlineInput>;
  salonPartnersHeading?: InputMaybe<Scalars['String']>;
  salonPartnersImage1?: InputMaybe<AssetUpdateOneInlineInput>;
  salonPartnersImage2?: InputMaybe<AssetUpdateOneInlineInput>;
  salonPartnersImage3?: InputMaybe<AssetUpdateOneInlineInput>;
  salonPartnersSubText?: InputMaybe<Scalars['String']>;
  sectionSalonServiceBlocks?: InputMaybe<SectionSalonServiceBlockUpdateManyInlineInput>;
  stylingHeading?: InputMaybe<Scalars['String']>;
  stylingSubText?: InputMaybe<Scalars['String']>;
};

export type ConfigSalonMenuUpdateManyInlineInput = {
  /** Connect multiple existing ConfigSalonMenu documents */
  connect?: InputMaybe<Array<ConfigSalonMenuConnectInput>>;
  /** Create and connect multiple ConfigSalonMenu documents */
  create?: InputMaybe<Array<ConfigSalonMenuCreateInput>>;
  /** Delete multiple ConfigSalonMenu documents */
  delete?: InputMaybe<Array<ConfigSalonMenuWhereUniqueInput>>;
  /** Disconnect multiple ConfigSalonMenu documents */
  disconnect?: InputMaybe<Array<ConfigSalonMenuWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ConfigSalonMenu documents */
  set?: InputMaybe<Array<ConfigSalonMenuWhereUniqueInput>>;
  /** Update multiple ConfigSalonMenu documents */
  update?: InputMaybe<Array<ConfigSalonMenuUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ConfigSalonMenu documents */
  upsert?: InputMaybe<Array<ConfigSalonMenuUpsertWithNestedWhereUniqueInput>>;
};

export type ConfigSalonMenuUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  colourHeading?: InputMaybe<Scalars['String']>;
  colourSubText?: InputMaybe<Scalars['String']>;
  cuttingHeading?: InputMaybe<Scalars['String']>;
  cuttingSubText?: InputMaybe<Scalars['String']>;
  locationHeading?: InputMaybe<Scalars['String']>;
  locationSubtext?: InputMaybe<Scalars['String']>;
  participatingSalonHeading?: InputMaybe<Scalars['String']>;
  salonPartnersHeading?: InputMaybe<Scalars['String']>;
  salonPartnersSubText?: InputMaybe<Scalars['String']>;
  stylingHeading?: InputMaybe<Scalars['String']>;
  stylingSubText?: InputMaybe<Scalars['String']>;
};

export type ConfigSalonMenuUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ConfigSalonMenuUpdateManyInput;
  /** Document search */
  where: ConfigSalonMenuWhereInput;
};

export type ConfigSalonMenuUpdateOneInlineInput = {
  /** Connect existing ConfigSalonMenu document */
  connect?: InputMaybe<ConfigSalonMenuWhereUniqueInput>;
  /** Create and connect one ConfigSalonMenu document */
  create?: InputMaybe<ConfigSalonMenuCreateInput>;
  /** Delete currently connected ConfigSalonMenu document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected ConfigSalonMenu document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single ConfigSalonMenu document */
  update?: InputMaybe<ConfigSalonMenuUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ConfigSalonMenu document */
  upsert?: InputMaybe<ConfigSalonMenuUpsertWithNestedWhereUniqueInput>;
};

export type ConfigSalonMenuUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ConfigSalonMenuUpdateInput;
  /** Unique document search */
  where: ConfigSalonMenuWhereUniqueInput;
};

export type ConfigSalonMenuUpsertInput = {
  /** Create document if it didn't exist */
  create: ConfigSalonMenuCreateInput;
  /** Update document if it exists */
  update: ConfigSalonMenuUpdateInput;
};

export type ConfigSalonMenuUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ConfigSalonMenuUpsertInput;
  /** Unique document search */
  where: ConfigSalonMenuWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type ConfigSalonMenuWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type ConfigSalonMenuWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ConfigSalonMenuWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ConfigSalonMenuWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ConfigSalonMenuWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  colourHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  colourHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  colourHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  colourHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  colourHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  colourHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  colourHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  colourHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  colourHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  colourHeading_starts_with?: InputMaybe<Scalars['String']>;
  colourSubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  colourSubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  colourSubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  colourSubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  colourSubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  colourSubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  colourSubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  colourSubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  colourSubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  colourSubText_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  cuttingHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  cuttingHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  cuttingHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  cuttingHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  cuttingHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  cuttingHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  cuttingHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  cuttingHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  cuttingHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  cuttingHeading_starts_with?: InputMaybe<Scalars['String']>;
  cuttingSubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  cuttingSubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  cuttingSubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  cuttingSubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  cuttingSubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  cuttingSubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  cuttingSubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  cuttingSubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  cuttingSubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  cuttingSubText_starts_with?: InputMaybe<Scalars['String']>;
  documentInStages_every?: InputMaybe<ConfigSalonMenuWhereStageInput>;
  documentInStages_none?: InputMaybe<ConfigSalonMenuWhereStageInput>;
  documentInStages_some?: InputMaybe<ConfigSalonMenuWhereStageInput>;
  heroBanners_every?: InputMaybe<HeroBannerWhereInput>;
  heroBanners_none?: InputMaybe<HeroBannerWhereInput>;
  heroBanners_some?: InputMaybe<HeroBannerWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  locationHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  locationHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  locationHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  locationHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  locationHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  locationHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  locationHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  locationHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  locationHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  locationHeading_starts_with?: InputMaybe<Scalars['String']>;
  locationSubtext?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  locationSubtext_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  locationSubtext_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  locationSubtext_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  locationSubtext_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  locationSubtext_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  locationSubtext_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  locationSubtext_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  locationSubtext_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  locationSubtext_starts_with?: InputMaybe<Scalars['String']>;
  participatingSalonAccordion?: InputMaybe<AccordionContentWhereInput>;
  participatingSalonHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  participatingSalonHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  participatingSalonHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  participatingSalonHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  participatingSalonHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  participatingSalonHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  participatingSalonHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  participatingSalonHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  participatingSalonHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  participatingSalonHeading_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  salonLocation_every?: InputMaybe<ModuleIconAndTextWhereInput>;
  salonLocation_none?: InputMaybe<ModuleIconAndTextWhereInput>;
  salonLocation_some?: InputMaybe<ModuleIconAndTextWhereInput>;
  salonPartnersHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonPartnersHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonPartnersHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonPartnersHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonPartnersHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonPartnersHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonPartnersHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonPartnersHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonPartnersHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonPartnersHeading_starts_with?: InputMaybe<Scalars['String']>;
  salonPartnersImage1?: InputMaybe<AssetWhereInput>;
  salonPartnersImage2?: InputMaybe<AssetWhereInput>;
  salonPartnersImage3?: InputMaybe<AssetWhereInput>;
  salonPartnersSubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonPartnersSubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonPartnersSubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonPartnersSubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonPartnersSubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonPartnersSubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonPartnersSubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonPartnersSubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonPartnersSubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonPartnersSubText_starts_with?: InputMaybe<Scalars['String']>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  sectionSalonServiceBlocks_every?: InputMaybe<SectionSalonServiceBlockWhereInput>;
  sectionSalonServiceBlocks_none?: InputMaybe<SectionSalonServiceBlockWhereInput>;
  sectionSalonServiceBlocks_some?: InputMaybe<SectionSalonServiceBlockWhereInput>;
  stylingHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  stylingHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  stylingHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  stylingHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  stylingHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  stylingHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  stylingHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  stylingHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  stylingHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  stylingHeading_starts_with?: InputMaybe<Scalars['String']>;
  stylingSubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  stylingSubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  stylingSubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  stylingSubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  stylingSubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  stylingSubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  stylingSubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  stylingSubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  stylingSubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  stylingSubText_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type ConfigSalonMenuWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ConfigSalonMenuWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ConfigSalonMenuWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ConfigSalonMenuWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<ConfigSalonMenuWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References ConfigSalonMenu record uniquely */
export type ConfigSalonMenuWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type ConfigSearch = Node & {
  __typename?: 'ConfigSearch';
  adminTitle?: Maybe<Scalars['String']>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<ConfigSearch>;
  /** List of ConfigSearch versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  noResultsComponents?: Maybe<ConfigSearchNoResultsComponents>;
  noResultsText?: Maybe<RichText>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type ConfigSearchCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigSearchDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type ConfigSearchHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type ConfigSearchNoResultsComponentsArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigSearchPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ConfigSearchScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type ConfigSearchUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ConfigSearchConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ConfigSearchWhereUniqueInput;
};

/** A connection to a list of items. */
export type ConfigSearchConnection = {
  __typename?: 'ConfigSearchConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ConfigSearchEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ConfigSearchCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  noResultsComponents?: InputMaybe<ConfigSearchNoResultsComponentsCreateOneInlineInput>;
  noResultsText?: InputMaybe<Scalars['RichTextAST']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type ConfigSearchCreateManyInlineInput = {
  /** Connect multiple existing ConfigSearch documents */
  connect?: InputMaybe<Array<ConfigSearchWhereUniqueInput>>;
  /** Create and connect multiple existing ConfigSearch documents */
  create?: InputMaybe<Array<ConfigSearchCreateInput>>;
};

export type ConfigSearchCreateOneInlineInput = {
  /** Connect one existing ConfigSearch document */
  connect?: InputMaybe<ConfigSearchWhereUniqueInput>;
  /** Create and connect one ConfigSearch document */
  create?: InputMaybe<ConfigSearchCreateInput>;
};

/** An edge in a connection. */
export type ConfigSearchEdge = {
  __typename?: 'ConfigSearchEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ConfigSearch;
};

/** Identifies documents */
export type ConfigSearchManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ConfigSearchWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ConfigSearchWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ConfigSearchWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ConfigSearchWhereStageInput>;
  documentInStages_none?: InputMaybe<ConfigSearchWhereStageInput>;
  documentInStages_some?: InputMaybe<ConfigSearchWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values in which the union is connected to the given models */
  noResultsComponents?: InputMaybe<ConfigSearchNoResultsComponentsWhereInput>;
  /** All values in which the union is empty */
  noResultsComponents_empty?: InputMaybe<Scalars['Boolean']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export type ConfigSearchNoResultsComponents = BrandLogoGrid | EditorialText | HeroBanner | MultiCollectionSlider | ProductHowTo | SectionBlogListing | SectionCollectionCarousel | SectionCollectionDropDown | SectionCtaButton | SectionFullWidthImage | SectionRelatedProduct | SectionSearchTermList | SectionTextBlock | SectionsAccordion;

export type ConfigSearchNoResultsComponentsConnectInput = {
  BrandLogoGrid?: InputMaybe<BrandLogoGridConnectInput>;
  EditorialText?: InputMaybe<EditorialTextConnectInput>;
  HeroBanner?: InputMaybe<HeroBannerConnectInput>;
  MultiCollectionSlider?: InputMaybe<MultiCollectionSliderConnectInput>;
  ProductHowTo?: InputMaybe<ProductHowToConnectInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingConnectInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselConnectInput>;
  SectionCollectionDropDown?: InputMaybe<SectionCollectionDropDownConnectInput>;
  SectionCtaButton?: InputMaybe<SectionCtaButtonConnectInput>;
  SectionFullWidthImage?: InputMaybe<SectionFullWidthImageConnectInput>;
  SectionRelatedProduct?: InputMaybe<SectionRelatedProductConnectInput>;
  SectionSearchTermList?: InputMaybe<SectionSearchTermListConnectInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockConnectInput>;
  SectionsAccordion?: InputMaybe<SectionsAccordionConnectInput>;
};

export type ConfigSearchNoResultsComponentsCreateInput = {
  BrandLogoGrid?: InputMaybe<BrandLogoGridCreateInput>;
  EditorialText?: InputMaybe<EditorialTextCreateInput>;
  HeroBanner?: InputMaybe<HeroBannerCreateInput>;
  MultiCollectionSlider?: InputMaybe<MultiCollectionSliderCreateInput>;
  ProductHowTo?: InputMaybe<ProductHowToCreateInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingCreateInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselCreateInput>;
  SectionCollectionDropDown?: InputMaybe<SectionCollectionDropDownCreateInput>;
  SectionCtaButton?: InputMaybe<SectionCtaButtonCreateInput>;
  SectionFullWidthImage?: InputMaybe<SectionFullWidthImageCreateInput>;
  SectionRelatedProduct?: InputMaybe<SectionRelatedProductCreateInput>;
  SectionSearchTermList?: InputMaybe<SectionSearchTermListCreateInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockCreateInput>;
  SectionsAccordion?: InputMaybe<SectionsAccordionCreateInput>;
};

export type ConfigSearchNoResultsComponentsCreateManyInlineInput = {
  /** Connect multiple existing ConfigSearchNoResultsComponents documents */
  connect?: InputMaybe<Array<ConfigSearchNoResultsComponentsWhereUniqueInput>>;
  /** Create and connect multiple existing ConfigSearchNoResultsComponents documents */
  create?: InputMaybe<Array<ConfigSearchNoResultsComponentsCreateInput>>;
};

export type ConfigSearchNoResultsComponentsCreateOneInlineInput = {
  /** Connect one existing ConfigSearchNoResultsComponents document */
  connect?: InputMaybe<ConfigSearchNoResultsComponentsWhereUniqueInput>;
  /** Create and connect one ConfigSearchNoResultsComponents document */
  create?: InputMaybe<ConfigSearchNoResultsComponentsCreateInput>;
};

export type ConfigSearchNoResultsComponentsUpdateInput = {
  BrandLogoGrid?: InputMaybe<BrandLogoGridUpdateInput>;
  EditorialText?: InputMaybe<EditorialTextUpdateInput>;
  HeroBanner?: InputMaybe<HeroBannerUpdateInput>;
  MultiCollectionSlider?: InputMaybe<MultiCollectionSliderUpdateInput>;
  ProductHowTo?: InputMaybe<ProductHowToUpdateInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingUpdateInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselUpdateInput>;
  SectionCollectionDropDown?: InputMaybe<SectionCollectionDropDownUpdateInput>;
  SectionCtaButton?: InputMaybe<SectionCtaButtonUpdateInput>;
  SectionFullWidthImage?: InputMaybe<SectionFullWidthImageUpdateInput>;
  SectionRelatedProduct?: InputMaybe<SectionRelatedProductUpdateInput>;
  SectionSearchTermList?: InputMaybe<SectionSearchTermListUpdateInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockUpdateInput>;
  SectionsAccordion?: InputMaybe<SectionsAccordionUpdateInput>;
};

export type ConfigSearchNoResultsComponentsUpdateManyInlineInput = {
  /** Connect multiple existing ConfigSearchNoResultsComponents documents */
  connect?: InputMaybe<Array<ConfigSearchNoResultsComponentsConnectInput>>;
  /** Create and connect multiple ConfigSearchNoResultsComponents documents */
  create?: InputMaybe<Array<ConfigSearchNoResultsComponentsCreateInput>>;
  /** Delete multiple ConfigSearchNoResultsComponents documents */
  delete?: InputMaybe<Array<ConfigSearchNoResultsComponentsWhereUniqueInput>>;
  /** Disconnect multiple ConfigSearchNoResultsComponents documents */
  disconnect?: InputMaybe<Array<ConfigSearchNoResultsComponentsWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ConfigSearchNoResultsComponents documents */
  set?: InputMaybe<Array<ConfigSearchNoResultsComponentsWhereUniqueInput>>;
  /** Update multiple ConfigSearchNoResultsComponents documents */
  update?: InputMaybe<Array<ConfigSearchNoResultsComponentsUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ConfigSearchNoResultsComponents documents */
  upsert?: InputMaybe<Array<ConfigSearchNoResultsComponentsUpsertWithNestedWhereUniqueInput>>;
};

export type ConfigSearchNoResultsComponentsUpdateManyWithNestedWhereInput = {
  BrandLogoGrid?: InputMaybe<BrandLogoGridUpdateManyWithNestedWhereInput>;
  EditorialText?: InputMaybe<EditorialTextUpdateManyWithNestedWhereInput>;
  HeroBanner?: InputMaybe<HeroBannerUpdateManyWithNestedWhereInput>;
  MultiCollectionSlider?: InputMaybe<MultiCollectionSliderUpdateManyWithNestedWhereInput>;
  ProductHowTo?: InputMaybe<ProductHowToUpdateManyWithNestedWhereInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingUpdateManyWithNestedWhereInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselUpdateManyWithNestedWhereInput>;
  SectionCollectionDropDown?: InputMaybe<SectionCollectionDropDownUpdateManyWithNestedWhereInput>;
  SectionCtaButton?: InputMaybe<SectionCtaButtonUpdateManyWithNestedWhereInput>;
  SectionFullWidthImage?: InputMaybe<SectionFullWidthImageUpdateManyWithNestedWhereInput>;
  SectionRelatedProduct?: InputMaybe<SectionRelatedProductUpdateManyWithNestedWhereInput>;
  SectionSearchTermList?: InputMaybe<SectionSearchTermListUpdateManyWithNestedWhereInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockUpdateManyWithNestedWhereInput>;
  SectionsAccordion?: InputMaybe<SectionsAccordionUpdateManyWithNestedWhereInput>;
};

export type ConfigSearchNoResultsComponentsUpdateOneInlineInput = {
  /** Connect existing ConfigSearchNoResultsComponents document */
  connect?: InputMaybe<ConfigSearchNoResultsComponentsWhereUniqueInput>;
  /** Create and connect one ConfigSearchNoResultsComponents document */
  create?: InputMaybe<ConfigSearchNoResultsComponentsCreateInput>;
  /** Delete currently connected ConfigSearchNoResultsComponents document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected ConfigSearchNoResultsComponents document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single ConfigSearchNoResultsComponents document */
  update?: InputMaybe<ConfigSearchNoResultsComponentsUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ConfigSearchNoResultsComponents document */
  upsert?: InputMaybe<ConfigSearchNoResultsComponentsUpsertWithNestedWhereUniqueInput>;
};

export type ConfigSearchNoResultsComponentsUpdateWithNestedWhereUniqueInput = {
  BrandLogoGrid?: InputMaybe<BrandLogoGridUpdateWithNestedWhereUniqueInput>;
  EditorialText?: InputMaybe<EditorialTextUpdateWithNestedWhereUniqueInput>;
  HeroBanner?: InputMaybe<HeroBannerUpdateWithNestedWhereUniqueInput>;
  MultiCollectionSlider?: InputMaybe<MultiCollectionSliderUpdateWithNestedWhereUniqueInput>;
  ProductHowTo?: InputMaybe<ProductHowToUpdateWithNestedWhereUniqueInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingUpdateWithNestedWhereUniqueInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselUpdateWithNestedWhereUniqueInput>;
  SectionCollectionDropDown?: InputMaybe<SectionCollectionDropDownUpdateWithNestedWhereUniqueInput>;
  SectionCtaButton?: InputMaybe<SectionCtaButtonUpdateWithNestedWhereUniqueInput>;
  SectionFullWidthImage?: InputMaybe<SectionFullWidthImageUpdateWithNestedWhereUniqueInput>;
  SectionRelatedProduct?: InputMaybe<SectionRelatedProductUpdateWithNestedWhereUniqueInput>;
  SectionSearchTermList?: InputMaybe<SectionSearchTermListUpdateWithNestedWhereUniqueInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockUpdateWithNestedWhereUniqueInput>;
  SectionsAccordion?: InputMaybe<SectionsAccordionUpdateWithNestedWhereUniqueInput>;
};

export type ConfigSearchNoResultsComponentsUpsertWithNestedWhereUniqueInput = {
  BrandLogoGrid?: InputMaybe<BrandLogoGridUpsertWithNestedWhereUniqueInput>;
  EditorialText?: InputMaybe<EditorialTextUpsertWithNestedWhereUniqueInput>;
  HeroBanner?: InputMaybe<HeroBannerUpsertWithNestedWhereUniqueInput>;
  MultiCollectionSlider?: InputMaybe<MultiCollectionSliderUpsertWithNestedWhereUniqueInput>;
  ProductHowTo?: InputMaybe<ProductHowToUpsertWithNestedWhereUniqueInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingUpsertWithNestedWhereUniqueInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselUpsertWithNestedWhereUniqueInput>;
  SectionCollectionDropDown?: InputMaybe<SectionCollectionDropDownUpsertWithNestedWhereUniqueInput>;
  SectionCtaButton?: InputMaybe<SectionCtaButtonUpsertWithNestedWhereUniqueInput>;
  SectionFullWidthImage?: InputMaybe<SectionFullWidthImageUpsertWithNestedWhereUniqueInput>;
  SectionRelatedProduct?: InputMaybe<SectionRelatedProductUpsertWithNestedWhereUniqueInput>;
  SectionSearchTermList?: InputMaybe<SectionSearchTermListUpsertWithNestedWhereUniqueInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockUpsertWithNestedWhereUniqueInput>;
  SectionsAccordion?: InputMaybe<SectionsAccordionUpsertWithNestedWhereUniqueInput>;
};

export type ConfigSearchNoResultsComponentsWhereInput = {
  BrandLogoGrid?: InputMaybe<BrandLogoGridWhereInput>;
  EditorialText?: InputMaybe<EditorialTextWhereInput>;
  HeroBanner?: InputMaybe<HeroBannerWhereInput>;
  MultiCollectionSlider?: InputMaybe<MultiCollectionSliderWhereInput>;
  ProductHowTo?: InputMaybe<ProductHowToWhereInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingWhereInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselWhereInput>;
  SectionCollectionDropDown?: InputMaybe<SectionCollectionDropDownWhereInput>;
  SectionCtaButton?: InputMaybe<SectionCtaButtonWhereInput>;
  SectionFullWidthImage?: InputMaybe<SectionFullWidthImageWhereInput>;
  SectionRelatedProduct?: InputMaybe<SectionRelatedProductWhereInput>;
  SectionSearchTermList?: InputMaybe<SectionSearchTermListWhereInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockWhereInput>;
  SectionsAccordion?: InputMaybe<SectionsAccordionWhereInput>;
};

export type ConfigSearchNoResultsComponentsWhereUniqueInput = {
  BrandLogoGrid?: InputMaybe<BrandLogoGridWhereUniqueInput>;
  EditorialText?: InputMaybe<EditorialTextWhereUniqueInput>;
  HeroBanner?: InputMaybe<HeroBannerWhereUniqueInput>;
  MultiCollectionSlider?: InputMaybe<MultiCollectionSliderWhereUniqueInput>;
  ProductHowTo?: InputMaybe<ProductHowToWhereUniqueInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingWhereUniqueInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselWhereUniqueInput>;
  SectionCollectionDropDown?: InputMaybe<SectionCollectionDropDownWhereUniqueInput>;
  SectionCtaButton?: InputMaybe<SectionCtaButtonWhereUniqueInput>;
  SectionFullWidthImage?: InputMaybe<SectionFullWidthImageWhereUniqueInput>;
  SectionRelatedProduct?: InputMaybe<SectionRelatedProductWhereUniqueInput>;
  SectionSearchTermList?: InputMaybe<SectionSearchTermListWhereUniqueInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockWhereUniqueInput>;
  SectionsAccordion?: InputMaybe<SectionsAccordionWhereUniqueInput>;
};

export enum ConfigSearchOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type ConfigSearchUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  noResultsComponents?: InputMaybe<ConfigSearchNoResultsComponentsUpdateOneInlineInput>;
  noResultsText?: InputMaybe<Scalars['RichTextAST']>;
};

export type ConfigSearchUpdateManyInlineInput = {
  /** Connect multiple existing ConfigSearch documents */
  connect?: InputMaybe<Array<ConfigSearchConnectInput>>;
  /** Create and connect multiple ConfigSearch documents */
  create?: InputMaybe<Array<ConfigSearchCreateInput>>;
  /** Delete multiple ConfigSearch documents */
  delete?: InputMaybe<Array<ConfigSearchWhereUniqueInput>>;
  /** Disconnect multiple ConfigSearch documents */
  disconnect?: InputMaybe<Array<ConfigSearchWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ConfigSearch documents */
  set?: InputMaybe<Array<ConfigSearchWhereUniqueInput>>;
  /** Update multiple ConfigSearch documents */
  update?: InputMaybe<Array<ConfigSearchUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ConfigSearch documents */
  upsert?: InputMaybe<Array<ConfigSearchUpsertWithNestedWhereUniqueInput>>;
};

export type ConfigSearchUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  noResultsText?: InputMaybe<Scalars['RichTextAST']>;
};

export type ConfigSearchUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ConfigSearchUpdateManyInput;
  /** Document search */
  where: ConfigSearchWhereInput;
};

export type ConfigSearchUpdateOneInlineInput = {
  /** Connect existing ConfigSearch document */
  connect?: InputMaybe<ConfigSearchWhereUniqueInput>;
  /** Create and connect one ConfigSearch document */
  create?: InputMaybe<ConfigSearchCreateInput>;
  /** Delete currently connected ConfigSearch document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected ConfigSearch document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single ConfigSearch document */
  update?: InputMaybe<ConfigSearchUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ConfigSearch document */
  upsert?: InputMaybe<ConfigSearchUpsertWithNestedWhereUniqueInput>;
};

export type ConfigSearchUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ConfigSearchUpdateInput;
  /** Unique document search */
  where: ConfigSearchWhereUniqueInput;
};

export type ConfigSearchUpsertInput = {
  /** Create document if it didn't exist */
  create: ConfigSearchCreateInput;
  /** Update document if it exists */
  update: ConfigSearchUpdateInput;
};

export type ConfigSearchUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ConfigSearchUpsertInput;
  /** Unique document search */
  where: ConfigSearchWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type ConfigSearchWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type ConfigSearchWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ConfigSearchWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ConfigSearchWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ConfigSearchWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ConfigSearchWhereStageInput>;
  documentInStages_none?: InputMaybe<ConfigSearchWhereStageInput>;
  documentInStages_some?: InputMaybe<ConfigSearchWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values in which the union is connected to the given models */
  noResultsComponents?: InputMaybe<ConfigSearchNoResultsComponentsWhereInput>;
  /** All values in which the union is empty */
  noResultsComponents_empty?: InputMaybe<Scalars['Boolean']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type ConfigSearchWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ConfigSearchWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ConfigSearchWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ConfigSearchWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<ConfigSearchWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References ConfigSearch record uniquely */
export type ConfigSearchWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type ConnectPositionInput = {
  /** Connect document after specified document */
  after?: InputMaybe<Scalars['ID']>;
  /** Connect document before specified document */
  before?: InputMaybe<Scalars['ID']>;
  /** Connect document at last position */
  end?: InputMaybe<Scalars['Boolean']>;
  /** Connect document at first position */
  start?: InputMaybe<Scalars['Boolean']>;
};

export type Cta = {
  __typename?: 'Cta';
  buttonText?: Maybe<Scalars['String']>;
  ctaType?: Maybe<CtaType>;
  /** The unique identifier */
  id: Scalars['ID'];
  openInNewWindow?: Maybe<Scalars['Boolean']>;
  /** System stage field */
  stage: Stage;
  url?: Maybe<Scalars['String']>;
};

export type CtaConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: CtaWhereUniqueInput;
};

/** A connection to a list of items. */
export type CtaConnection = {
  __typename?: 'CtaConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<CtaEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CtaCreateInput = {
  buttonText?: InputMaybe<Scalars['String']>;
  ctaType?: InputMaybe<CtaType>;
  openInNewWindow?: InputMaybe<Scalars['Boolean']>;
  url?: InputMaybe<Scalars['String']>;
};

export type CtaCreateManyInlineInput = {
  /** Create and connect multiple existing Cta documents */
  create?: InputMaybe<Array<CtaCreateInput>>;
};

export type CtaCreateOneInlineInput = {
  /** Create and connect one Cta document */
  create?: InputMaybe<CtaCreateInput>;
};

export type CtaCreateWithPositionInput = {
  /** Document to create */
  data: CtaCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type CtaEdge = {
  __typename?: 'CtaEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Cta;
};

/** Identifies documents */
export type CtaManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CtaWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CtaWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CtaWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  buttonText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  buttonText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  buttonText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  buttonText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  buttonText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  buttonText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  buttonText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  buttonText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  buttonText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  buttonText_starts_with?: InputMaybe<Scalars['String']>;
  ctaType?: InputMaybe<CtaType>;
  /** All values that are contained in given list. */
  ctaType_in?: InputMaybe<Array<InputMaybe<CtaType>>>;
  /** Any other value that exists and is not equal to the given value. */
  ctaType_not?: InputMaybe<CtaType>;
  /** All values that are not contained in given list. */
  ctaType_not_in?: InputMaybe<Array<InputMaybe<CtaType>>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  openInNewWindow?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  openInNewWindow_not?: InputMaybe<Scalars['Boolean']>;
  url?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  url_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  url_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  url_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  url_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  url_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  url_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  url_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  url_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  url_starts_with?: InputMaybe<Scalars['String']>;
};

export enum CtaOrderByInput {
  ButtonTextAsc = 'buttonText_ASC',
  ButtonTextDesc = 'buttonText_DESC',
  CtaTypeAsc = 'ctaType_ASC',
  CtaTypeDesc = 'ctaType_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  OpenInNewWindowAsc = 'openInNewWindow_ASC',
  OpenInNewWindowDesc = 'openInNewWindow_DESC',
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC'
}

export type CtaParent = HeroBanner | JoinCtApanel | LinkCareerContentLinkedBlock | ModuleMemberBenefitsTab | OfferTiles | SectionAccountSignupCta | SectionCollectionFeatureLarge | SectionCtaButton | SectionSalonServiceBlock | SectionTextBlock;

export type CtaParentConnectInput = {
  HeroBanner?: InputMaybe<HeroBannerConnectInput>;
  JoinCTApanel?: InputMaybe<JoinCtApanelConnectInput>;
  LinkCareerContentLinkedBlock?: InputMaybe<LinkCareerContentLinkedBlockConnectInput>;
  ModuleMemberBenefitsTab?: InputMaybe<ModuleMemberBenefitsTabConnectInput>;
  OfferTiles?: InputMaybe<OfferTilesConnectInput>;
  SectionAccountSignupCta?: InputMaybe<SectionAccountSignupCtaConnectInput>;
  SectionCollectionFeatureLarge?: InputMaybe<SectionCollectionFeatureLargeConnectInput>;
  SectionCtaButton?: InputMaybe<SectionCtaButtonConnectInput>;
  SectionSalonServiceBlock?: InputMaybe<SectionSalonServiceBlockConnectInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockConnectInput>;
};

export type CtaParentCreateInput = {
  HeroBanner?: InputMaybe<HeroBannerCreateInput>;
  JoinCTApanel?: InputMaybe<JoinCtApanelCreateInput>;
  LinkCareerContentLinkedBlock?: InputMaybe<LinkCareerContentLinkedBlockCreateInput>;
  ModuleMemberBenefitsTab?: InputMaybe<ModuleMemberBenefitsTabCreateInput>;
  OfferTiles?: InputMaybe<OfferTilesCreateInput>;
  SectionAccountSignupCta?: InputMaybe<SectionAccountSignupCtaCreateInput>;
  SectionCollectionFeatureLarge?: InputMaybe<SectionCollectionFeatureLargeCreateInput>;
  SectionCtaButton?: InputMaybe<SectionCtaButtonCreateInput>;
  SectionSalonServiceBlock?: InputMaybe<SectionSalonServiceBlockCreateInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockCreateInput>;
};

export type CtaParentCreateManyInlineInput = {
  /** Connect multiple existing CtaParent documents */
  connect?: InputMaybe<Array<CtaParentWhereUniqueInput>>;
  /** Create and connect multiple existing CtaParent documents */
  create?: InputMaybe<Array<CtaParentCreateInput>>;
};

export type CtaParentCreateOneInlineInput = {
  /** Connect one existing CtaParent document */
  connect?: InputMaybe<CtaParentWhereUniqueInput>;
  /** Create and connect one CtaParent document */
  create?: InputMaybe<CtaParentCreateInput>;
};

export type CtaParentUpdateInput = {
  HeroBanner?: InputMaybe<HeroBannerUpdateInput>;
  JoinCTApanel?: InputMaybe<JoinCtApanelUpdateInput>;
  LinkCareerContentLinkedBlock?: InputMaybe<LinkCareerContentLinkedBlockUpdateInput>;
  ModuleMemberBenefitsTab?: InputMaybe<ModuleMemberBenefitsTabUpdateInput>;
  OfferTiles?: InputMaybe<OfferTilesUpdateInput>;
  SectionAccountSignupCta?: InputMaybe<SectionAccountSignupCtaUpdateInput>;
  SectionCollectionFeatureLarge?: InputMaybe<SectionCollectionFeatureLargeUpdateInput>;
  SectionCtaButton?: InputMaybe<SectionCtaButtonUpdateInput>;
  SectionSalonServiceBlock?: InputMaybe<SectionSalonServiceBlockUpdateInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockUpdateInput>;
};

export type CtaParentUpdateManyInlineInput = {
  /** Connect multiple existing CtaParent documents */
  connect?: InputMaybe<Array<CtaParentConnectInput>>;
  /** Create and connect multiple CtaParent documents */
  create?: InputMaybe<Array<CtaParentCreateInput>>;
  /** Delete multiple CtaParent documents */
  delete?: InputMaybe<Array<CtaParentWhereUniqueInput>>;
  /** Disconnect multiple CtaParent documents */
  disconnect?: InputMaybe<Array<CtaParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing CtaParent documents */
  set?: InputMaybe<Array<CtaParentWhereUniqueInput>>;
  /** Update multiple CtaParent documents */
  update?: InputMaybe<Array<CtaParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple CtaParent documents */
  upsert?: InputMaybe<Array<CtaParentUpsertWithNestedWhereUniqueInput>>;
};

export type CtaParentUpdateManyWithNestedWhereInput = {
  HeroBanner?: InputMaybe<HeroBannerUpdateManyWithNestedWhereInput>;
  JoinCTApanel?: InputMaybe<JoinCtApanelUpdateManyWithNestedWhereInput>;
  LinkCareerContentLinkedBlock?: InputMaybe<LinkCareerContentLinkedBlockUpdateManyWithNestedWhereInput>;
  ModuleMemberBenefitsTab?: InputMaybe<ModuleMemberBenefitsTabUpdateManyWithNestedWhereInput>;
  OfferTiles?: InputMaybe<OfferTilesUpdateManyWithNestedWhereInput>;
  SectionAccountSignupCta?: InputMaybe<SectionAccountSignupCtaUpdateManyWithNestedWhereInput>;
  SectionCollectionFeatureLarge?: InputMaybe<SectionCollectionFeatureLargeUpdateManyWithNestedWhereInput>;
  SectionCtaButton?: InputMaybe<SectionCtaButtonUpdateManyWithNestedWhereInput>;
  SectionSalonServiceBlock?: InputMaybe<SectionSalonServiceBlockUpdateManyWithNestedWhereInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockUpdateManyWithNestedWhereInput>;
};

export type CtaParentUpdateOneInlineInput = {
  /** Connect existing CtaParent document */
  connect?: InputMaybe<CtaParentWhereUniqueInput>;
  /** Create and connect one CtaParent document */
  create?: InputMaybe<CtaParentCreateInput>;
  /** Delete currently connected CtaParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected CtaParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single CtaParent document */
  update?: InputMaybe<CtaParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single CtaParent document */
  upsert?: InputMaybe<CtaParentUpsertWithNestedWhereUniqueInput>;
};

export type CtaParentUpdateWithNestedWhereUniqueInput = {
  HeroBanner?: InputMaybe<HeroBannerUpdateWithNestedWhereUniqueInput>;
  JoinCTApanel?: InputMaybe<JoinCtApanelUpdateWithNestedWhereUniqueInput>;
  LinkCareerContentLinkedBlock?: InputMaybe<LinkCareerContentLinkedBlockUpdateWithNestedWhereUniqueInput>;
  ModuleMemberBenefitsTab?: InputMaybe<ModuleMemberBenefitsTabUpdateWithNestedWhereUniqueInput>;
  OfferTiles?: InputMaybe<OfferTilesUpdateWithNestedWhereUniqueInput>;
  SectionAccountSignupCta?: InputMaybe<SectionAccountSignupCtaUpdateWithNestedWhereUniqueInput>;
  SectionCollectionFeatureLarge?: InputMaybe<SectionCollectionFeatureLargeUpdateWithNestedWhereUniqueInput>;
  SectionCtaButton?: InputMaybe<SectionCtaButtonUpdateWithNestedWhereUniqueInput>;
  SectionSalonServiceBlock?: InputMaybe<SectionSalonServiceBlockUpdateWithNestedWhereUniqueInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockUpdateWithNestedWhereUniqueInput>;
};

export type CtaParentUpsertWithNestedWhereUniqueInput = {
  HeroBanner?: InputMaybe<HeroBannerUpsertWithNestedWhereUniqueInput>;
  JoinCTApanel?: InputMaybe<JoinCtApanelUpsertWithNestedWhereUniqueInput>;
  LinkCareerContentLinkedBlock?: InputMaybe<LinkCareerContentLinkedBlockUpsertWithNestedWhereUniqueInput>;
  ModuleMemberBenefitsTab?: InputMaybe<ModuleMemberBenefitsTabUpsertWithNestedWhereUniqueInput>;
  OfferTiles?: InputMaybe<OfferTilesUpsertWithNestedWhereUniqueInput>;
  SectionAccountSignupCta?: InputMaybe<SectionAccountSignupCtaUpsertWithNestedWhereUniqueInput>;
  SectionCollectionFeatureLarge?: InputMaybe<SectionCollectionFeatureLargeUpsertWithNestedWhereUniqueInput>;
  SectionCtaButton?: InputMaybe<SectionCtaButtonUpsertWithNestedWhereUniqueInput>;
  SectionSalonServiceBlock?: InputMaybe<SectionSalonServiceBlockUpsertWithNestedWhereUniqueInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockUpsertWithNestedWhereUniqueInput>;
};

export type CtaParentWhereInput = {
  HeroBanner?: InputMaybe<HeroBannerWhereInput>;
  JoinCTApanel?: InputMaybe<JoinCtApanelWhereInput>;
  LinkCareerContentLinkedBlock?: InputMaybe<LinkCareerContentLinkedBlockWhereInput>;
  ModuleMemberBenefitsTab?: InputMaybe<ModuleMemberBenefitsTabWhereInput>;
  OfferTiles?: InputMaybe<OfferTilesWhereInput>;
  SectionAccountSignupCta?: InputMaybe<SectionAccountSignupCtaWhereInput>;
  SectionCollectionFeatureLarge?: InputMaybe<SectionCollectionFeatureLargeWhereInput>;
  SectionCtaButton?: InputMaybe<SectionCtaButtonWhereInput>;
  SectionSalonServiceBlock?: InputMaybe<SectionSalonServiceBlockWhereInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockWhereInput>;
};

export type CtaParentWhereUniqueInput = {
  HeroBanner?: InputMaybe<HeroBannerWhereUniqueInput>;
  JoinCTApanel?: InputMaybe<JoinCtApanelWhereUniqueInput>;
  LinkCareerContentLinkedBlock?: InputMaybe<LinkCareerContentLinkedBlockWhereUniqueInput>;
  ModuleMemberBenefitsTab?: InputMaybe<ModuleMemberBenefitsTabWhereUniqueInput>;
  OfferTiles?: InputMaybe<OfferTilesWhereUniqueInput>;
  SectionAccountSignupCta?: InputMaybe<SectionAccountSignupCtaWhereUniqueInput>;
  SectionCollectionFeatureLarge?: InputMaybe<SectionCollectionFeatureLargeWhereUniqueInput>;
  SectionCtaButton?: InputMaybe<SectionCtaButtonWhereUniqueInput>;
  SectionSalonServiceBlock?: InputMaybe<SectionSalonServiceBlockWhereUniqueInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockWhereUniqueInput>;
};

export enum CtaType {
  Primary = 'primary',
  Secondary = 'secondary'
}

export type CtaUpdateInput = {
  buttonText?: InputMaybe<Scalars['String']>;
  ctaType?: InputMaybe<CtaType>;
  openInNewWindow?: InputMaybe<Scalars['Boolean']>;
  url?: InputMaybe<Scalars['String']>;
};

export type CtaUpdateManyInlineInput = {
  /** Create and connect multiple Cta component instances */
  create?: InputMaybe<Array<CtaCreateWithPositionInput>>;
  /** Delete multiple Cta documents */
  delete?: InputMaybe<Array<CtaWhereUniqueInput>>;
  /** Update multiple Cta component instances */
  update?: InputMaybe<Array<CtaUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple Cta component instances */
  upsert?: InputMaybe<Array<CtaUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type CtaUpdateManyInput = {
  buttonText?: InputMaybe<Scalars['String']>;
  ctaType?: InputMaybe<CtaType>;
  openInNewWindow?: InputMaybe<Scalars['Boolean']>;
  url?: InputMaybe<Scalars['String']>;
};

export type CtaUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: CtaUpdateManyInput;
  /** Document search */
  where: CtaWhereInput;
};

export type CtaUpdateOneInlineInput = {
  /** Create and connect one Cta document */
  create?: InputMaybe<CtaCreateInput>;
  /** Delete currently connected Cta document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single Cta document */
  update?: InputMaybe<CtaUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Cta document */
  upsert?: InputMaybe<CtaUpsertWithNestedWhereUniqueInput>;
};

export type CtaUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<CtaUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CtaWhereUniqueInput;
};

export type CtaUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: CtaUpdateInput;
  /** Unique document search */
  where: CtaWhereUniqueInput;
};

export type CtaUpsertInput = {
  /** Create document if it didn't exist */
  create: CtaCreateInput;
  /** Update document if it exists */
  update: CtaUpdateInput;
};

export type CtaUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<CtaUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: CtaWhereUniqueInput;
};

export type CtaUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: CtaUpsertInput;
  /** Unique document search */
  where: CtaWhereUniqueInput;
};

/** Identifies documents */
export type CtaWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<CtaWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<CtaWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<CtaWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  buttonText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  buttonText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  buttonText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  buttonText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  buttonText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  buttonText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  buttonText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  buttonText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  buttonText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  buttonText_starts_with?: InputMaybe<Scalars['String']>;
  ctaType?: InputMaybe<CtaType>;
  /** All values that are contained in given list. */
  ctaType_in?: InputMaybe<Array<InputMaybe<CtaType>>>;
  /** Any other value that exists and is not equal to the given value. */
  ctaType_not?: InputMaybe<CtaType>;
  /** All values that are not contained in given list. */
  ctaType_not_in?: InputMaybe<Array<InputMaybe<CtaType>>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  openInNewWindow?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  openInNewWindow_not?: InputMaybe<Scalars['Boolean']>;
  url?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  url_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  url_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  url_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  url_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  url_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  url_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  url_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  url_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  url_starts_with?: InputMaybe<Scalars['String']>;
};

/** References Cta record uniquely */
export type CtaWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum DocumentFileTypes {
  Doc = 'doc',
  Docx = 'docx',
  Html = 'html',
  Jpg = 'jpg',
  Odp = 'odp',
  Ods = 'ods',
  Odt = 'odt',
  Pdf = 'pdf',
  Png = 'png',
  Ppt = 'ppt',
  Pptx = 'pptx',
  Svg = 'svg',
  Txt = 'txt',
  Webp = 'webp',
  Xls = 'xls',
  Xlsx = 'xlsx'
}

export type DocumentOutputInput = {
  /**
   * Transforms a document into a desired file type.
   * See this matrix for format support:
   *
   * PDF:	jpg, odp, ods, odt, png, svg, txt, and webp
   * DOC:	docx, html, jpg, odt, pdf, png, svg, txt, and webp
   * DOCX:	doc, html, jpg, odt, pdf, png, svg, txt, and webp
   * ODT:	doc, docx, html, jpg, pdf, png, svg, txt, and webp
   * XLS:	jpg, pdf, ods, png, svg, xlsx, and webp
   * XLSX:	jpg, pdf, ods, png, svg, xls, and webp
   * ODS:	jpg, pdf, png, xls, svg, xlsx, and webp
   * PPT:	jpg, odp, pdf, png, svg, pptx, and webp
   * PPTX:	jpg, odp, pdf, png, svg, ppt, and webp
   * ODP:	jpg, pdf, png, ppt, svg, pptx, and webp
   * BMP:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * GIF:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * JPG:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * PNG:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * WEBP:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * TIFF:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * AI:	    jpg, odp, ods, odt, pdf, png, svg, and webp
   * PSD:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * SVG:	jpg, odp, ods, odt, pdf, png, and webp
   * HTML:	jpg, odt, pdf, svg, txt, and webp
   * TXT:	jpg, html, odt, pdf, svg, and webp
   */
  format?: InputMaybe<DocumentFileTypes>;
};

/** Transformations for Documents */
export type DocumentTransformationInput = {
  /** Changes the output for the file. */
  output?: InputMaybe<DocumentOutputInput>;
};

export type DocumentVersion = {
  __typename?: 'DocumentVersion';
  createdAt: Scalars['DateTime'];
  data?: Maybe<Scalars['Json']>;
  id: Scalars['ID'];
  revision: Scalars['Int'];
  stage: Stage;
};

export type EditorialText = Node & {
  __typename?: 'EditorialText';
  adminTitle?: Maybe<Scalars['String']>;
  configSearches: Array<ConfigSearch>;
  content: Scalars['String'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<EditorialText>;
  fullWidthTemplates: Array<CmsPage>;
  /** List of EditorialText versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  textAlignment?: Maybe<TextAlignment>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type EditorialTextConfigSearchesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigSearchWhereInput>;
};


export type EditorialTextCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type EditorialTextDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type EditorialTextFullWidthTemplatesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsPageWhereInput>;
};


export type EditorialTextHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type EditorialTextPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type EditorialTextScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type EditorialTextUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type EditorialTextConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: EditorialTextWhereUniqueInput;
};

/** A connection to a list of items. */
export type EditorialTextConnection = {
  __typename?: 'EditorialTextConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<EditorialTextEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type EditorialTextCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  configSearches?: InputMaybe<ConfigSearchCreateManyInlineInput>;
  content: Scalars['String'];
  createdAt?: InputMaybe<Scalars['DateTime']>;
  fullWidthTemplates?: InputMaybe<CmsPageCreateManyInlineInput>;
  textAlignment?: InputMaybe<TextAlignment>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type EditorialTextCreateManyInlineInput = {
  /** Connect multiple existing EditorialText documents */
  connect?: InputMaybe<Array<EditorialTextWhereUniqueInput>>;
  /** Create and connect multiple existing EditorialText documents */
  create?: InputMaybe<Array<EditorialTextCreateInput>>;
};

export type EditorialTextCreateOneInlineInput = {
  /** Connect one existing EditorialText document */
  connect?: InputMaybe<EditorialTextWhereUniqueInput>;
  /** Create and connect one EditorialText document */
  create?: InputMaybe<EditorialTextCreateInput>;
};

/** An edge in a connection. */
export type EditorialTextEdge = {
  __typename?: 'EditorialTextEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: EditorialText;
};

/** Identifies documents */
export type EditorialTextManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<EditorialTextWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<EditorialTextWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<EditorialTextWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  configSearches_every?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_none?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_some?: InputMaybe<ConfigSearchWhereInput>;
  content?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  content_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  content_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  content_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  content_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  content_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  content_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  content_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  content_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  content_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<EditorialTextWhereStageInput>;
  documentInStages_none?: InputMaybe<EditorialTextWhereStageInput>;
  documentInStages_some?: InputMaybe<EditorialTextWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  textAlignment?: InputMaybe<TextAlignment>;
  /** All values that are contained in given list. */
  textAlignment_in?: InputMaybe<Array<InputMaybe<TextAlignment>>>;
  /** Any other value that exists and is not equal to the given value. */
  textAlignment_not?: InputMaybe<TextAlignment>;
  /** All values that are not contained in given list. */
  textAlignment_not_in?: InputMaybe<Array<InputMaybe<TextAlignment>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum EditorialTextOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  ContentAsc = 'content_ASC',
  ContentDesc = 'content_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TextAlignmentAsc = 'textAlignment_ASC',
  TextAlignmentDesc = 'textAlignment_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type EditorialTextUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  configSearches?: InputMaybe<ConfigSearchUpdateManyInlineInput>;
  content?: InputMaybe<Scalars['String']>;
  fullWidthTemplates?: InputMaybe<CmsPageUpdateManyInlineInput>;
  textAlignment?: InputMaybe<TextAlignment>;
};

export type EditorialTextUpdateManyInlineInput = {
  /** Connect multiple existing EditorialText documents */
  connect?: InputMaybe<Array<EditorialTextConnectInput>>;
  /** Create and connect multiple EditorialText documents */
  create?: InputMaybe<Array<EditorialTextCreateInput>>;
  /** Delete multiple EditorialText documents */
  delete?: InputMaybe<Array<EditorialTextWhereUniqueInput>>;
  /** Disconnect multiple EditorialText documents */
  disconnect?: InputMaybe<Array<EditorialTextWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing EditorialText documents */
  set?: InputMaybe<Array<EditorialTextWhereUniqueInput>>;
  /** Update multiple EditorialText documents */
  update?: InputMaybe<Array<EditorialTextUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple EditorialText documents */
  upsert?: InputMaybe<Array<EditorialTextUpsertWithNestedWhereUniqueInput>>;
};

export type EditorialTextUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  content?: InputMaybe<Scalars['String']>;
  textAlignment?: InputMaybe<TextAlignment>;
};

export type EditorialTextUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: EditorialTextUpdateManyInput;
  /** Document search */
  where: EditorialTextWhereInput;
};

export type EditorialTextUpdateOneInlineInput = {
  /** Connect existing EditorialText document */
  connect?: InputMaybe<EditorialTextWhereUniqueInput>;
  /** Create and connect one EditorialText document */
  create?: InputMaybe<EditorialTextCreateInput>;
  /** Delete currently connected EditorialText document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected EditorialText document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single EditorialText document */
  update?: InputMaybe<EditorialTextUpdateWithNestedWhereUniqueInput>;
  /** Upsert single EditorialText document */
  upsert?: InputMaybe<EditorialTextUpsertWithNestedWhereUniqueInput>;
};

export type EditorialTextUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: EditorialTextUpdateInput;
  /** Unique document search */
  where: EditorialTextWhereUniqueInput;
};

export type EditorialTextUpsertInput = {
  /** Create document if it didn't exist */
  create: EditorialTextCreateInput;
  /** Update document if it exists */
  update: EditorialTextUpdateInput;
};

export type EditorialTextUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: EditorialTextUpsertInput;
  /** Unique document search */
  where: EditorialTextWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type EditorialTextWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type EditorialTextWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<EditorialTextWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<EditorialTextWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<EditorialTextWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  configSearches_every?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_none?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_some?: InputMaybe<ConfigSearchWhereInput>;
  content?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  content_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  content_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  content_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  content_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  content_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  content_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  content_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  content_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  content_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<EditorialTextWhereStageInput>;
  documentInStages_none?: InputMaybe<EditorialTextWhereStageInput>;
  documentInStages_some?: InputMaybe<EditorialTextWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  textAlignment?: InputMaybe<TextAlignment>;
  /** All values that are contained in given list. */
  textAlignment_in?: InputMaybe<Array<InputMaybe<TextAlignment>>>;
  /** Any other value that exists and is not equal to the given value. */
  textAlignment_not?: InputMaybe<TextAlignment>;
  /** All values that are not contained in given list. */
  textAlignment_not_in?: InputMaybe<Array<InputMaybe<TextAlignment>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type EditorialTextWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<EditorialTextWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<EditorialTextWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<EditorialTextWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<EditorialTextWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References EditorialText record uniquely */
export type EditorialTextWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type FeatureProductCarouselTabbed = Node & {
  __typename?: 'FeatureProductCarouselTabbed';
  adminTitle?: Maybe<Scalars['String']>;
  content: Array<FeatureProductCarouselTabbedcontentUnion>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<FeatureProductCarouselTabbed>;
  fullWidthTemplates: Array<CmsPage>;
  /** List of FeatureProductCarouselTabbed versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** Displays as the heading on the accordion. NOTE: Use underline mark up to add underline style to specific words */
  title?: Maybe<Scalars['String']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type FeatureProductCarouselTabbedContentArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type FeatureProductCarouselTabbedCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type FeatureProductCarouselTabbedDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type FeatureProductCarouselTabbedFullWidthTemplatesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsPageWhereInput>;
};


export type FeatureProductCarouselTabbedHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type FeatureProductCarouselTabbedPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type FeatureProductCarouselTabbedScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type FeatureProductCarouselTabbedUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type FeatureProductCarouselTabbedConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: FeatureProductCarouselTabbedWhereUniqueInput;
};

/** A connection to a list of items. */
export type FeatureProductCarouselTabbedConnection = {
  __typename?: 'FeatureProductCarouselTabbedConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<FeatureProductCarouselTabbedEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type FeatureProductCarouselTabbedCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  content?: InputMaybe<FeatureProductCarouselTabbedcontentUnionCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  fullWidthTemplates?: InputMaybe<CmsPageCreateManyInlineInput>;
  title?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type FeatureProductCarouselTabbedCreateManyInlineInput = {
  /** Connect multiple existing FeatureProductCarouselTabbed documents */
  connect?: InputMaybe<Array<FeatureProductCarouselTabbedWhereUniqueInput>>;
  /** Create and connect multiple existing FeatureProductCarouselTabbed documents */
  create?: InputMaybe<Array<FeatureProductCarouselTabbedCreateInput>>;
};

export type FeatureProductCarouselTabbedCreateOneInlineInput = {
  /** Connect one existing FeatureProductCarouselTabbed document */
  connect?: InputMaybe<FeatureProductCarouselTabbedWhereUniqueInput>;
  /** Create and connect one FeatureProductCarouselTabbed document */
  create?: InputMaybe<FeatureProductCarouselTabbedCreateInput>;
};

/** An edge in a connection. */
export type FeatureProductCarouselTabbedEdge = {
  __typename?: 'FeatureProductCarouselTabbedEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: FeatureProductCarouselTabbed;
};

/** Identifies documents */
export type FeatureProductCarouselTabbedManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FeatureProductCarouselTabbedWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FeatureProductCarouselTabbedWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FeatureProductCarouselTabbedWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  /** All values in which the union is empty. */
  content_empty?: InputMaybe<Scalars['Boolean']>;
  /** Matches if the modular component contains at least one connection to the item provided to the filter */
  content_some?: InputMaybe<FeatureProductCarouselTabbedcontentUnionWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<FeatureProductCarouselTabbedWhereStageInput>;
  documentInStages_none?: InputMaybe<FeatureProductCarouselTabbedWhereStageInput>;
  documentInStages_some?: InputMaybe<FeatureProductCarouselTabbedWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum FeatureProductCarouselTabbedOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type FeatureProductCarouselTabbedUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  content?: InputMaybe<FeatureProductCarouselTabbedcontentUnionUpdateManyInlineInput>;
  fullWidthTemplates?: InputMaybe<CmsPageUpdateManyInlineInput>;
  title?: InputMaybe<Scalars['String']>;
};

export type FeatureProductCarouselTabbedUpdateManyInlineInput = {
  /** Connect multiple existing FeatureProductCarouselTabbed documents */
  connect?: InputMaybe<Array<FeatureProductCarouselTabbedConnectInput>>;
  /** Create and connect multiple FeatureProductCarouselTabbed documents */
  create?: InputMaybe<Array<FeatureProductCarouselTabbedCreateInput>>;
  /** Delete multiple FeatureProductCarouselTabbed documents */
  delete?: InputMaybe<Array<FeatureProductCarouselTabbedWhereUniqueInput>>;
  /** Disconnect multiple FeatureProductCarouselTabbed documents */
  disconnect?: InputMaybe<Array<FeatureProductCarouselTabbedWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing FeatureProductCarouselTabbed documents */
  set?: InputMaybe<Array<FeatureProductCarouselTabbedWhereUniqueInput>>;
  /** Update multiple FeatureProductCarouselTabbed documents */
  update?: InputMaybe<Array<FeatureProductCarouselTabbedUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple FeatureProductCarouselTabbed documents */
  upsert?: InputMaybe<Array<FeatureProductCarouselTabbedUpsertWithNestedWhereUniqueInput>>;
};

export type FeatureProductCarouselTabbedUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
};

export type FeatureProductCarouselTabbedUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: FeatureProductCarouselTabbedUpdateManyInput;
  /** Document search */
  where: FeatureProductCarouselTabbedWhereInput;
};

export type FeatureProductCarouselTabbedUpdateOneInlineInput = {
  /** Connect existing FeatureProductCarouselTabbed document */
  connect?: InputMaybe<FeatureProductCarouselTabbedWhereUniqueInput>;
  /** Create and connect one FeatureProductCarouselTabbed document */
  create?: InputMaybe<FeatureProductCarouselTabbedCreateInput>;
  /** Delete currently connected FeatureProductCarouselTabbed document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected FeatureProductCarouselTabbed document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single FeatureProductCarouselTabbed document */
  update?: InputMaybe<FeatureProductCarouselTabbedUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FeatureProductCarouselTabbed document */
  upsert?: InputMaybe<FeatureProductCarouselTabbedUpsertWithNestedWhereUniqueInput>;
};

export type FeatureProductCarouselTabbedUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: FeatureProductCarouselTabbedUpdateInput;
  /** Unique document search */
  where: FeatureProductCarouselTabbedWhereUniqueInput;
};

export type FeatureProductCarouselTabbedUpsertInput = {
  /** Create document if it didn't exist */
  create: FeatureProductCarouselTabbedCreateInput;
  /** Update document if it exists */
  update: FeatureProductCarouselTabbedUpdateInput;
};

export type FeatureProductCarouselTabbedUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: FeatureProductCarouselTabbedUpsertInput;
  /** Unique document search */
  where: FeatureProductCarouselTabbedWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type FeatureProductCarouselTabbedWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type FeatureProductCarouselTabbedWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FeatureProductCarouselTabbedWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FeatureProductCarouselTabbedWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FeatureProductCarouselTabbedWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  /** All values in which the union is empty. */
  content_empty?: InputMaybe<Scalars['Boolean']>;
  /** Matches if the modular component contains at least one connection to the item provided to the filter */
  content_some?: InputMaybe<FeatureProductCarouselTabbedcontentUnionWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<FeatureProductCarouselTabbedWhereStageInput>;
  documentInStages_none?: InputMaybe<FeatureProductCarouselTabbedWhereStageInput>;
  documentInStages_some?: InputMaybe<FeatureProductCarouselTabbedWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type FeatureProductCarouselTabbedWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FeatureProductCarouselTabbedWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FeatureProductCarouselTabbedWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FeatureProductCarouselTabbedWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<FeatureProductCarouselTabbedWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References FeatureProductCarouselTabbed record uniquely */
export type FeatureProductCarouselTabbedWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type FeatureProductCarouselTabbedcontentUnion = ProductCarouselCollection | ProductCarouselCurated;

export type FeatureProductCarouselTabbedcontentUnionConnectInput = {
  ProductCarouselCollection?: InputMaybe<ProductCarouselCollectionConnectInput>;
  ProductCarouselCurated?: InputMaybe<ProductCarouselCuratedConnectInput>;
};

export type FeatureProductCarouselTabbedcontentUnionCreateInput = {
  ProductCarouselCollection?: InputMaybe<ProductCarouselCollectionCreateInput>;
  ProductCarouselCurated?: InputMaybe<ProductCarouselCuratedCreateInput>;
};

export type FeatureProductCarouselTabbedcontentUnionCreateManyInlineInput = {
  /** Create and connect multiple existing FeatureProductCarouselTabbedcontentUnion documents */
  create?: InputMaybe<Array<FeatureProductCarouselTabbedcontentUnionCreateInput>>;
};

export type FeatureProductCarouselTabbedcontentUnionCreateOneInlineInput = {
  /** Create and connect one FeatureProductCarouselTabbedcontentUnion document */
  create?: InputMaybe<FeatureProductCarouselTabbedcontentUnionCreateInput>;
};

export type FeatureProductCarouselTabbedcontentUnionCreateWithPositionInput = {
  ProductCarouselCollection?: InputMaybe<ProductCarouselCollectionCreateWithPositionInput>;
  ProductCarouselCurated?: InputMaybe<ProductCarouselCuratedCreateWithPositionInput>;
};

export type FeatureProductCarouselTabbedcontentUnionUpdateInput = {
  ProductCarouselCollection?: InputMaybe<ProductCarouselCollectionUpdateInput>;
  ProductCarouselCurated?: InputMaybe<ProductCarouselCuratedUpdateInput>;
};

export type FeatureProductCarouselTabbedcontentUnionUpdateManyInlineInput = {
  /** Create and connect multiple FeatureProductCarouselTabbedcontentUnion component instances */
  create?: InputMaybe<Array<FeatureProductCarouselTabbedcontentUnionCreateWithPositionInput>>;
  /** Delete multiple FeatureProductCarouselTabbedcontentUnion documents */
  delete?: InputMaybe<Array<FeatureProductCarouselTabbedcontentUnionWhereUniqueInput>>;
  /** Update multiple FeatureProductCarouselTabbedcontentUnion component instances */
  update?: InputMaybe<Array<FeatureProductCarouselTabbedcontentUnionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple FeatureProductCarouselTabbedcontentUnion component instances */
  upsert?: InputMaybe<Array<FeatureProductCarouselTabbedcontentUnionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type FeatureProductCarouselTabbedcontentUnionUpdateManyWithNestedWhereInput = {
  ProductCarouselCollection?: InputMaybe<ProductCarouselCollectionUpdateManyWithNestedWhereInput>;
  ProductCarouselCurated?: InputMaybe<ProductCarouselCuratedUpdateManyWithNestedWhereInput>;
};

export type FeatureProductCarouselTabbedcontentUnionUpdateOneInlineInput = {
  /** Create and connect one FeatureProductCarouselTabbedcontentUnion document */
  create?: InputMaybe<FeatureProductCarouselTabbedcontentUnionCreateInput>;
  /** Delete currently connected FeatureProductCarouselTabbedcontentUnion document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single FeatureProductCarouselTabbedcontentUnion document */
  update?: InputMaybe<FeatureProductCarouselTabbedcontentUnionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FeatureProductCarouselTabbedcontentUnion document */
  upsert?: InputMaybe<FeatureProductCarouselTabbedcontentUnionUpsertWithNestedWhereUniqueInput>;
};

export type FeatureProductCarouselTabbedcontentUnionUpdateWithNestedWhereUniqueAndPositionInput = {
  ProductCarouselCollection?: InputMaybe<ProductCarouselCollectionUpdateWithNestedWhereUniqueAndPositionInput>;
  ProductCarouselCurated?: InputMaybe<ProductCarouselCuratedUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type FeatureProductCarouselTabbedcontentUnionUpdateWithNestedWhereUniqueInput = {
  ProductCarouselCollection?: InputMaybe<ProductCarouselCollectionUpdateWithNestedWhereUniqueInput>;
  ProductCarouselCurated?: InputMaybe<ProductCarouselCuratedUpdateWithNestedWhereUniqueInput>;
};

export type FeatureProductCarouselTabbedcontentUnionUpsertWithNestedWhereUniqueAndPositionInput = {
  ProductCarouselCollection?: InputMaybe<ProductCarouselCollectionUpsertWithNestedWhereUniqueAndPositionInput>;
  ProductCarouselCurated?: InputMaybe<ProductCarouselCuratedUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type FeatureProductCarouselTabbedcontentUnionUpsertWithNestedWhereUniqueInput = {
  ProductCarouselCollection?: InputMaybe<ProductCarouselCollectionUpsertWithNestedWhereUniqueInput>;
  ProductCarouselCurated?: InputMaybe<ProductCarouselCuratedUpsertWithNestedWhereUniqueInput>;
};

export type FeatureProductCarouselTabbedcontentUnionWhereInput = {
  ProductCarouselCollection?: InputMaybe<ProductCarouselCollectionWhereInput>;
  ProductCarouselCurated?: InputMaybe<ProductCarouselCuratedWhereInput>;
};

export type FeatureProductCarouselTabbedcontentUnionWhereUniqueInput = {
  ProductCarouselCollection?: InputMaybe<ProductCarouselCollectionWhereUniqueInput>;
  ProductCarouselCurated?: InputMaybe<ProductCarouselCuratedWhereUniqueInput>;
};

export type FooterConfig = Node & {
  __typename?: 'FooterConfig';
  acknowledgementContent?: Maybe<RichText>;
  androidAppStoreUrl?: Maybe<Scalars['String']>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<FooterConfig>;
  facebookUrl?: Maybe<Scalars['String']>;
  /** Displays a collection of links in the footer. MAX of 3 collections. */
  footerLinks: Array<FooterConfigfooterLinksUnion>;
  footerLogo: Asset;
  helpCentreBox?: Maybe<RichText>;
  /** List of FooterConfig versions */
  history: Array<Version>;
  iOsAppStoreUrl?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  instagramUrl?: Maybe<Scalars['String']>;
  legalLinks: Array<Link>;
  name: Scalars['String'];
  paymentLogos: Array<Asset>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  socialLinksHeadingText?: Maybe<Scalars['String']>;
  /** System stage field */
  stage: Stage;
  styleSocietyContent?: Maybe<Scalars['String']>;
  styleSocietyCta?: Maybe<Link>;
  styleSocietyHeading?: Maybe<Scalars['String']>;
  tiktokUrl?: Maybe<Scalars['String']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  websiteConfigs: Array<WebsiteConfig>;
  youtubeUrl?: Maybe<Scalars['String']>;
};


export type FooterConfigCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type FooterConfigDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type FooterConfigFooterLinksArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type FooterConfigFooterLogoArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type FooterConfigHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type FooterConfigLegalLinksArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<LinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<LinkWhereInput>;
};


export type FooterConfigPaymentLogosArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetWhereInput>;
};


export type FooterConfigPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type FooterConfigScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type FooterConfigStyleSocietyCtaArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type FooterConfigUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type FooterConfigWebsiteConfigsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<WebsiteConfigOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WebsiteConfigWhereInput>;
};

export type FooterConfigConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: FooterConfigWhereUniqueInput;
};

/** A connection to a list of items. */
export type FooterConfigConnection = {
  __typename?: 'FooterConfigConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<FooterConfigEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type FooterConfigCreateInput = {
  acknowledgementContent?: InputMaybe<Scalars['RichTextAST']>;
  androidAppStoreUrl?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  facebookUrl?: InputMaybe<Scalars['String']>;
  footerLinks?: InputMaybe<FooterConfigfooterLinksUnionCreateManyInlineInput>;
  footerLogo: AssetCreateOneInlineInput;
  helpCentreBox?: InputMaybe<Scalars['RichTextAST']>;
  iOsAppStoreUrl?: InputMaybe<Scalars['String']>;
  instagramUrl?: InputMaybe<Scalars['String']>;
  legalLinks?: InputMaybe<LinkCreateManyInlineInput>;
  name: Scalars['String'];
  paymentLogos?: InputMaybe<AssetCreateManyInlineInput>;
  socialLinksHeadingText?: InputMaybe<Scalars['String']>;
  styleSocietyContent?: InputMaybe<Scalars['String']>;
  styleSocietyCta?: InputMaybe<LinkCreateOneInlineInput>;
  styleSocietyHeading?: InputMaybe<Scalars['String']>;
  tiktokUrl?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  websiteConfigs?: InputMaybe<WebsiteConfigCreateManyInlineInput>;
  youtubeUrl?: InputMaybe<Scalars['String']>;
};

export type FooterConfigCreateManyInlineInput = {
  /** Connect multiple existing FooterConfig documents */
  connect?: InputMaybe<Array<FooterConfigWhereUniqueInput>>;
  /** Create and connect multiple existing FooterConfig documents */
  create?: InputMaybe<Array<FooterConfigCreateInput>>;
};

export type FooterConfigCreateOneInlineInput = {
  /** Connect one existing FooterConfig document */
  connect?: InputMaybe<FooterConfigWhereUniqueInput>;
  /** Create and connect one FooterConfig document */
  create?: InputMaybe<FooterConfigCreateInput>;
};

/** An edge in a connection. */
export type FooterConfigEdge = {
  __typename?: 'FooterConfigEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: FooterConfig;
};

/** Identifies documents */
export type FooterConfigManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FooterConfigWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FooterConfigWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FooterConfigWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  androidAppStoreUrl?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  androidAppStoreUrl_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  androidAppStoreUrl_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  androidAppStoreUrl_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  androidAppStoreUrl_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  androidAppStoreUrl_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  androidAppStoreUrl_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  androidAppStoreUrl_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  androidAppStoreUrl_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  androidAppStoreUrl_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<FooterConfigWhereStageInput>;
  documentInStages_none?: InputMaybe<FooterConfigWhereStageInput>;
  documentInStages_some?: InputMaybe<FooterConfigWhereStageInput>;
  facebookUrl?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  facebookUrl_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  facebookUrl_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  facebookUrl_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  facebookUrl_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  facebookUrl_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  facebookUrl_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  facebookUrl_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  facebookUrl_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  facebookUrl_starts_with?: InputMaybe<Scalars['String']>;
  /** All values in which the union is empty. */
  footerLinks_empty?: InputMaybe<Scalars['Boolean']>;
  /** Matches if the modular component contains at least one connection to the item provided to the filter */
  footerLinks_some?: InputMaybe<FooterConfigfooterLinksUnionWhereInput>;
  footerLogo?: InputMaybe<AssetWhereInput>;
  iOsAppStoreUrl?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  iOsAppStoreUrl_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  iOsAppStoreUrl_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  iOsAppStoreUrl_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  iOsAppStoreUrl_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  iOsAppStoreUrl_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  iOsAppStoreUrl_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  iOsAppStoreUrl_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  iOsAppStoreUrl_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  iOsAppStoreUrl_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  instagramUrl?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  instagramUrl_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  instagramUrl_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  instagramUrl_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  instagramUrl_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  instagramUrl_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  instagramUrl_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  instagramUrl_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  instagramUrl_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  instagramUrl_starts_with?: InputMaybe<Scalars['String']>;
  legalLinks_every?: InputMaybe<LinkWhereInput>;
  legalLinks_none?: InputMaybe<LinkWhereInput>;
  legalLinks_some?: InputMaybe<LinkWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  paymentLogos_every?: InputMaybe<AssetWhereInput>;
  paymentLogos_none?: InputMaybe<AssetWhereInput>;
  paymentLogos_some?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  socialLinksHeadingText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  socialLinksHeadingText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  socialLinksHeadingText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  socialLinksHeadingText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  socialLinksHeadingText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  socialLinksHeadingText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  socialLinksHeadingText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  socialLinksHeadingText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  socialLinksHeadingText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  socialLinksHeadingText_starts_with?: InputMaybe<Scalars['String']>;
  styleSocietyContent?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  styleSocietyContent_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  styleSocietyContent_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  styleSocietyContent_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  styleSocietyContent_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  styleSocietyContent_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  styleSocietyContent_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  styleSocietyContent_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  styleSocietyContent_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  styleSocietyContent_starts_with?: InputMaybe<Scalars['String']>;
  styleSocietyCta?: InputMaybe<LinkWhereInput>;
  styleSocietyHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  styleSocietyHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  styleSocietyHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  styleSocietyHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  styleSocietyHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  styleSocietyHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  styleSocietyHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  styleSocietyHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  styleSocietyHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  styleSocietyHeading_starts_with?: InputMaybe<Scalars['String']>;
  tiktokUrl?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  tiktokUrl_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  tiktokUrl_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  tiktokUrl_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  tiktokUrl_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  tiktokUrl_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  tiktokUrl_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  tiktokUrl_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  tiktokUrl_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  tiktokUrl_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  websiteConfigs_every?: InputMaybe<WebsiteConfigWhereInput>;
  websiteConfigs_none?: InputMaybe<WebsiteConfigWhereInput>;
  websiteConfigs_some?: InputMaybe<WebsiteConfigWhereInput>;
  youtubeUrl?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  youtubeUrl_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  youtubeUrl_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  youtubeUrl_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  youtubeUrl_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  youtubeUrl_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  youtubeUrl_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  youtubeUrl_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  youtubeUrl_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  youtubeUrl_starts_with?: InputMaybe<Scalars['String']>;
};

export enum FooterConfigOrderByInput {
  AndroidAppStoreUrlAsc = 'androidAppStoreUrl_ASC',
  AndroidAppStoreUrlDesc = 'androidAppStoreUrl_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  FacebookUrlAsc = 'facebookUrl_ASC',
  FacebookUrlDesc = 'facebookUrl_DESC',
  IOsAppStoreUrlAsc = 'iOsAppStoreUrl_ASC',
  IOsAppStoreUrlDesc = 'iOsAppStoreUrl_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  InstagramUrlAsc = 'instagramUrl_ASC',
  InstagramUrlDesc = 'instagramUrl_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SocialLinksHeadingTextAsc = 'socialLinksHeadingText_ASC',
  SocialLinksHeadingTextDesc = 'socialLinksHeadingText_DESC',
  StyleSocietyContentAsc = 'styleSocietyContent_ASC',
  StyleSocietyContentDesc = 'styleSocietyContent_DESC',
  StyleSocietyHeadingAsc = 'styleSocietyHeading_ASC',
  StyleSocietyHeadingDesc = 'styleSocietyHeading_DESC',
  TiktokUrlAsc = 'tiktokUrl_ASC',
  TiktokUrlDesc = 'tiktokUrl_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  YoutubeUrlAsc = 'youtubeUrl_ASC',
  YoutubeUrlDesc = 'youtubeUrl_DESC'
}

export type FooterConfigUpdateInput = {
  acknowledgementContent?: InputMaybe<Scalars['RichTextAST']>;
  androidAppStoreUrl?: InputMaybe<Scalars['String']>;
  facebookUrl?: InputMaybe<Scalars['String']>;
  footerLinks?: InputMaybe<FooterConfigfooterLinksUnionUpdateManyInlineInput>;
  footerLogo?: InputMaybe<AssetUpdateOneInlineInput>;
  helpCentreBox?: InputMaybe<Scalars['RichTextAST']>;
  iOsAppStoreUrl?: InputMaybe<Scalars['String']>;
  instagramUrl?: InputMaybe<Scalars['String']>;
  legalLinks?: InputMaybe<LinkUpdateManyInlineInput>;
  name?: InputMaybe<Scalars['String']>;
  paymentLogos?: InputMaybe<AssetUpdateManyInlineInput>;
  socialLinksHeadingText?: InputMaybe<Scalars['String']>;
  styleSocietyContent?: InputMaybe<Scalars['String']>;
  styleSocietyCta?: InputMaybe<LinkUpdateOneInlineInput>;
  styleSocietyHeading?: InputMaybe<Scalars['String']>;
  tiktokUrl?: InputMaybe<Scalars['String']>;
  websiteConfigs?: InputMaybe<WebsiteConfigUpdateManyInlineInput>;
  youtubeUrl?: InputMaybe<Scalars['String']>;
};

export type FooterConfigUpdateManyInlineInput = {
  /** Connect multiple existing FooterConfig documents */
  connect?: InputMaybe<Array<FooterConfigConnectInput>>;
  /** Create and connect multiple FooterConfig documents */
  create?: InputMaybe<Array<FooterConfigCreateInput>>;
  /** Delete multiple FooterConfig documents */
  delete?: InputMaybe<Array<FooterConfigWhereUniqueInput>>;
  /** Disconnect multiple FooterConfig documents */
  disconnect?: InputMaybe<Array<FooterConfigWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing FooterConfig documents */
  set?: InputMaybe<Array<FooterConfigWhereUniqueInput>>;
  /** Update multiple FooterConfig documents */
  update?: InputMaybe<Array<FooterConfigUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple FooterConfig documents */
  upsert?: InputMaybe<Array<FooterConfigUpsertWithNestedWhereUniqueInput>>;
};

export type FooterConfigUpdateManyInput = {
  acknowledgementContent?: InputMaybe<Scalars['RichTextAST']>;
  androidAppStoreUrl?: InputMaybe<Scalars['String']>;
  facebookUrl?: InputMaybe<Scalars['String']>;
  helpCentreBox?: InputMaybe<Scalars['RichTextAST']>;
  iOsAppStoreUrl?: InputMaybe<Scalars['String']>;
  instagramUrl?: InputMaybe<Scalars['String']>;
  socialLinksHeadingText?: InputMaybe<Scalars['String']>;
  styleSocietyContent?: InputMaybe<Scalars['String']>;
  styleSocietyHeading?: InputMaybe<Scalars['String']>;
  tiktokUrl?: InputMaybe<Scalars['String']>;
  youtubeUrl?: InputMaybe<Scalars['String']>;
};

export type FooterConfigUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: FooterConfigUpdateManyInput;
  /** Document search */
  where: FooterConfigWhereInput;
};

export type FooterConfigUpdateOneInlineInput = {
  /** Connect existing FooterConfig document */
  connect?: InputMaybe<FooterConfigWhereUniqueInput>;
  /** Create and connect one FooterConfig document */
  create?: InputMaybe<FooterConfigCreateInput>;
  /** Delete currently connected FooterConfig document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected FooterConfig document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single FooterConfig document */
  update?: InputMaybe<FooterConfigUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FooterConfig document */
  upsert?: InputMaybe<FooterConfigUpsertWithNestedWhereUniqueInput>;
};

export type FooterConfigUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: FooterConfigUpdateInput;
  /** Unique document search */
  where: FooterConfigWhereUniqueInput;
};

export type FooterConfigUpsertInput = {
  /** Create document if it didn't exist */
  create: FooterConfigCreateInput;
  /** Update document if it exists */
  update: FooterConfigUpdateInput;
};

export type FooterConfigUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: FooterConfigUpsertInput;
  /** Unique document search */
  where: FooterConfigWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type FooterConfigWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type FooterConfigWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FooterConfigWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FooterConfigWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FooterConfigWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  androidAppStoreUrl?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  androidAppStoreUrl_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  androidAppStoreUrl_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  androidAppStoreUrl_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  androidAppStoreUrl_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  androidAppStoreUrl_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  androidAppStoreUrl_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  androidAppStoreUrl_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  androidAppStoreUrl_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  androidAppStoreUrl_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<FooterConfigWhereStageInput>;
  documentInStages_none?: InputMaybe<FooterConfigWhereStageInput>;
  documentInStages_some?: InputMaybe<FooterConfigWhereStageInput>;
  facebookUrl?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  facebookUrl_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  facebookUrl_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  facebookUrl_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  facebookUrl_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  facebookUrl_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  facebookUrl_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  facebookUrl_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  facebookUrl_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  facebookUrl_starts_with?: InputMaybe<Scalars['String']>;
  /** All values in which the union is empty. */
  footerLinks_empty?: InputMaybe<Scalars['Boolean']>;
  /** Matches if the modular component contains at least one connection to the item provided to the filter */
  footerLinks_some?: InputMaybe<FooterConfigfooterLinksUnionWhereInput>;
  footerLogo?: InputMaybe<AssetWhereInput>;
  iOsAppStoreUrl?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  iOsAppStoreUrl_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  iOsAppStoreUrl_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  iOsAppStoreUrl_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  iOsAppStoreUrl_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  iOsAppStoreUrl_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  iOsAppStoreUrl_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  iOsAppStoreUrl_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  iOsAppStoreUrl_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  iOsAppStoreUrl_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  instagramUrl?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  instagramUrl_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  instagramUrl_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  instagramUrl_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  instagramUrl_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  instagramUrl_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  instagramUrl_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  instagramUrl_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  instagramUrl_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  instagramUrl_starts_with?: InputMaybe<Scalars['String']>;
  legalLinks_every?: InputMaybe<LinkWhereInput>;
  legalLinks_none?: InputMaybe<LinkWhereInput>;
  legalLinks_some?: InputMaybe<LinkWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  paymentLogos_every?: InputMaybe<AssetWhereInput>;
  paymentLogos_none?: InputMaybe<AssetWhereInput>;
  paymentLogos_some?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  socialLinksHeadingText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  socialLinksHeadingText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  socialLinksHeadingText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  socialLinksHeadingText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  socialLinksHeadingText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  socialLinksHeadingText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  socialLinksHeadingText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  socialLinksHeadingText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  socialLinksHeadingText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  socialLinksHeadingText_starts_with?: InputMaybe<Scalars['String']>;
  styleSocietyContent?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  styleSocietyContent_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  styleSocietyContent_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  styleSocietyContent_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  styleSocietyContent_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  styleSocietyContent_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  styleSocietyContent_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  styleSocietyContent_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  styleSocietyContent_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  styleSocietyContent_starts_with?: InputMaybe<Scalars['String']>;
  styleSocietyCta?: InputMaybe<LinkWhereInput>;
  styleSocietyHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  styleSocietyHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  styleSocietyHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  styleSocietyHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  styleSocietyHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  styleSocietyHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  styleSocietyHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  styleSocietyHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  styleSocietyHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  styleSocietyHeading_starts_with?: InputMaybe<Scalars['String']>;
  tiktokUrl?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  tiktokUrl_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  tiktokUrl_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  tiktokUrl_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  tiktokUrl_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  tiktokUrl_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  tiktokUrl_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  tiktokUrl_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  tiktokUrl_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  tiktokUrl_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  websiteConfigs_every?: InputMaybe<WebsiteConfigWhereInput>;
  websiteConfigs_none?: InputMaybe<WebsiteConfigWhereInput>;
  websiteConfigs_some?: InputMaybe<WebsiteConfigWhereInput>;
  youtubeUrl?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  youtubeUrl_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  youtubeUrl_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  youtubeUrl_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  youtubeUrl_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  youtubeUrl_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  youtubeUrl_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  youtubeUrl_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  youtubeUrl_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  youtubeUrl_starts_with?: InputMaybe<Scalars['String']>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type FooterConfigWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FooterConfigWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FooterConfigWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FooterConfigWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<FooterConfigWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References FooterConfig record uniquely */
export type FooterConfigWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
};

export type FooterConfigfooterLinksUnion = LinkCollection;

export type FooterConfigfooterLinksUnionConnectInput = {
  LinkCollection?: InputMaybe<LinkCollectionConnectInput>;
};

export type FooterConfigfooterLinksUnionCreateInput = {
  LinkCollection?: InputMaybe<LinkCollectionCreateInput>;
};

export type FooterConfigfooterLinksUnionCreateManyInlineInput = {
  /** Create and connect multiple existing FooterConfigfooterLinksUnion documents */
  create?: InputMaybe<Array<FooterConfigfooterLinksUnionCreateInput>>;
};

export type FooterConfigfooterLinksUnionCreateOneInlineInput = {
  /** Create and connect one FooterConfigfooterLinksUnion document */
  create?: InputMaybe<FooterConfigfooterLinksUnionCreateInput>;
};

export type FooterConfigfooterLinksUnionCreateWithPositionInput = {
  LinkCollection?: InputMaybe<LinkCollectionCreateWithPositionInput>;
};

export type FooterConfigfooterLinksUnionUpdateInput = {
  LinkCollection?: InputMaybe<LinkCollectionUpdateInput>;
};

export type FooterConfigfooterLinksUnionUpdateManyInlineInput = {
  /** Create and connect multiple FooterConfigfooterLinksUnion component instances */
  create?: InputMaybe<Array<FooterConfigfooterLinksUnionCreateWithPositionInput>>;
  /** Delete multiple FooterConfigfooterLinksUnion documents */
  delete?: InputMaybe<Array<FooterConfigfooterLinksUnionWhereUniqueInput>>;
  /** Update multiple FooterConfigfooterLinksUnion component instances */
  update?: InputMaybe<Array<FooterConfigfooterLinksUnionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple FooterConfigfooterLinksUnion component instances */
  upsert?: InputMaybe<Array<FooterConfigfooterLinksUnionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type FooterConfigfooterLinksUnionUpdateManyWithNestedWhereInput = {
  LinkCollection?: InputMaybe<LinkCollectionUpdateManyWithNestedWhereInput>;
};

export type FooterConfigfooterLinksUnionUpdateOneInlineInput = {
  /** Create and connect one FooterConfigfooterLinksUnion document */
  create?: InputMaybe<FooterConfigfooterLinksUnionCreateInput>;
  /** Delete currently connected FooterConfigfooterLinksUnion document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single FooterConfigfooterLinksUnion document */
  update?: InputMaybe<FooterConfigfooterLinksUnionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FooterConfigfooterLinksUnion document */
  upsert?: InputMaybe<FooterConfigfooterLinksUnionUpsertWithNestedWhereUniqueInput>;
};

export type FooterConfigfooterLinksUnionUpdateWithNestedWhereUniqueAndPositionInput = {
  LinkCollection?: InputMaybe<LinkCollectionUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type FooterConfigfooterLinksUnionUpdateWithNestedWhereUniqueInput = {
  LinkCollection?: InputMaybe<LinkCollectionUpdateWithNestedWhereUniqueInput>;
};

export type FooterConfigfooterLinksUnionUpsertWithNestedWhereUniqueAndPositionInput = {
  LinkCollection?: InputMaybe<LinkCollectionUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type FooterConfigfooterLinksUnionUpsertWithNestedWhereUniqueInput = {
  LinkCollection?: InputMaybe<LinkCollectionUpsertWithNestedWhereUniqueInput>;
};

export type FooterConfigfooterLinksUnionWhereInput = {
  LinkCollection?: InputMaybe<LinkCollectionWhereInput>;
};

export type FooterConfigfooterLinksUnionWhereUniqueInput = {
  LinkCollection?: InputMaybe<LinkCollectionWhereUniqueInput>;
};

export type FullWidthTemplateContent = BrandLogoGrid | EditorialText | FeatureProductCarouselTabbed | HeroBanner | JoinCtApanel | MultiCollectionSlider | OfferTiles | Proposition | SectionBlogListing | SectionCollectionCarousel | SectionCollectionDropDown | SectionFullWidthImage | SectionImageTextOverlay | SectionSearchTermList | SectionSeoText | SectionTextBlock | SectionsAccordion | SocialMediaCtaLarge;

export type FullWidthTemplateContentConnectInput = {
  BrandLogoGrid?: InputMaybe<BrandLogoGridConnectInput>;
  EditorialText?: InputMaybe<EditorialTextConnectInput>;
  FeatureProductCarouselTabbed?: InputMaybe<FeatureProductCarouselTabbedConnectInput>;
  HeroBanner?: InputMaybe<HeroBannerConnectInput>;
  JoinCTApanel?: InputMaybe<JoinCtApanelConnectInput>;
  MultiCollectionSlider?: InputMaybe<MultiCollectionSliderConnectInput>;
  OfferTiles?: InputMaybe<OfferTilesConnectInput>;
  Proposition?: InputMaybe<PropositionConnectInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingConnectInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselConnectInput>;
  SectionCollectionDropDown?: InputMaybe<SectionCollectionDropDownConnectInput>;
  SectionFullWidthImage?: InputMaybe<SectionFullWidthImageConnectInput>;
  SectionImageTextOverlay?: InputMaybe<SectionImageTextOverlayConnectInput>;
  SectionSearchTermList?: InputMaybe<SectionSearchTermListConnectInput>;
  SectionSeoText?: InputMaybe<SectionSeoTextConnectInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockConnectInput>;
  SectionsAccordion?: InputMaybe<SectionsAccordionConnectInput>;
  SocialMediaCtaLarge?: InputMaybe<SocialMediaCtaLargeConnectInput>;
};

export type FullWidthTemplateContentCreateInput = {
  BrandLogoGrid?: InputMaybe<BrandLogoGridCreateInput>;
  EditorialText?: InputMaybe<EditorialTextCreateInput>;
  FeatureProductCarouselTabbed?: InputMaybe<FeatureProductCarouselTabbedCreateInput>;
  HeroBanner?: InputMaybe<HeroBannerCreateInput>;
  JoinCTApanel?: InputMaybe<JoinCtApanelCreateInput>;
  MultiCollectionSlider?: InputMaybe<MultiCollectionSliderCreateInput>;
  OfferTiles?: InputMaybe<OfferTilesCreateInput>;
  Proposition?: InputMaybe<PropositionCreateInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingCreateInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselCreateInput>;
  SectionCollectionDropDown?: InputMaybe<SectionCollectionDropDownCreateInput>;
  SectionFullWidthImage?: InputMaybe<SectionFullWidthImageCreateInput>;
  SectionImageTextOverlay?: InputMaybe<SectionImageTextOverlayCreateInput>;
  SectionSearchTermList?: InputMaybe<SectionSearchTermListCreateInput>;
  SectionSeoText?: InputMaybe<SectionSeoTextCreateInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockCreateInput>;
  SectionsAccordion?: InputMaybe<SectionsAccordionCreateInput>;
  SocialMediaCtaLarge?: InputMaybe<SocialMediaCtaLargeCreateInput>;
};

export type FullWidthTemplateContentCreateManyInlineInput = {
  /** Connect multiple existing FullWidthTemplateContent documents */
  connect?: InputMaybe<Array<FullWidthTemplateContentWhereUniqueInput>>;
  /** Create and connect multiple existing FullWidthTemplateContent documents */
  create?: InputMaybe<Array<FullWidthTemplateContentCreateInput>>;
};

export type FullWidthTemplateContentCreateOneInlineInput = {
  /** Connect one existing FullWidthTemplateContent document */
  connect?: InputMaybe<FullWidthTemplateContentWhereUniqueInput>;
  /** Create and connect one FullWidthTemplateContent document */
  create?: InputMaybe<FullWidthTemplateContentCreateInput>;
};

export type FullWidthTemplateContentUpdateInput = {
  BrandLogoGrid?: InputMaybe<BrandLogoGridUpdateInput>;
  EditorialText?: InputMaybe<EditorialTextUpdateInput>;
  FeatureProductCarouselTabbed?: InputMaybe<FeatureProductCarouselTabbedUpdateInput>;
  HeroBanner?: InputMaybe<HeroBannerUpdateInput>;
  JoinCTApanel?: InputMaybe<JoinCtApanelUpdateInput>;
  MultiCollectionSlider?: InputMaybe<MultiCollectionSliderUpdateInput>;
  OfferTiles?: InputMaybe<OfferTilesUpdateInput>;
  Proposition?: InputMaybe<PropositionUpdateInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingUpdateInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselUpdateInput>;
  SectionCollectionDropDown?: InputMaybe<SectionCollectionDropDownUpdateInput>;
  SectionFullWidthImage?: InputMaybe<SectionFullWidthImageUpdateInput>;
  SectionImageTextOverlay?: InputMaybe<SectionImageTextOverlayUpdateInput>;
  SectionSearchTermList?: InputMaybe<SectionSearchTermListUpdateInput>;
  SectionSeoText?: InputMaybe<SectionSeoTextUpdateInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockUpdateInput>;
  SectionsAccordion?: InputMaybe<SectionsAccordionUpdateInput>;
  SocialMediaCtaLarge?: InputMaybe<SocialMediaCtaLargeUpdateInput>;
};

export type FullWidthTemplateContentUpdateManyInlineInput = {
  /** Connect multiple existing FullWidthTemplateContent documents */
  connect?: InputMaybe<Array<FullWidthTemplateContentConnectInput>>;
  /** Create and connect multiple FullWidthTemplateContent documents */
  create?: InputMaybe<Array<FullWidthTemplateContentCreateInput>>;
  /** Delete multiple FullWidthTemplateContent documents */
  delete?: InputMaybe<Array<FullWidthTemplateContentWhereUniqueInput>>;
  /** Disconnect multiple FullWidthTemplateContent documents */
  disconnect?: InputMaybe<Array<FullWidthTemplateContentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing FullWidthTemplateContent documents */
  set?: InputMaybe<Array<FullWidthTemplateContentWhereUniqueInput>>;
  /** Update multiple FullWidthTemplateContent documents */
  update?: InputMaybe<Array<FullWidthTemplateContentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple FullWidthTemplateContent documents */
  upsert?: InputMaybe<Array<FullWidthTemplateContentUpsertWithNestedWhereUniqueInput>>;
};

export type FullWidthTemplateContentUpdateManyWithNestedWhereInput = {
  BrandLogoGrid?: InputMaybe<BrandLogoGridUpdateManyWithNestedWhereInput>;
  EditorialText?: InputMaybe<EditorialTextUpdateManyWithNestedWhereInput>;
  FeatureProductCarouselTabbed?: InputMaybe<FeatureProductCarouselTabbedUpdateManyWithNestedWhereInput>;
  HeroBanner?: InputMaybe<HeroBannerUpdateManyWithNestedWhereInput>;
  JoinCTApanel?: InputMaybe<JoinCtApanelUpdateManyWithNestedWhereInput>;
  MultiCollectionSlider?: InputMaybe<MultiCollectionSliderUpdateManyWithNestedWhereInput>;
  OfferTiles?: InputMaybe<OfferTilesUpdateManyWithNestedWhereInput>;
  Proposition?: InputMaybe<PropositionUpdateManyWithNestedWhereInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingUpdateManyWithNestedWhereInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselUpdateManyWithNestedWhereInput>;
  SectionCollectionDropDown?: InputMaybe<SectionCollectionDropDownUpdateManyWithNestedWhereInput>;
  SectionFullWidthImage?: InputMaybe<SectionFullWidthImageUpdateManyWithNestedWhereInput>;
  SectionImageTextOverlay?: InputMaybe<SectionImageTextOverlayUpdateManyWithNestedWhereInput>;
  SectionSearchTermList?: InputMaybe<SectionSearchTermListUpdateManyWithNestedWhereInput>;
  SectionSeoText?: InputMaybe<SectionSeoTextUpdateManyWithNestedWhereInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockUpdateManyWithNestedWhereInput>;
  SectionsAccordion?: InputMaybe<SectionsAccordionUpdateManyWithNestedWhereInput>;
  SocialMediaCtaLarge?: InputMaybe<SocialMediaCtaLargeUpdateManyWithNestedWhereInput>;
};

export type FullWidthTemplateContentUpdateOneInlineInput = {
  /** Connect existing FullWidthTemplateContent document */
  connect?: InputMaybe<FullWidthTemplateContentWhereUniqueInput>;
  /** Create and connect one FullWidthTemplateContent document */
  create?: InputMaybe<FullWidthTemplateContentCreateInput>;
  /** Delete currently connected FullWidthTemplateContent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected FullWidthTemplateContent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single FullWidthTemplateContent document */
  update?: InputMaybe<FullWidthTemplateContentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single FullWidthTemplateContent document */
  upsert?: InputMaybe<FullWidthTemplateContentUpsertWithNestedWhereUniqueInput>;
};

export type FullWidthTemplateContentUpdateWithNestedWhereUniqueInput = {
  BrandLogoGrid?: InputMaybe<BrandLogoGridUpdateWithNestedWhereUniqueInput>;
  EditorialText?: InputMaybe<EditorialTextUpdateWithNestedWhereUniqueInput>;
  FeatureProductCarouselTabbed?: InputMaybe<FeatureProductCarouselTabbedUpdateWithNestedWhereUniqueInput>;
  HeroBanner?: InputMaybe<HeroBannerUpdateWithNestedWhereUniqueInput>;
  JoinCTApanel?: InputMaybe<JoinCtApanelUpdateWithNestedWhereUniqueInput>;
  MultiCollectionSlider?: InputMaybe<MultiCollectionSliderUpdateWithNestedWhereUniqueInput>;
  OfferTiles?: InputMaybe<OfferTilesUpdateWithNestedWhereUniqueInput>;
  Proposition?: InputMaybe<PropositionUpdateWithNestedWhereUniqueInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingUpdateWithNestedWhereUniqueInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselUpdateWithNestedWhereUniqueInput>;
  SectionCollectionDropDown?: InputMaybe<SectionCollectionDropDownUpdateWithNestedWhereUniqueInput>;
  SectionFullWidthImage?: InputMaybe<SectionFullWidthImageUpdateWithNestedWhereUniqueInput>;
  SectionImageTextOverlay?: InputMaybe<SectionImageTextOverlayUpdateWithNestedWhereUniqueInput>;
  SectionSearchTermList?: InputMaybe<SectionSearchTermListUpdateWithNestedWhereUniqueInput>;
  SectionSeoText?: InputMaybe<SectionSeoTextUpdateWithNestedWhereUniqueInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockUpdateWithNestedWhereUniqueInput>;
  SectionsAccordion?: InputMaybe<SectionsAccordionUpdateWithNestedWhereUniqueInput>;
  SocialMediaCtaLarge?: InputMaybe<SocialMediaCtaLargeUpdateWithNestedWhereUniqueInput>;
};

export type FullWidthTemplateContentUpsertWithNestedWhereUniqueInput = {
  BrandLogoGrid?: InputMaybe<BrandLogoGridUpsertWithNestedWhereUniqueInput>;
  EditorialText?: InputMaybe<EditorialTextUpsertWithNestedWhereUniqueInput>;
  FeatureProductCarouselTabbed?: InputMaybe<FeatureProductCarouselTabbedUpsertWithNestedWhereUniqueInput>;
  HeroBanner?: InputMaybe<HeroBannerUpsertWithNestedWhereUniqueInput>;
  JoinCTApanel?: InputMaybe<JoinCtApanelUpsertWithNestedWhereUniqueInput>;
  MultiCollectionSlider?: InputMaybe<MultiCollectionSliderUpsertWithNestedWhereUniqueInput>;
  OfferTiles?: InputMaybe<OfferTilesUpsertWithNestedWhereUniqueInput>;
  Proposition?: InputMaybe<PropositionUpsertWithNestedWhereUniqueInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingUpsertWithNestedWhereUniqueInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselUpsertWithNestedWhereUniqueInput>;
  SectionCollectionDropDown?: InputMaybe<SectionCollectionDropDownUpsertWithNestedWhereUniqueInput>;
  SectionFullWidthImage?: InputMaybe<SectionFullWidthImageUpsertWithNestedWhereUniqueInput>;
  SectionImageTextOverlay?: InputMaybe<SectionImageTextOverlayUpsertWithNestedWhereUniqueInput>;
  SectionSearchTermList?: InputMaybe<SectionSearchTermListUpsertWithNestedWhereUniqueInput>;
  SectionSeoText?: InputMaybe<SectionSeoTextUpsertWithNestedWhereUniqueInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockUpsertWithNestedWhereUniqueInput>;
  SectionsAccordion?: InputMaybe<SectionsAccordionUpsertWithNestedWhereUniqueInput>;
  SocialMediaCtaLarge?: InputMaybe<SocialMediaCtaLargeUpsertWithNestedWhereUniqueInput>;
};

export type FullWidthTemplateContentWhereInput = {
  BrandLogoGrid?: InputMaybe<BrandLogoGridWhereInput>;
  EditorialText?: InputMaybe<EditorialTextWhereInput>;
  FeatureProductCarouselTabbed?: InputMaybe<FeatureProductCarouselTabbedWhereInput>;
  HeroBanner?: InputMaybe<HeroBannerWhereInput>;
  JoinCTApanel?: InputMaybe<JoinCtApanelWhereInput>;
  MultiCollectionSlider?: InputMaybe<MultiCollectionSliderWhereInput>;
  OfferTiles?: InputMaybe<OfferTilesWhereInput>;
  Proposition?: InputMaybe<PropositionWhereInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingWhereInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselWhereInput>;
  SectionCollectionDropDown?: InputMaybe<SectionCollectionDropDownWhereInput>;
  SectionFullWidthImage?: InputMaybe<SectionFullWidthImageWhereInput>;
  SectionImageTextOverlay?: InputMaybe<SectionImageTextOverlayWhereInput>;
  SectionSearchTermList?: InputMaybe<SectionSearchTermListWhereInput>;
  SectionSeoText?: InputMaybe<SectionSeoTextWhereInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockWhereInput>;
  SectionsAccordion?: InputMaybe<SectionsAccordionWhereInput>;
  SocialMediaCtaLarge?: InputMaybe<SocialMediaCtaLargeWhereInput>;
};

export type FullWidthTemplateContentWhereUniqueInput = {
  BrandLogoGrid?: InputMaybe<BrandLogoGridWhereUniqueInput>;
  EditorialText?: InputMaybe<EditorialTextWhereUniqueInput>;
  FeatureProductCarouselTabbed?: InputMaybe<FeatureProductCarouselTabbedWhereUniqueInput>;
  HeroBanner?: InputMaybe<HeroBannerWhereUniqueInput>;
  JoinCTApanel?: InputMaybe<JoinCtApanelWhereUniqueInput>;
  MultiCollectionSlider?: InputMaybe<MultiCollectionSliderWhereUniqueInput>;
  OfferTiles?: InputMaybe<OfferTilesWhereUniqueInput>;
  Proposition?: InputMaybe<PropositionWhereUniqueInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingWhereUniqueInput>;
  SectionCollectionCarousel?: InputMaybe<SectionCollectionCarouselWhereUniqueInput>;
  SectionCollectionDropDown?: InputMaybe<SectionCollectionDropDownWhereUniqueInput>;
  SectionFullWidthImage?: InputMaybe<SectionFullWidthImageWhereUniqueInput>;
  SectionImageTextOverlay?: InputMaybe<SectionImageTextOverlayWhereUniqueInput>;
  SectionSearchTermList?: InputMaybe<SectionSearchTermListWhereUniqueInput>;
  SectionSeoText?: InputMaybe<SectionSeoTextWhereUniqueInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockWhereUniqueInput>;
  SectionsAccordion?: InputMaybe<SectionsAccordionWhereUniqueInput>;
  SocialMediaCtaLarge?: InputMaybe<SocialMediaCtaLargeWhereUniqueInput>;
};

export type HeaderConfig = Node & {
  __typename?: 'HeaderConfig';
  adminTitle: Scalars['String'];
  bookAppointmentUrl?: Maybe<Scalars['String']>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<HeaderConfig>;
  /** List of HeaderConfig versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  logo: Asset;
  promoBarBackgroundColour?: Maybe<Color>;
  promoBarContent?: Maybe<Scalars['String']>;
  promoBarExpiry?: Maybe<Scalars['DateTime']>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  secondaryMenuLinks: Array<Link>;
  /** System stage field */
  stage: Stage;
  styleSocietyContent?: Maybe<Scalars['String']>;
  styleSocietyLinks: Array<Link>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  utilMenuLinks: Array<Link>;
  websiteConfigs: Array<WebsiteConfig>;
};


export type HeaderConfigCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type HeaderConfigDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type HeaderConfigHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type HeaderConfigLogoArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type HeaderConfigPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type HeaderConfigScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type HeaderConfigSecondaryMenuLinksArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<LinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<LinkWhereInput>;
};


export type HeaderConfigStyleSocietyLinksArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<LinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<LinkWhereInput>;
};


export type HeaderConfigUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type HeaderConfigUtilMenuLinksArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<LinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<LinkWhereInput>;
};


export type HeaderConfigWebsiteConfigsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<WebsiteConfigOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WebsiteConfigWhereInput>;
};

export type HeaderConfigConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: HeaderConfigWhereUniqueInput;
};

/** A connection to a list of items. */
export type HeaderConfigConnection = {
  __typename?: 'HeaderConfigConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<HeaderConfigEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type HeaderConfigCreateInput = {
  adminTitle: Scalars['String'];
  bookAppointmentUrl?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  logo: AssetCreateOneInlineInput;
  promoBarBackgroundColour?: InputMaybe<ColorInput>;
  promoBarContent?: InputMaybe<Scalars['String']>;
  promoBarExpiry?: InputMaybe<Scalars['DateTime']>;
  secondaryMenuLinks?: InputMaybe<LinkCreateManyInlineInput>;
  styleSocietyContent?: InputMaybe<Scalars['String']>;
  styleSocietyLinks?: InputMaybe<LinkCreateManyInlineInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  utilMenuLinks?: InputMaybe<LinkCreateManyInlineInput>;
  websiteConfigs?: InputMaybe<WebsiteConfigCreateManyInlineInput>;
};

export type HeaderConfigCreateManyInlineInput = {
  /** Connect multiple existing HeaderConfig documents */
  connect?: InputMaybe<Array<HeaderConfigWhereUniqueInput>>;
  /** Create and connect multiple existing HeaderConfig documents */
  create?: InputMaybe<Array<HeaderConfigCreateInput>>;
};

export type HeaderConfigCreateOneInlineInput = {
  /** Connect one existing HeaderConfig document */
  connect?: InputMaybe<HeaderConfigWhereUniqueInput>;
  /** Create and connect one HeaderConfig document */
  create?: InputMaybe<HeaderConfigCreateInput>;
};

/** An edge in a connection. */
export type HeaderConfigEdge = {
  __typename?: 'HeaderConfigEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: HeaderConfig;
};

/** Identifies documents */
export type HeaderConfigManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<HeaderConfigWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<HeaderConfigWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<HeaderConfigWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  bookAppointmentUrl?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  bookAppointmentUrl_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  bookAppointmentUrl_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  bookAppointmentUrl_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  bookAppointmentUrl_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  bookAppointmentUrl_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  bookAppointmentUrl_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  bookAppointmentUrl_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  bookAppointmentUrl_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  bookAppointmentUrl_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<HeaderConfigWhereStageInput>;
  documentInStages_none?: InputMaybe<HeaderConfigWhereStageInput>;
  documentInStages_some?: InputMaybe<HeaderConfigWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  logo?: InputMaybe<AssetWhereInput>;
  promoBarContent?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  promoBarContent_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  promoBarContent_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  promoBarContent_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  promoBarContent_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  promoBarContent_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  promoBarContent_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  promoBarContent_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  promoBarContent_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  promoBarContent_starts_with?: InputMaybe<Scalars['String']>;
  promoBarExpiry?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  promoBarExpiry_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  promoBarExpiry_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  promoBarExpiry_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  promoBarExpiry_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  promoBarExpiry_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  promoBarExpiry_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  promoBarExpiry_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  secondaryMenuLinks_every?: InputMaybe<LinkWhereInput>;
  secondaryMenuLinks_none?: InputMaybe<LinkWhereInput>;
  secondaryMenuLinks_some?: InputMaybe<LinkWhereInput>;
  styleSocietyContent?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  styleSocietyContent_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  styleSocietyContent_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  styleSocietyContent_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  styleSocietyContent_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  styleSocietyContent_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  styleSocietyContent_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  styleSocietyContent_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  styleSocietyContent_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  styleSocietyContent_starts_with?: InputMaybe<Scalars['String']>;
  styleSocietyLinks_every?: InputMaybe<LinkWhereInput>;
  styleSocietyLinks_none?: InputMaybe<LinkWhereInput>;
  styleSocietyLinks_some?: InputMaybe<LinkWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  utilMenuLinks_every?: InputMaybe<LinkWhereInput>;
  utilMenuLinks_none?: InputMaybe<LinkWhereInput>;
  utilMenuLinks_some?: InputMaybe<LinkWhereInput>;
  websiteConfigs_every?: InputMaybe<WebsiteConfigWhereInput>;
  websiteConfigs_none?: InputMaybe<WebsiteConfigWhereInput>;
  websiteConfigs_some?: InputMaybe<WebsiteConfigWhereInput>;
};

export enum HeaderConfigOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  BookAppointmentUrlAsc = 'bookAppointmentUrl_ASC',
  BookAppointmentUrlDesc = 'bookAppointmentUrl_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PromoBarContentAsc = 'promoBarContent_ASC',
  PromoBarContentDesc = 'promoBarContent_DESC',
  PromoBarExpiryAsc = 'promoBarExpiry_ASC',
  PromoBarExpiryDesc = 'promoBarExpiry_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  StyleSocietyContentAsc = 'styleSocietyContent_ASC',
  StyleSocietyContentDesc = 'styleSocietyContent_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type HeaderConfigUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  bookAppointmentUrl?: InputMaybe<Scalars['String']>;
  logo?: InputMaybe<AssetUpdateOneInlineInput>;
  promoBarBackgroundColour?: InputMaybe<ColorInput>;
  promoBarContent?: InputMaybe<Scalars['String']>;
  promoBarExpiry?: InputMaybe<Scalars['DateTime']>;
  secondaryMenuLinks?: InputMaybe<LinkUpdateManyInlineInput>;
  styleSocietyContent?: InputMaybe<Scalars['String']>;
  styleSocietyLinks?: InputMaybe<LinkUpdateManyInlineInput>;
  utilMenuLinks?: InputMaybe<LinkUpdateManyInlineInput>;
  websiteConfigs?: InputMaybe<WebsiteConfigUpdateManyInlineInput>;
};

export type HeaderConfigUpdateManyInlineInput = {
  /** Connect multiple existing HeaderConfig documents */
  connect?: InputMaybe<Array<HeaderConfigConnectInput>>;
  /** Create and connect multiple HeaderConfig documents */
  create?: InputMaybe<Array<HeaderConfigCreateInput>>;
  /** Delete multiple HeaderConfig documents */
  delete?: InputMaybe<Array<HeaderConfigWhereUniqueInput>>;
  /** Disconnect multiple HeaderConfig documents */
  disconnect?: InputMaybe<Array<HeaderConfigWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing HeaderConfig documents */
  set?: InputMaybe<Array<HeaderConfigWhereUniqueInput>>;
  /** Update multiple HeaderConfig documents */
  update?: InputMaybe<Array<HeaderConfigUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple HeaderConfig documents */
  upsert?: InputMaybe<Array<HeaderConfigUpsertWithNestedWhereUniqueInput>>;
};

export type HeaderConfigUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  bookAppointmentUrl?: InputMaybe<Scalars['String']>;
  promoBarBackgroundColour?: InputMaybe<ColorInput>;
  promoBarContent?: InputMaybe<Scalars['String']>;
  promoBarExpiry?: InputMaybe<Scalars['DateTime']>;
  styleSocietyContent?: InputMaybe<Scalars['String']>;
};

export type HeaderConfigUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: HeaderConfigUpdateManyInput;
  /** Document search */
  where: HeaderConfigWhereInput;
};

export type HeaderConfigUpdateOneInlineInput = {
  /** Connect existing HeaderConfig document */
  connect?: InputMaybe<HeaderConfigWhereUniqueInput>;
  /** Create and connect one HeaderConfig document */
  create?: InputMaybe<HeaderConfigCreateInput>;
  /** Delete currently connected HeaderConfig document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected HeaderConfig document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single HeaderConfig document */
  update?: InputMaybe<HeaderConfigUpdateWithNestedWhereUniqueInput>;
  /** Upsert single HeaderConfig document */
  upsert?: InputMaybe<HeaderConfigUpsertWithNestedWhereUniqueInput>;
};

export type HeaderConfigUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: HeaderConfigUpdateInput;
  /** Unique document search */
  where: HeaderConfigWhereUniqueInput;
};

export type HeaderConfigUpsertInput = {
  /** Create document if it didn't exist */
  create: HeaderConfigCreateInput;
  /** Update document if it exists */
  update: HeaderConfigUpdateInput;
};

export type HeaderConfigUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: HeaderConfigUpsertInput;
  /** Unique document search */
  where: HeaderConfigWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type HeaderConfigWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type HeaderConfigWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<HeaderConfigWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<HeaderConfigWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<HeaderConfigWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  bookAppointmentUrl?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  bookAppointmentUrl_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  bookAppointmentUrl_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  bookAppointmentUrl_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  bookAppointmentUrl_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  bookAppointmentUrl_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  bookAppointmentUrl_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  bookAppointmentUrl_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  bookAppointmentUrl_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  bookAppointmentUrl_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<HeaderConfigWhereStageInput>;
  documentInStages_none?: InputMaybe<HeaderConfigWhereStageInput>;
  documentInStages_some?: InputMaybe<HeaderConfigWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  logo?: InputMaybe<AssetWhereInput>;
  promoBarContent?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  promoBarContent_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  promoBarContent_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  promoBarContent_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  promoBarContent_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  promoBarContent_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  promoBarContent_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  promoBarContent_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  promoBarContent_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  promoBarContent_starts_with?: InputMaybe<Scalars['String']>;
  promoBarExpiry?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  promoBarExpiry_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  promoBarExpiry_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  promoBarExpiry_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  promoBarExpiry_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  promoBarExpiry_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  promoBarExpiry_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  promoBarExpiry_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  secondaryMenuLinks_every?: InputMaybe<LinkWhereInput>;
  secondaryMenuLinks_none?: InputMaybe<LinkWhereInput>;
  secondaryMenuLinks_some?: InputMaybe<LinkWhereInput>;
  styleSocietyContent?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  styleSocietyContent_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  styleSocietyContent_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  styleSocietyContent_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  styleSocietyContent_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  styleSocietyContent_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  styleSocietyContent_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  styleSocietyContent_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  styleSocietyContent_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  styleSocietyContent_starts_with?: InputMaybe<Scalars['String']>;
  styleSocietyLinks_every?: InputMaybe<LinkWhereInput>;
  styleSocietyLinks_none?: InputMaybe<LinkWhereInput>;
  styleSocietyLinks_some?: InputMaybe<LinkWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  utilMenuLinks_every?: InputMaybe<LinkWhereInput>;
  utilMenuLinks_none?: InputMaybe<LinkWhereInput>;
  utilMenuLinks_some?: InputMaybe<LinkWhereInput>;
  websiteConfigs_every?: InputMaybe<WebsiteConfigWhereInput>;
  websiteConfigs_none?: InputMaybe<WebsiteConfigWhereInput>;
  websiteConfigs_some?: InputMaybe<WebsiteConfigWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type HeaderConfigWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<HeaderConfigWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<HeaderConfigWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<HeaderConfigWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<HeaderConfigWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References HeaderConfig record uniquely */
export type HeaderConfigWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Used for page hero and other full-width blocks of image/text */
export type HeroBanner = Node & {
  __typename?: 'HeroBanner';
  collectionPages: Array<CollectionPage>;
  configSearches: Array<ConfigSearch>;
  contentColour?: Maybe<Color>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  ctaButtons: Array<Cta>;
  description?: Maybe<RichText>;
  desktopImage: Asset;
  /** Get the document in other stages */
  documentInStages: Array<HeroBanner>;
  fullWidthTemplates: Array<CmsPage>;
  heading?: Maybe<Scalars['String']>;
  /** List of HeroBanner versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  layout?: Maybe<HeroLayout>;
  mobileImage?: Maybe<Asset>;
  name?: Maybe<Scalars['String']>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** Show page breadcrumbs at the top of the text block? */
  showBreadcrumbs?: Maybe<Scalars['Boolean']>;
  /** System stage field */
  stage: Stage;
  subtext?: Maybe<Scalars['String']>;
  textBlockLayout?: Maybe<HeroTextBlockLayout>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


/** Used for page hero and other full-width blocks of image/text */
export type HeroBannerCollectionPagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CollectionPageWhereInput>;
};


/** Used for page hero and other full-width blocks of image/text */
export type HeroBannerConfigSearchesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigSearchWhereInput>;
};


/** Used for page hero and other full-width blocks of image/text */
export type HeroBannerCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Used for page hero and other full-width blocks of image/text */
export type HeroBannerCtaButtonsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<CtaOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CtaWhereInput>;
};


/** Used for page hero and other full-width blocks of image/text */
export type HeroBannerDesktopImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Used for page hero and other full-width blocks of image/text */
export type HeroBannerDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


/** Used for page hero and other full-width blocks of image/text */
export type HeroBannerFullWidthTemplatesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsPageWhereInput>;
};


/** Used for page hero and other full-width blocks of image/text */
export type HeroBannerHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


/** Used for page hero and other full-width blocks of image/text */
export type HeroBannerMobileImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Used for page hero and other full-width blocks of image/text */
export type HeroBannerPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Used for page hero and other full-width blocks of image/text */
export type HeroBannerScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


/** Used for page hero and other full-width blocks of image/text */
export type HeroBannerUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type HeroBannerConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: HeroBannerWhereUniqueInput;
};

/** A connection to a list of items. */
export type HeroBannerConnection = {
  __typename?: 'HeroBannerConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<HeroBannerEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type HeroBannerCreateInput = {
  cli2j8y6j0q7o01ule87256n5?: InputMaybe<ConfigCareerCreateManyInlineInput>;
  cli44seq81xbi01t7ewtef106?: InputMaybe<ConfigSalonMenuCreateManyInlineInput>;
  collectionPages?: InputMaybe<CollectionPageCreateManyInlineInput>;
  configSearches?: InputMaybe<ConfigSearchCreateManyInlineInput>;
  contentColour?: InputMaybe<ColorInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  ctaButtons?: InputMaybe<CtaCreateManyInlineInput>;
  description?: InputMaybe<Scalars['RichTextAST']>;
  desktopImage: AssetCreateOneInlineInput;
  fullWidthTemplates?: InputMaybe<CmsPageCreateManyInlineInput>;
  heading?: InputMaybe<Scalars['String']>;
  layout?: InputMaybe<HeroLayout>;
  mobileImage?: InputMaybe<AssetCreateOneInlineInput>;
  name?: InputMaybe<Scalars['String']>;
  showBreadcrumbs?: InputMaybe<Scalars['Boolean']>;
  subtext?: InputMaybe<Scalars['String']>;
  textBlockLayout?: InputMaybe<HeroTextBlockLayout>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type HeroBannerCreateManyInlineInput = {
  /** Connect multiple existing HeroBanner documents */
  connect?: InputMaybe<Array<HeroBannerWhereUniqueInput>>;
  /** Create and connect multiple existing HeroBanner documents */
  create?: InputMaybe<Array<HeroBannerCreateInput>>;
};

export type HeroBannerCreateOneInlineInput = {
  /** Connect one existing HeroBanner document */
  connect?: InputMaybe<HeroBannerWhereUniqueInput>;
  /** Create and connect one HeroBanner document */
  create?: InputMaybe<HeroBannerCreateInput>;
};

/** An edge in a connection. */
export type HeroBannerEdge = {
  __typename?: 'HeroBannerEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: HeroBanner;
};

/** Identifies documents */
export type HeroBannerManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<HeroBannerWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<HeroBannerWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<HeroBannerWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  collectionPages_every?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_none?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_some?: InputMaybe<CollectionPageWhereInput>;
  configSearches_every?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_none?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_some?: InputMaybe<ConfigSearchWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  ctaButtons_every?: InputMaybe<CtaWhereInput>;
  ctaButtons_none?: InputMaybe<CtaWhereInput>;
  ctaButtons_some?: InputMaybe<CtaWhereInput>;
  desktopImage?: InputMaybe<AssetWhereInput>;
  documentInStages_every?: InputMaybe<HeroBannerWhereStageInput>;
  documentInStages_none?: InputMaybe<HeroBannerWhereStageInput>;
  documentInStages_some?: InputMaybe<HeroBannerWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  heading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  heading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  heading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  heading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  heading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  heading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  heading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  heading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  heading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  heading_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  layout?: InputMaybe<HeroLayout>;
  /** All values that are contained in given list. */
  layout_in?: InputMaybe<Array<InputMaybe<HeroLayout>>>;
  /** Any other value that exists and is not equal to the given value. */
  layout_not?: InputMaybe<HeroLayout>;
  /** All values that are not contained in given list. */
  layout_not_in?: InputMaybe<Array<InputMaybe<HeroLayout>>>;
  mobileImage?: InputMaybe<AssetWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  showBreadcrumbs?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  showBreadcrumbs_not?: InputMaybe<Scalars['Boolean']>;
  subtext?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subtext_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subtext_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subtext_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subtext_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subtext_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subtext_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subtext_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subtext_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subtext_starts_with?: InputMaybe<Scalars['String']>;
  textBlockLayout?: InputMaybe<HeroTextBlockLayout>;
  /** All values that are contained in given list. */
  textBlockLayout_in?: InputMaybe<Array<InputMaybe<HeroTextBlockLayout>>>;
  /** Any other value that exists and is not equal to the given value. */
  textBlockLayout_not?: InputMaybe<HeroTextBlockLayout>;
  /** All values that are not contained in given list. */
  textBlockLayout_not_in?: InputMaybe<Array<InputMaybe<HeroTextBlockLayout>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum HeroBannerOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  HeadingAsc = 'heading_ASC',
  HeadingDesc = 'heading_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LayoutAsc = 'layout_ASC',
  LayoutDesc = 'layout_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  ShowBreadcrumbsAsc = 'showBreadcrumbs_ASC',
  ShowBreadcrumbsDesc = 'showBreadcrumbs_DESC',
  SubtextAsc = 'subtext_ASC',
  SubtextDesc = 'subtext_DESC',
  TextBlockLayoutAsc = 'textBlockLayout_ASC',
  TextBlockLayoutDesc = 'textBlockLayout_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type HeroBannerUpdateInput = {
  cli2j8y6j0q7o01ule87256n5?: InputMaybe<ConfigCareerUpdateManyInlineInput>;
  cli44seq81xbi01t7ewtef106?: InputMaybe<ConfigSalonMenuUpdateManyInlineInput>;
  collectionPages?: InputMaybe<CollectionPageUpdateManyInlineInput>;
  configSearches?: InputMaybe<ConfigSearchUpdateManyInlineInput>;
  contentColour?: InputMaybe<ColorInput>;
  ctaButtons?: InputMaybe<CtaUpdateManyInlineInput>;
  description?: InputMaybe<Scalars['RichTextAST']>;
  desktopImage?: InputMaybe<AssetUpdateOneInlineInput>;
  fullWidthTemplates?: InputMaybe<CmsPageUpdateManyInlineInput>;
  heading?: InputMaybe<Scalars['String']>;
  layout?: InputMaybe<HeroLayout>;
  mobileImage?: InputMaybe<AssetUpdateOneInlineInput>;
  name?: InputMaybe<Scalars['String']>;
  showBreadcrumbs?: InputMaybe<Scalars['Boolean']>;
  subtext?: InputMaybe<Scalars['String']>;
  textBlockLayout?: InputMaybe<HeroTextBlockLayout>;
};

export type HeroBannerUpdateManyInlineInput = {
  /** Connect multiple existing HeroBanner documents */
  connect?: InputMaybe<Array<HeroBannerConnectInput>>;
  /** Create and connect multiple HeroBanner documents */
  create?: InputMaybe<Array<HeroBannerCreateInput>>;
  /** Delete multiple HeroBanner documents */
  delete?: InputMaybe<Array<HeroBannerWhereUniqueInput>>;
  /** Disconnect multiple HeroBanner documents */
  disconnect?: InputMaybe<Array<HeroBannerWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing HeroBanner documents */
  set?: InputMaybe<Array<HeroBannerWhereUniqueInput>>;
  /** Update multiple HeroBanner documents */
  update?: InputMaybe<Array<HeroBannerUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple HeroBanner documents */
  upsert?: InputMaybe<Array<HeroBannerUpsertWithNestedWhereUniqueInput>>;
};

export type HeroBannerUpdateManyInput = {
  contentColour?: InputMaybe<ColorInput>;
  description?: InputMaybe<Scalars['RichTextAST']>;
  heading?: InputMaybe<Scalars['String']>;
  layout?: InputMaybe<HeroLayout>;
  name?: InputMaybe<Scalars['String']>;
  showBreadcrumbs?: InputMaybe<Scalars['Boolean']>;
  subtext?: InputMaybe<Scalars['String']>;
  textBlockLayout?: InputMaybe<HeroTextBlockLayout>;
};

export type HeroBannerUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: HeroBannerUpdateManyInput;
  /** Document search */
  where: HeroBannerWhereInput;
};

export type HeroBannerUpdateOneInlineInput = {
  /** Connect existing HeroBanner document */
  connect?: InputMaybe<HeroBannerWhereUniqueInput>;
  /** Create and connect one HeroBanner document */
  create?: InputMaybe<HeroBannerCreateInput>;
  /** Delete currently connected HeroBanner document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected HeroBanner document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single HeroBanner document */
  update?: InputMaybe<HeroBannerUpdateWithNestedWhereUniqueInput>;
  /** Upsert single HeroBanner document */
  upsert?: InputMaybe<HeroBannerUpsertWithNestedWhereUniqueInput>;
};

export type HeroBannerUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: HeroBannerUpdateInput;
  /** Unique document search */
  where: HeroBannerWhereUniqueInput;
};

export type HeroBannerUpsertInput = {
  /** Create document if it didn't exist */
  create: HeroBannerCreateInput;
  /** Update document if it exists */
  update: HeroBannerUpdateInput;
};

export type HeroBannerUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: HeroBannerUpsertInput;
  /** Unique document search */
  where: HeroBannerWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type HeroBannerWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type HeroBannerWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<HeroBannerWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<HeroBannerWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<HeroBannerWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  collectionPages_every?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_none?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_some?: InputMaybe<CollectionPageWhereInput>;
  configSearches_every?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_none?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_some?: InputMaybe<ConfigSearchWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  ctaButtons_every?: InputMaybe<CtaWhereInput>;
  ctaButtons_none?: InputMaybe<CtaWhereInput>;
  ctaButtons_some?: InputMaybe<CtaWhereInput>;
  desktopImage?: InputMaybe<AssetWhereInput>;
  documentInStages_every?: InputMaybe<HeroBannerWhereStageInput>;
  documentInStages_none?: InputMaybe<HeroBannerWhereStageInput>;
  documentInStages_some?: InputMaybe<HeroBannerWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  heading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  heading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  heading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  heading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  heading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  heading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  heading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  heading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  heading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  heading_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  layout?: InputMaybe<HeroLayout>;
  /** All values that are contained in given list. */
  layout_in?: InputMaybe<Array<InputMaybe<HeroLayout>>>;
  /** Any other value that exists and is not equal to the given value. */
  layout_not?: InputMaybe<HeroLayout>;
  /** All values that are not contained in given list. */
  layout_not_in?: InputMaybe<Array<InputMaybe<HeroLayout>>>;
  mobileImage?: InputMaybe<AssetWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  showBreadcrumbs?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  showBreadcrumbs_not?: InputMaybe<Scalars['Boolean']>;
  subtext?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subtext_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subtext_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subtext_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subtext_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subtext_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subtext_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subtext_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subtext_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subtext_starts_with?: InputMaybe<Scalars['String']>;
  textBlockLayout?: InputMaybe<HeroTextBlockLayout>;
  /** All values that are contained in given list. */
  textBlockLayout_in?: InputMaybe<Array<InputMaybe<HeroTextBlockLayout>>>;
  /** Any other value that exists and is not equal to the given value. */
  textBlockLayout_not?: InputMaybe<HeroTextBlockLayout>;
  /** All values that are not contained in given list. */
  textBlockLayout_not_in?: InputMaybe<Array<InputMaybe<HeroTextBlockLayout>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type HeroBannerWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<HeroBannerWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<HeroBannerWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<HeroBannerWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<HeroBannerWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References HeroBanner record uniquely */
export type HeroBannerWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum HeroLayout {
  TextBlockLeft = 'text_block_left',
  TextBlockRight = 'text_block_right'
}

export enum HeroTextBlockLayout {
  FullHeight = 'full_height',
  Inset = 'inset'
}

export enum ImageFit {
  /** Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio. */
  Clip = 'clip',
  /** Resizes the image to fit the specified parameters exactly by removing any parts of the image that don't fit within the boundaries. */
  Crop = 'crop',
  /** Resizes the image to fit within the parameters, but as opposed to 'fit:clip' will not scale the image if the image is smaller than the output size. */
  Max = 'max',
  /** Resizes the image to fit the specified parameters exactly by scaling the image to the desired size. The aspect ratio of the image is not respected and the image can be distorted using this method. */
  Scale = 'scale'
}

export enum ImageLayout {
  OnePerRow = 'one_per_row',
  TwoPerRow = 'two_per_row'
}

export enum ImagePosition {
  Fill = 'fill',
  Left = 'left',
  Right = 'right'
}

export type ImageResizeInput = {
  /** The default value for the fit parameter is fit:clip. */
  fit?: InputMaybe<ImageFit>;
  /** The height in pixels to resize the image to. The value must be an integer from 1 to 10000. */
  height?: InputMaybe<Scalars['Int']>;
  /** The width in pixels to resize the image to. The value must be an integer from 1 to 10000. */
  width?: InputMaybe<Scalars['Int']>;
};

/** Transformations for Images */
export type ImageTransformationInput = {
  /** Resizes the image */
  resize?: InputMaybe<ImageResizeInput>;
};

export enum InputType {
  Checkbox = 'checkbox',
  Date = 'date',
  Email = 'email',
  Number = 'number',
  Password = 'password',
  Tel = 'tel',
  Text = 'text'
}

export type JoinCtApanel = Node & {
  __typename?: 'JoinCTApanel';
  contentColour?: Maybe<Color>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  ctAs: Array<Cta>;
  desktopImage: Asset;
  /** Get the document in other stages */
  documentInStages: Array<JoinCtApanel>;
  fullWidthTemplates: Array<CmsPage>;
  /** List of JoinCTApanel versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  mobileImage?: Maybe<Asset>;
  name?: Maybe<Scalars['String']>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  textArea?: Maybe<RichText>;
  textPositionLeft?: Maybe<Scalars['Boolean']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type JoinCtApanelCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type JoinCtApanelCtAsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<CtaOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CtaWhereInput>;
};


export type JoinCtApanelDesktopImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type JoinCtApanelDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type JoinCtApanelFullWidthTemplatesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsPageWhereInput>;
};


export type JoinCtApanelHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type JoinCtApanelMobileImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type JoinCtApanelPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type JoinCtApanelScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type JoinCtApanelUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type JoinCtApanelConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: JoinCtApanelWhereUniqueInput;
};

/** A connection to a list of items. */
export type JoinCtApanelConnection = {
  __typename?: 'JoinCTApanelConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<JoinCtApanelEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type JoinCtApanelCreateInput = {
  contentColour?: InputMaybe<ColorInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  ctAs?: InputMaybe<CtaCreateManyInlineInput>;
  desktopImage: AssetCreateOneInlineInput;
  fullWidthTemplates?: InputMaybe<CmsPageCreateManyInlineInput>;
  mobileImage?: InputMaybe<AssetCreateOneInlineInput>;
  name?: InputMaybe<Scalars['String']>;
  textArea?: InputMaybe<Scalars['RichTextAST']>;
  textPositionLeft?: InputMaybe<Scalars['Boolean']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type JoinCtApanelCreateManyInlineInput = {
  /** Connect multiple existing JoinCTApanel documents */
  connect?: InputMaybe<Array<JoinCtApanelWhereUniqueInput>>;
  /** Create and connect multiple existing JoinCTApanel documents */
  create?: InputMaybe<Array<JoinCtApanelCreateInput>>;
};

export type JoinCtApanelCreateOneInlineInput = {
  /** Connect one existing JoinCTApanel document */
  connect?: InputMaybe<JoinCtApanelWhereUniqueInput>;
  /** Create and connect one JoinCTApanel document */
  create?: InputMaybe<JoinCtApanelCreateInput>;
};

/** An edge in a connection. */
export type JoinCtApanelEdge = {
  __typename?: 'JoinCTApanelEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: JoinCtApanel;
};

/** Identifies documents */
export type JoinCtApanelManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<JoinCtApanelWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<JoinCtApanelWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<JoinCtApanelWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  ctAs_every?: InputMaybe<CtaWhereInput>;
  ctAs_none?: InputMaybe<CtaWhereInput>;
  ctAs_some?: InputMaybe<CtaWhereInput>;
  desktopImage?: InputMaybe<AssetWhereInput>;
  documentInStages_every?: InputMaybe<JoinCtApanelWhereStageInput>;
  documentInStages_none?: InputMaybe<JoinCtApanelWhereStageInput>;
  documentInStages_some?: InputMaybe<JoinCtApanelWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  mobileImage?: InputMaybe<AssetWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  textPositionLeft?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  textPositionLeft_not?: InputMaybe<Scalars['Boolean']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum JoinCtApanelOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TextPositionLeftAsc = 'textPositionLeft_ASC',
  TextPositionLeftDesc = 'textPositionLeft_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type JoinCtApanelUpdateInput = {
  contentColour?: InputMaybe<ColorInput>;
  ctAs?: InputMaybe<CtaUpdateManyInlineInput>;
  desktopImage?: InputMaybe<AssetUpdateOneInlineInput>;
  fullWidthTemplates?: InputMaybe<CmsPageUpdateManyInlineInput>;
  mobileImage?: InputMaybe<AssetUpdateOneInlineInput>;
  name?: InputMaybe<Scalars['String']>;
  textArea?: InputMaybe<Scalars['RichTextAST']>;
  textPositionLeft?: InputMaybe<Scalars['Boolean']>;
};

export type JoinCtApanelUpdateManyInlineInput = {
  /** Connect multiple existing JoinCTApanel documents */
  connect?: InputMaybe<Array<JoinCtApanelConnectInput>>;
  /** Create and connect multiple JoinCTApanel documents */
  create?: InputMaybe<Array<JoinCtApanelCreateInput>>;
  /** Delete multiple JoinCTApanel documents */
  delete?: InputMaybe<Array<JoinCtApanelWhereUniqueInput>>;
  /** Disconnect multiple JoinCTApanel documents */
  disconnect?: InputMaybe<Array<JoinCtApanelWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing JoinCTApanel documents */
  set?: InputMaybe<Array<JoinCtApanelWhereUniqueInput>>;
  /** Update multiple JoinCTApanel documents */
  update?: InputMaybe<Array<JoinCtApanelUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple JoinCTApanel documents */
  upsert?: InputMaybe<Array<JoinCtApanelUpsertWithNestedWhereUniqueInput>>;
};

export type JoinCtApanelUpdateManyInput = {
  contentColour?: InputMaybe<ColorInput>;
  name?: InputMaybe<Scalars['String']>;
  textArea?: InputMaybe<Scalars['RichTextAST']>;
  textPositionLeft?: InputMaybe<Scalars['Boolean']>;
};

export type JoinCtApanelUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: JoinCtApanelUpdateManyInput;
  /** Document search */
  where: JoinCtApanelWhereInput;
};

export type JoinCtApanelUpdateOneInlineInput = {
  /** Connect existing JoinCTApanel document */
  connect?: InputMaybe<JoinCtApanelWhereUniqueInput>;
  /** Create and connect one JoinCTApanel document */
  create?: InputMaybe<JoinCtApanelCreateInput>;
  /** Delete currently connected JoinCTApanel document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected JoinCTApanel document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single JoinCTApanel document */
  update?: InputMaybe<JoinCtApanelUpdateWithNestedWhereUniqueInput>;
  /** Upsert single JoinCTApanel document */
  upsert?: InputMaybe<JoinCtApanelUpsertWithNestedWhereUniqueInput>;
};

export type JoinCtApanelUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: JoinCtApanelUpdateInput;
  /** Unique document search */
  where: JoinCtApanelWhereUniqueInput;
};

export type JoinCtApanelUpsertInput = {
  /** Create document if it didn't exist */
  create: JoinCtApanelCreateInput;
  /** Update document if it exists */
  update: JoinCtApanelUpdateInput;
};

export type JoinCtApanelUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: JoinCtApanelUpsertInput;
  /** Unique document search */
  where: JoinCtApanelWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type JoinCtApanelWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type JoinCtApanelWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<JoinCtApanelWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<JoinCtApanelWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<JoinCtApanelWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  ctAs_every?: InputMaybe<CtaWhereInput>;
  ctAs_none?: InputMaybe<CtaWhereInput>;
  ctAs_some?: InputMaybe<CtaWhereInput>;
  desktopImage?: InputMaybe<AssetWhereInput>;
  documentInStages_every?: InputMaybe<JoinCtApanelWhereStageInput>;
  documentInStages_none?: InputMaybe<JoinCtApanelWhereStageInput>;
  documentInStages_some?: InputMaybe<JoinCtApanelWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  mobileImage?: InputMaybe<AssetWhereInput>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  textPositionLeft?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  textPositionLeft_not?: InputMaybe<Scalars['Boolean']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type JoinCtApanelWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<JoinCtApanelWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<JoinCtApanelWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<JoinCtApanelWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<JoinCtApanelWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References JoinCTApanel record uniquely */
export type JoinCtApanelWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Link = {
  __typename?: 'Link';
  /** The unique identifier */
  id: Scalars['ID'];
  linkText: Scalars['String'];
  openInNewWindow?: Maybe<Scalars['Boolean']>;
  /** System stage field */
  stage: Stage;
  url?: Maybe<Scalars['String']>;
};

export type LinkCareerContentLinkedBlock = {
  __typename?: 'LinkCareerContentLinkedBlock';
  /** Apply Now/Find in Store */
  careersContentLinkedBlocksCta?: Maybe<Cta>;
  /** Please upload SVG - https://prnt.sc/jx0IyoXNR_ZC */
  careersContentLinkedBlocksIcon?: Maybe<Asset>;
  /** Apply online/Apply in-store/Apply by Email */
  careersContentLinkedBlocksText?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System stage field */
  stage: Stage;
};


export type LinkCareerContentLinkedBlockCareersContentLinkedBlocksCtaArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type LinkCareerContentLinkedBlockCareersContentLinkedBlocksIconArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type LinkCareerContentLinkedBlockConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: LinkCareerContentLinkedBlockWhereUniqueInput;
};

/** A connection to a list of items. */
export type LinkCareerContentLinkedBlockConnection = {
  __typename?: 'LinkCareerContentLinkedBlockConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<LinkCareerContentLinkedBlockEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type LinkCareerContentLinkedBlockCreateInput = {
  careersContentLinkedBlocksCta?: InputMaybe<CtaCreateOneInlineInput>;
  careersContentLinkedBlocksIcon?: InputMaybe<AssetCreateOneInlineInput>;
  careersContentLinkedBlocksText?: InputMaybe<Scalars['String']>;
};

export type LinkCareerContentLinkedBlockCreateManyInlineInput = {
  /** Create and connect multiple existing LinkCareerContentLinkedBlock documents */
  create?: InputMaybe<Array<LinkCareerContentLinkedBlockCreateInput>>;
};

export type LinkCareerContentLinkedBlockCreateOneInlineInput = {
  /** Create and connect one LinkCareerContentLinkedBlock document */
  create?: InputMaybe<LinkCareerContentLinkedBlockCreateInput>;
};

export type LinkCareerContentLinkedBlockCreateWithPositionInput = {
  /** Document to create */
  data: LinkCareerContentLinkedBlockCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type LinkCareerContentLinkedBlockEdge = {
  __typename?: 'LinkCareerContentLinkedBlockEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: LinkCareerContentLinkedBlock;
};

/** Identifies documents */
export type LinkCareerContentLinkedBlockManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LinkCareerContentLinkedBlockWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LinkCareerContentLinkedBlockWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LinkCareerContentLinkedBlockWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  careersContentLinkedBlocksCta?: InputMaybe<CtaWhereInput>;
  careersContentLinkedBlocksIcon?: InputMaybe<AssetWhereInput>;
  careersContentLinkedBlocksText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  careersContentLinkedBlocksText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  careersContentLinkedBlocksText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  careersContentLinkedBlocksText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  careersContentLinkedBlocksText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  careersContentLinkedBlocksText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  careersContentLinkedBlocksText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  careersContentLinkedBlocksText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  careersContentLinkedBlocksText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  careersContentLinkedBlocksText_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
};

export enum LinkCareerContentLinkedBlockOrderByInput {
  CareersContentLinkedBlocksTextAsc = 'careersContentLinkedBlocksText_ASC',
  CareersContentLinkedBlocksTextDesc = 'careersContentLinkedBlocksText_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type LinkCareerContentLinkedBlockParent = ConfigCareer;

export type LinkCareerContentLinkedBlockParentConnectInput = {
  ConfigCareer?: InputMaybe<ConfigCareerConnectInput>;
};

export type LinkCareerContentLinkedBlockParentCreateInput = {
  ConfigCareer?: InputMaybe<ConfigCareerCreateInput>;
};

export type LinkCareerContentLinkedBlockParentCreateManyInlineInput = {
  /** Connect multiple existing LinkCareerContentLinkedBlockParent documents */
  connect?: InputMaybe<Array<LinkCareerContentLinkedBlockParentWhereUniqueInput>>;
  /** Create and connect multiple existing LinkCareerContentLinkedBlockParent documents */
  create?: InputMaybe<Array<LinkCareerContentLinkedBlockParentCreateInput>>;
};

export type LinkCareerContentLinkedBlockParentCreateOneInlineInput = {
  /** Connect one existing LinkCareerContentLinkedBlockParent document */
  connect?: InputMaybe<LinkCareerContentLinkedBlockParentWhereUniqueInput>;
  /** Create and connect one LinkCareerContentLinkedBlockParent document */
  create?: InputMaybe<LinkCareerContentLinkedBlockParentCreateInput>;
};

export type LinkCareerContentLinkedBlockParentUpdateInput = {
  ConfigCareer?: InputMaybe<ConfigCareerUpdateInput>;
};

export type LinkCareerContentLinkedBlockParentUpdateManyInlineInput = {
  /** Connect multiple existing LinkCareerContentLinkedBlockParent documents */
  connect?: InputMaybe<Array<LinkCareerContentLinkedBlockParentConnectInput>>;
  /** Create and connect multiple LinkCareerContentLinkedBlockParent documents */
  create?: InputMaybe<Array<LinkCareerContentLinkedBlockParentCreateInput>>;
  /** Delete multiple LinkCareerContentLinkedBlockParent documents */
  delete?: InputMaybe<Array<LinkCareerContentLinkedBlockParentWhereUniqueInput>>;
  /** Disconnect multiple LinkCareerContentLinkedBlockParent documents */
  disconnect?: InputMaybe<Array<LinkCareerContentLinkedBlockParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing LinkCareerContentLinkedBlockParent documents */
  set?: InputMaybe<Array<LinkCareerContentLinkedBlockParentWhereUniqueInput>>;
  /** Update multiple LinkCareerContentLinkedBlockParent documents */
  update?: InputMaybe<Array<LinkCareerContentLinkedBlockParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple LinkCareerContentLinkedBlockParent documents */
  upsert?: InputMaybe<Array<LinkCareerContentLinkedBlockParentUpsertWithNestedWhereUniqueInput>>;
};

export type LinkCareerContentLinkedBlockParentUpdateManyWithNestedWhereInput = {
  ConfigCareer?: InputMaybe<ConfigCareerUpdateManyWithNestedWhereInput>;
};

export type LinkCareerContentLinkedBlockParentUpdateOneInlineInput = {
  /** Connect existing LinkCareerContentLinkedBlockParent document */
  connect?: InputMaybe<LinkCareerContentLinkedBlockParentWhereUniqueInput>;
  /** Create and connect one LinkCareerContentLinkedBlockParent document */
  create?: InputMaybe<LinkCareerContentLinkedBlockParentCreateInput>;
  /** Delete currently connected LinkCareerContentLinkedBlockParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected LinkCareerContentLinkedBlockParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single LinkCareerContentLinkedBlockParent document */
  update?: InputMaybe<LinkCareerContentLinkedBlockParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single LinkCareerContentLinkedBlockParent document */
  upsert?: InputMaybe<LinkCareerContentLinkedBlockParentUpsertWithNestedWhereUniqueInput>;
};

export type LinkCareerContentLinkedBlockParentUpdateWithNestedWhereUniqueInput = {
  ConfigCareer?: InputMaybe<ConfigCareerUpdateWithNestedWhereUniqueInput>;
};

export type LinkCareerContentLinkedBlockParentUpsertWithNestedWhereUniqueInput = {
  ConfigCareer?: InputMaybe<ConfigCareerUpsertWithNestedWhereUniqueInput>;
};

export type LinkCareerContentLinkedBlockParentWhereInput = {
  ConfigCareer?: InputMaybe<ConfigCareerWhereInput>;
};

export type LinkCareerContentLinkedBlockParentWhereUniqueInput = {
  ConfigCareer?: InputMaybe<ConfigCareerWhereUniqueInput>;
};

export type LinkCareerContentLinkedBlockUpdateInput = {
  careersContentLinkedBlocksCta?: InputMaybe<CtaUpdateOneInlineInput>;
  careersContentLinkedBlocksIcon?: InputMaybe<AssetUpdateOneInlineInput>;
  careersContentLinkedBlocksText?: InputMaybe<Scalars['String']>;
};

export type LinkCareerContentLinkedBlockUpdateManyInlineInput = {
  /** Create and connect multiple LinkCareerContentLinkedBlock component instances */
  create?: InputMaybe<Array<LinkCareerContentLinkedBlockCreateWithPositionInput>>;
  /** Delete multiple LinkCareerContentLinkedBlock documents */
  delete?: InputMaybe<Array<LinkCareerContentLinkedBlockWhereUniqueInput>>;
  /** Update multiple LinkCareerContentLinkedBlock component instances */
  update?: InputMaybe<Array<LinkCareerContentLinkedBlockUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple LinkCareerContentLinkedBlock component instances */
  upsert?: InputMaybe<Array<LinkCareerContentLinkedBlockUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type LinkCareerContentLinkedBlockUpdateManyInput = {
  careersContentLinkedBlocksText?: InputMaybe<Scalars['String']>;
};

export type LinkCareerContentLinkedBlockUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: LinkCareerContentLinkedBlockUpdateManyInput;
  /** Document search */
  where: LinkCareerContentLinkedBlockWhereInput;
};

export type LinkCareerContentLinkedBlockUpdateOneInlineInput = {
  /** Create and connect one LinkCareerContentLinkedBlock document */
  create?: InputMaybe<LinkCareerContentLinkedBlockCreateInput>;
  /** Delete currently connected LinkCareerContentLinkedBlock document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single LinkCareerContentLinkedBlock document */
  update?: InputMaybe<LinkCareerContentLinkedBlockUpdateWithNestedWhereUniqueInput>;
  /** Upsert single LinkCareerContentLinkedBlock document */
  upsert?: InputMaybe<LinkCareerContentLinkedBlockUpsertWithNestedWhereUniqueInput>;
};

export type LinkCareerContentLinkedBlockUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<LinkCareerContentLinkedBlockUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: LinkCareerContentLinkedBlockWhereUniqueInput;
};

export type LinkCareerContentLinkedBlockUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: LinkCareerContentLinkedBlockUpdateInput;
  /** Unique document search */
  where: LinkCareerContentLinkedBlockWhereUniqueInput;
};

export type LinkCareerContentLinkedBlockUpsertInput = {
  /** Create document if it didn't exist */
  create: LinkCareerContentLinkedBlockCreateInput;
  /** Update document if it exists */
  update: LinkCareerContentLinkedBlockUpdateInput;
};

export type LinkCareerContentLinkedBlockUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<LinkCareerContentLinkedBlockUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: LinkCareerContentLinkedBlockWhereUniqueInput;
};

export type LinkCareerContentLinkedBlockUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: LinkCareerContentLinkedBlockUpsertInput;
  /** Unique document search */
  where: LinkCareerContentLinkedBlockWhereUniqueInput;
};

/** Identifies documents */
export type LinkCareerContentLinkedBlockWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LinkCareerContentLinkedBlockWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LinkCareerContentLinkedBlockWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LinkCareerContentLinkedBlockWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  careersContentLinkedBlocksCta?: InputMaybe<CtaWhereInput>;
  careersContentLinkedBlocksIcon?: InputMaybe<AssetWhereInput>;
  careersContentLinkedBlocksText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  careersContentLinkedBlocksText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  careersContentLinkedBlocksText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  careersContentLinkedBlocksText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  careersContentLinkedBlocksText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  careersContentLinkedBlocksText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  careersContentLinkedBlocksText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  careersContentLinkedBlocksText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  careersContentLinkedBlocksText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  careersContentLinkedBlocksText_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
};

/** References LinkCareerContentLinkedBlock record uniquely */
export type LinkCareerContentLinkedBlockWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type LinkCollection = {
  __typename?: 'LinkCollection';
  headingLink?: Maybe<Link>;
  /** The unique identifier */
  id: Scalars['ID'];
  links: Array<Link>;
  /** System stage field */
  stage: Stage;
};


export type LinkCollectionHeadingLinkArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type LinkCollectionLinksArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<LinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<LinkWhereInput>;
};

export type LinkCollectionConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: LinkCollectionWhereUniqueInput;
};

/** A connection to a list of items. */
export type LinkCollectionConnection = {
  __typename?: 'LinkCollectionConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<LinkCollectionEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type LinkCollectionCreateInput = {
  headingLink?: InputMaybe<LinkCreateOneInlineInput>;
  links?: InputMaybe<LinkCreateManyInlineInput>;
};

export type LinkCollectionCreateManyInlineInput = {
  /** Create and connect multiple existing LinkCollection documents */
  create?: InputMaybe<Array<LinkCollectionCreateInput>>;
};

export type LinkCollectionCreateOneInlineInput = {
  /** Create and connect one LinkCollection document */
  create?: InputMaybe<LinkCollectionCreateInput>;
};

export type LinkCollectionCreateWithPositionInput = {
  /** Document to create */
  data: LinkCollectionCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type LinkCollectionEdge = {
  __typename?: 'LinkCollectionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: LinkCollection;
};

/** Identifies documents */
export type LinkCollectionManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LinkCollectionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LinkCollectionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LinkCollectionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  headingLink?: InputMaybe<LinkWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  links_every?: InputMaybe<LinkWhereInput>;
  links_none?: InputMaybe<LinkWhereInput>;
  links_some?: InputMaybe<LinkWhereInput>;
};

export enum LinkCollectionOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type LinkCollectionParent = FooterConfig;

export type LinkCollectionParentConnectInput = {
  FooterConfig?: InputMaybe<FooterConfigConnectInput>;
};

export type LinkCollectionParentCreateInput = {
  FooterConfig?: InputMaybe<FooterConfigCreateInput>;
};

export type LinkCollectionParentCreateManyInlineInput = {
  /** Connect multiple existing LinkCollectionParent documents */
  connect?: InputMaybe<Array<LinkCollectionParentWhereUniqueInput>>;
  /** Create and connect multiple existing LinkCollectionParent documents */
  create?: InputMaybe<Array<LinkCollectionParentCreateInput>>;
};

export type LinkCollectionParentCreateOneInlineInput = {
  /** Connect one existing LinkCollectionParent document */
  connect?: InputMaybe<LinkCollectionParentWhereUniqueInput>;
  /** Create and connect one LinkCollectionParent document */
  create?: InputMaybe<LinkCollectionParentCreateInput>;
};

export type LinkCollectionParentUpdateInput = {
  FooterConfig?: InputMaybe<FooterConfigUpdateInput>;
};

export type LinkCollectionParentUpdateManyInlineInput = {
  /** Connect multiple existing LinkCollectionParent documents */
  connect?: InputMaybe<Array<LinkCollectionParentConnectInput>>;
  /** Create and connect multiple LinkCollectionParent documents */
  create?: InputMaybe<Array<LinkCollectionParentCreateInput>>;
  /** Delete multiple LinkCollectionParent documents */
  delete?: InputMaybe<Array<LinkCollectionParentWhereUniqueInput>>;
  /** Disconnect multiple LinkCollectionParent documents */
  disconnect?: InputMaybe<Array<LinkCollectionParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing LinkCollectionParent documents */
  set?: InputMaybe<Array<LinkCollectionParentWhereUniqueInput>>;
  /** Update multiple LinkCollectionParent documents */
  update?: InputMaybe<Array<LinkCollectionParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple LinkCollectionParent documents */
  upsert?: InputMaybe<Array<LinkCollectionParentUpsertWithNestedWhereUniqueInput>>;
};

export type LinkCollectionParentUpdateManyWithNestedWhereInput = {
  FooterConfig?: InputMaybe<FooterConfigUpdateManyWithNestedWhereInput>;
};

export type LinkCollectionParentUpdateOneInlineInput = {
  /** Connect existing LinkCollectionParent document */
  connect?: InputMaybe<LinkCollectionParentWhereUniqueInput>;
  /** Create and connect one LinkCollectionParent document */
  create?: InputMaybe<LinkCollectionParentCreateInput>;
  /** Delete currently connected LinkCollectionParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected LinkCollectionParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single LinkCollectionParent document */
  update?: InputMaybe<LinkCollectionParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single LinkCollectionParent document */
  upsert?: InputMaybe<LinkCollectionParentUpsertWithNestedWhereUniqueInput>;
};

export type LinkCollectionParentUpdateWithNestedWhereUniqueInput = {
  FooterConfig?: InputMaybe<FooterConfigUpdateWithNestedWhereUniqueInput>;
};

export type LinkCollectionParentUpsertWithNestedWhereUniqueInput = {
  FooterConfig?: InputMaybe<FooterConfigUpsertWithNestedWhereUniqueInput>;
};

export type LinkCollectionParentWhereInput = {
  FooterConfig?: InputMaybe<FooterConfigWhereInput>;
};

export type LinkCollectionParentWhereUniqueInput = {
  FooterConfig?: InputMaybe<FooterConfigWhereUniqueInput>;
};

export type LinkCollectionUpdateInput = {
  headingLink?: InputMaybe<LinkUpdateOneInlineInput>;
  links?: InputMaybe<LinkUpdateManyInlineInput>;
};

export type LinkCollectionUpdateManyInlineInput = {
  /** Create and connect multiple LinkCollection component instances */
  create?: InputMaybe<Array<LinkCollectionCreateWithPositionInput>>;
  /** Delete multiple LinkCollection documents */
  delete?: InputMaybe<Array<LinkCollectionWhereUniqueInput>>;
  /** Update multiple LinkCollection component instances */
  update?: InputMaybe<Array<LinkCollectionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple LinkCollection component instances */
  upsert?: InputMaybe<Array<LinkCollectionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type LinkCollectionUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: InputMaybe<Scalars['String']>;
};

export type LinkCollectionUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: LinkCollectionUpdateManyInput;
  /** Document search */
  where: LinkCollectionWhereInput;
};

export type LinkCollectionUpdateOneInlineInput = {
  /** Create and connect one LinkCollection document */
  create?: InputMaybe<LinkCollectionCreateInput>;
  /** Delete currently connected LinkCollection document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single LinkCollection document */
  update?: InputMaybe<LinkCollectionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single LinkCollection document */
  upsert?: InputMaybe<LinkCollectionUpsertWithNestedWhereUniqueInput>;
};

export type LinkCollectionUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<LinkCollectionUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: LinkCollectionWhereUniqueInput;
};

export type LinkCollectionUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: LinkCollectionUpdateInput;
  /** Unique document search */
  where: LinkCollectionWhereUniqueInput;
};

export type LinkCollectionUpsertInput = {
  /** Create document if it didn't exist */
  create: LinkCollectionCreateInput;
  /** Update document if it exists */
  update: LinkCollectionUpdateInput;
};

export type LinkCollectionUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<LinkCollectionUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: LinkCollectionWhereUniqueInput;
};

export type LinkCollectionUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: LinkCollectionUpsertInput;
  /** Unique document search */
  where: LinkCollectionWhereUniqueInput;
};

/** Identifies documents */
export type LinkCollectionWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LinkCollectionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LinkCollectionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LinkCollectionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  headingLink?: InputMaybe<LinkWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  links_every?: InputMaybe<LinkWhereInput>;
  links_none?: InputMaybe<LinkWhereInput>;
  links_some?: InputMaybe<LinkWhereInput>;
};

/** References LinkCollection record uniquely */
export type LinkCollectionWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type LinkConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: LinkWhereUniqueInput;
};

/** A connection to a list of items. */
export type LinkConnection = {
  __typename?: 'LinkConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<LinkEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type LinkCreateInput = {
  linkText: Scalars['String'];
  openInNewWindow?: InputMaybe<Scalars['Boolean']>;
  url?: InputMaybe<Scalars['String']>;
};

export type LinkCreateManyInlineInput = {
  /** Create and connect multiple existing Link documents */
  create?: InputMaybe<Array<LinkCreateInput>>;
};

export type LinkCreateOneInlineInput = {
  /** Create and connect one Link document */
  create?: InputMaybe<LinkCreateInput>;
};

export type LinkCreateWithPositionInput = {
  /** Document to create */
  data: LinkCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type LinkEdge = {
  __typename?: 'LinkEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Link;
};

export type LinkIcon = {
  __typename?: 'LinkIcon';
  iconFile?: Maybe<Asset>;
  /** The unique identifier */
  id: Scalars['ID'];
  linkUrl?: Maybe<Scalars['String']>;
  openInNewWindow?: Maybe<Scalars['Boolean']>;
  /** System stage field */
  stage: Stage;
};


export type LinkIconIconFileArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type LinkIconConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: LinkIconWhereUniqueInput;
};

/** A connection to a list of items. */
export type LinkIconConnection = {
  __typename?: 'LinkIconConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<LinkIconEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type LinkIconCreateInput = {
  iconFile?: InputMaybe<AssetCreateOneInlineInput>;
  linkUrl?: InputMaybe<Scalars['String']>;
  openInNewWindow?: InputMaybe<Scalars['Boolean']>;
};

export type LinkIconCreateManyInlineInput = {
  /** Create and connect multiple existing LinkIcon documents */
  create?: InputMaybe<Array<LinkIconCreateInput>>;
};

export type LinkIconCreateOneInlineInput = {
  /** Create and connect one LinkIcon document */
  create?: InputMaybe<LinkIconCreateInput>;
};

export type LinkIconCreateWithPositionInput = {
  /** Document to create */
  data: LinkIconCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type LinkIconEdge = {
  __typename?: 'LinkIconEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: LinkIcon;
};

/** Identifies documents */
export type LinkIconManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LinkIconWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LinkIconWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LinkIconWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  iconFile?: InputMaybe<AssetWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  linkUrl?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  linkUrl_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  linkUrl_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  linkUrl_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  linkUrl_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  linkUrl_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  linkUrl_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  linkUrl_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  linkUrl_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  linkUrl_starts_with?: InputMaybe<Scalars['String']>;
  openInNewWindow?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  openInNewWindow_not?: InputMaybe<Scalars['Boolean']>;
};

export enum LinkIconOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LinkUrlAsc = 'linkUrl_ASC',
  LinkUrlDesc = 'linkUrl_DESC',
  OpenInNewWindowAsc = 'openInNewWindow_ASC',
  OpenInNewWindowDesc = 'openInNewWindow_DESC'
}

export type LinkIconParent = SocialMediaCtaLarge;

export type LinkIconParentConnectInput = {
  SocialMediaCtaLarge?: InputMaybe<SocialMediaCtaLargeConnectInput>;
};

export type LinkIconParentCreateInput = {
  SocialMediaCtaLarge?: InputMaybe<SocialMediaCtaLargeCreateInput>;
};

export type LinkIconParentCreateManyInlineInput = {
  /** Connect multiple existing LinkIconParent documents */
  connect?: InputMaybe<Array<LinkIconParentWhereUniqueInput>>;
  /** Create and connect multiple existing LinkIconParent documents */
  create?: InputMaybe<Array<LinkIconParentCreateInput>>;
};

export type LinkIconParentCreateOneInlineInput = {
  /** Connect one existing LinkIconParent document */
  connect?: InputMaybe<LinkIconParentWhereUniqueInput>;
  /** Create and connect one LinkIconParent document */
  create?: InputMaybe<LinkIconParentCreateInput>;
};

export type LinkIconParentUpdateInput = {
  SocialMediaCtaLarge?: InputMaybe<SocialMediaCtaLargeUpdateInput>;
};

export type LinkIconParentUpdateManyInlineInput = {
  /** Connect multiple existing LinkIconParent documents */
  connect?: InputMaybe<Array<LinkIconParentConnectInput>>;
  /** Create and connect multiple LinkIconParent documents */
  create?: InputMaybe<Array<LinkIconParentCreateInput>>;
  /** Delete multiple LinkIconParent documents */
  delete?: InputMaybe<Array<LinkIconParentWhereUniqueInput>>;
  /** Disconnect multiple LinkIconParent documents */
  disconnect?: InputMaybe<Array<LinkIconParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing LinkIconParent documents */
  set?: InputMaybe<Array<LinkIconParentWhereUniqueInput>>;
  /** Update multiple LinkIconParent documents */
  update?: InputMaybe<Array<LinkIconParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple LinkIconParent documents */
  upsert?: InputMaybe<Array<LinkIconParentUpsertWithNestedWhereUniqueInput>>;
};

export type LinkIconParentUpdateManyWithNestedWhereInput = {
  SocialMediaCtaLarge?: InputMaybe<SocialMediaCtaLargeUpdateManyWithNestedWhereInput>;
};

export type LinkIconParentUpdateOneInlineInput = {
  /** Connect existing LinkIconParent document */
  connect?: InputMaybe<LinkIconParentWhereUniqueInput>;
  /** Create and connect one LinkIconParent document */
  create?: InputMaybe<LinkIconParentCreateInput>;
  /** Delete currently connected LinkIconParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected LinkIconParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single LinkIconParent document */
  update?: InputMaybe<LinkIconParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single LinkIconParent document */
  upsert?: InputMaybe<LinkIconParentUpsertWithNestedWhereUniqueInput>;
};

export type LinkIconParentUpdateWithNestedWhereUniqueInput = {
  SocialMediaCtaLarge?: InputMaybe<SocialMediaCtaLargeUpdateWithNestedWhereUniqueInput>;
};

export type LinkIconParentUpsertWithNestedWhereUniqueInput = {
  SocialMediaCtaLarge?: InputMaybe<SocialMediaCtaLargeUpsertWithNestedWhereUniqueInput>;
};

export type LinkIconParentWhereInput = {
  SocialMediaCtaLarge?: InputMaybe<SocialMediaCtaLargeWhereInput>;
};

export type LinkIconParentWhereUniqueInput = {
  SocialMediaCtaLarge?: InputMaybe<SocialMediaCtaLargeWhereUniqueInput>;
};

export type LinkIconUpdateInput = {
  iconFile?: InputMaybe<AssetUpdateOneInlineInput>;
  linkUrl?: InputMaybe<Scalars['String']>;
  openInNewWindow?: InputMaybe<Scalars['Boolean']>;
};

export type LinkIconUpdateManyInlineInput = {
  /** Create and connect multiple LinkIcon component instances */
  create?: InputMaybe<Array<LinkIconCreateWithPositionInput>>;
  /** Delete multiple LinkIcon documents */
  delete?: InputMaybe<Array<LinkIconWhereUniqueInput>>;
  /** Update multiple LinkIcon component instances */
  update?: InputMaybe<Array<LinkIconUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple LinkIcon component instances */
  upsert?: InputMaybe<Array<LinkIconUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type LinkIconUpdateManyInput = {
  linkUrl?: InputMaybe<Scalars['String']>;
  openInNewWindow?: InputMaybe<Scalars['Boolean']>;
};

export type LinkIconUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: LinkIconUpdateManyInput;
  /** Document search */
  where: LinkIconWhereInput;
};

export type LinkIconUpdateOneInlineInput = {
  /** Create and connect one LinkIcon document */
  create?: InputMaybe<LinkIconCreateInput>;
  /** Delete currently connected LinkIcon document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single LinkIcon document */
  update?: InputMaybe<LinkIconUpdateWithNestedWhereUniqueInput>;
  /** Upsert single LinkIcon document */
  upsert?: InputMaybe<LinkIconUpsertWithNestedWhereUniqueInput>;
};

export type LinkIconUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<LinkIconUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: LinkIconWhereUniqueInput;
};

export type LinkIconUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: LinkIconUpdateInput;
  /** Unique document search */
  where: LinkIconWhereUniqueInput;
};

export type LinkIconUpsertInput = {
  /** Create document if it didn't exist */
  create: LinkIconCreateInput;
  /** Update document if it exists */
  update: LinkIconUpdateInput;
};

export type LinkIconUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<LinkIconUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: LinkIconWhereUniqueInput;
};

export type LinkIconUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: LinkIconUpsertInput;
  /** Unique document search */
  where: LinkIconWhereUniqueInput;
};

/** Identifies documents */
export type LinkIconWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LinkIconWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LinkIconWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LinkIconWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  iconFile?: InputMaybe<AssetWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  linkUrl?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  linkUrl_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  linkUrl_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  linkUrl_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  linkUrl_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  linkUrl_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  linkUrl_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  linkUrl_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  linkUrl_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  linkUrl_starts_with?: InputMaybe<Scalars['String']>;
  openInNewWindow?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  openInNewWindow_not?: InputMaybe<Scalars['Boolean']>;
};

/** References LinkIcon record uniquely */
export type LinkIconWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Identifies documents */
export type LinkManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LinkWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LinkWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LinkWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  linkText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  linkText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  linkText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  linkText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  linkText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  linkText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  linkText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  linkText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  linkText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  linkText_starts_with?: InputMaybe<Scalars['String']>;
  openInNewWindow?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  openInNewWindow_not?: InputMaybe<Scalars['Boolean']>;
  url?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  url_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  url_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  url_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  url_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  url_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  url_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  url_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  url_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  url_starts_with?: InputMaybe<Scalars['String']>;
};

export enum LinkOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LinkTextAsc = 'linkText_ASC',
  LinkTextDesc = 'linkText_DESC',
  OpenInNewWindowAsc = 'openInNewWindow_ASC',
  OpenInNewWindowDesc = 'openInNewWindow_DESC',
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC'
}

export type LinkParent = BlogArticle | FooterConfig | HeaderConfig | LinkCollection;

export type LinkParentConnectInput = {
  BlogArticle?: InputMaybe<BlogArticleConnectInput>;
  FooterConfig?: InputMaybe<FooterConfigConnectInput>;
  HeaderConfig?: InputMaybe<HeaderConfigConnectInput>;
  LinkCollection?: InputMaybe<LinkCollectionConnectInput>;
};

export type LinkParentCreateInput = {
  BlogArticle?: InputMaybe<BlogArticleCreateInput>;
  FooterConfig?: InputMaybe<FooterConfigCreateInput>;
  HeaderConfig?: InputMaybe<HeaderConfigCreateInput>;
  LinkCollection?: InputMaybe<LinkCollectionCreateInput>;
};

export type LinkParentCreateManyInlineInput = {
  /** Connect multiple existing LinkParent documents */
  connect?: InputMaybe<Array<LinkParentWhereUniqueInput>>;
  /** Create and connect multiple existing LinkParent documents */
  create?: InputMaybe<Array<LinkParentCreateInput>>;
};

export type LinkParentCreateOneInlineInput = {
  /** Connect one existing LinkParent document */
  connect?: InputMaybe<LinkParentWhereUniqueInput>;
  /** Create and connect one LinkParent document */
  create?: InputMaybe<LinkParentCreateInput>;
};

export type LinkParentUpdateInput = {
  BlogArticle?: InputMaybe<BlogArticleUpdateInput>;
  FooterConfig?: InputMaybe<FooterConfigUpdateInput>;
  HeaderConfig?: InputMaybe<HeaderConfigUpdateInput>;
  LinkCollection?: InputMaybe<LinkCollectionUpdateInput>;
};

export type LinkParentUpdateManyInlineInput = {
  /** Connect multiple existing LinkParent documents */
  connect?: InputMaybe<Array<LinkParentConnectInput>>;
  /** Create and connect multiple LinkParent documents */
  create?: InputMaybe<Array<LinkParentCreateInput>>;
  /** Delete multiple LinkParent documents */
  delete?: InputMaybe<Array<LinkParentWhereUniqueInput>>;
  /** Disconnect multiple LinkParent documents */
  disconnect?: InputMaybe<Array<LinkParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing LinkParent documents */
  set?: InputMaybe<Array<LinkParentWhereUniqueInput>>;
  /** Update multiple LinkParent documents */
  update?: InputMaybe<Array<LinkParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple LinkParent documents */
  upsert?: InputMaybe<Array<LinkParentUpsertWithNestedWhereUniqueInput>>;
};

export type LinkParentUpdateManyWithNestedWhereInput = {
  BlogArticle?: InputMaybe<BlogArticleUpdateManyWithNestedWhereInput>;
  FooterConfig?: InputMaybe<FooterConfigUpdateManyWithNestedWhereInput>;
  HeaderConfig?: InputMaybe<HeaderConfigUpdateManyWithNestedWhereInput>;
  LinkCollection?: InputMaybe<LinkCollectionUpdateManyWithNestedWhereInput>;
};

export type LinkParentUpdateOneInlineInput = {
  /** Connect existing LinkParent document */
  connect?: InputMaybe<LinkParentWhereUniqueInput>;
  /** Create and connect one LinkParent document */
  create?: InputMaybe<LinkParentCreateInput>;
  /** Delete currently connected LinkParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected LinkParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single LinkParent document */
  update?: InputMaybe<LinkParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single LinkParent document */
  upsert?: InputMaybe<LinkParentUpsertWithNestedWhereUniqueInput>;
};

export type LinkParentUpdateWithNestedWhereUniqueInput = {
  BlogArticle?: InputMaybe<BlogArticleUpdateWithNestedWhereUniqueInput>;
  FooterConfig?: InputMaybe<FooterConfigUpdateWithNestedWhereUniqueInput>;
  HeaderConfig?: InputMaybe<HeaderConfigUpdateWithNestedWhereUniqueInput>;
  LinkCollection?: InputMaybe<LinkCollectionUpdateWithNestedWhereUniqueInput>;
};

export type LinkParentUpsertWithNestedWhereUniqueInput = {
  BlogArticle?: InputMaybe<BlogArticleUpsertWithNestedWhereUniqueInput>;
  FooterConfig?: InputMaybe<FooterConfigUpsertWithNestedWhereUniqueInput>;
  HeaderConfig?: InputMaybe<HeaderConfigUpsertWithNestedWhereUniqueInput>;
  LinkCollection?: InputMaybe<LinkCollectionUpsertWithNestedWhereUniqueInput>;
};

export type LinkParentWhereInput = {
  BlogArticle?: InputMaybe<BlogArticleWhereInput>;
  FooterConfig?: InputMaybe<FooterConfigWhereInput>;
  HeaderConfig?: InputMaybe<HeaderConfigWhereInput>;
  LinkCollection?: InputMaybe<LinkCollectionWhereInput>;
};

export type LinkParentWhereUniqueInput = {
  BlogArticle?: InputMaybe<BlogArticleWhereUniqueInput>;
  FooterConfig?: InputMaybe<FooterConfigWhereUniqueInput>;
  HeaderConfig?: InputMaybe<HeaderConfigWhereUniqueInput>;
  LinkCollection?: InputMaybe<LinkCollectionWhereUniqueInput>;
};

export type LinkPromoImage = {
  __typename?: 'LinkPromoImage';
  adminTitle?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  imageLink?: Maybe<Scalars['String']>;
  openInANewWindow?: Maybe<Scalars['Boolean']>;
  promoImage?: Maybe<Asset>;
  /** System stage field */
  stage: Stage;
};


export type LinkPromoImagePromoImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type LinkPromoImageConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: LinkPromoImageWhereUniqueInput;
};

/** A connection to a list of items. */
export type LinkPromoImageConnection = {
  __typename?: 'LinkPromoImageConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<LinkPromoImageEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type LinkPromoImageCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  imageLink?: InputMaybe<Scalars['String']>;
  openInANewWindow?: InputMaybe<Scalars['Boolean']>;
  promoImage?: InputMaybe<AssetCreateOneInlineInput>;
};

export type LinkPromoImageCreateManyInlineInput = {
  /** Create and connect multiple existing LinkPromoImage documents */
  create?: InputMaybe<Array<LinkPromoImageCreateInput>>;
};

export type LinkPromoImageCreateOneInlineInput = {
  /** Create and connect one LinkPromoImage document */
  create?: InputMaybe<LinkPromoImageCreateInput>;
};

export type LinkPromoImageCreateWithPositionInput = {
  /** Document to create */
  data: LinkPromoImageCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type LinkPromoImageEdge = {
  __typename?: 'LinkPromoImageEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: LinkPromoImage;
};

/** Identifies documents */
export type LinkPromoImageManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LinkPromoImageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LinkPromoImageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LinkPromoImageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  imageLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  imageLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  imageLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  imageLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  imageLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  imageLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  imageLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  imageLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  imageLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  imageLink_starts_with?: InputMaybe<Scalars['String']>;
  openInANewWindow?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  openInANewWindow_not?: InputMaybe<Scalars['Boolean']>;
  promoImage?: InputMaybe<AssetWhereInput>;
};

export enum LinkPromoImageOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  ImageLinkAsc = 'imageLink_ASC',
  ImageLinkDesc = 'imageLink_DESC',
  OpenInANewWindowAsc = 'openInANewWindow_ASC',
  OpenInANewWindowDesc = 'openInANewWindow_DESC'
}

export type LinkPromoImageUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  imageLink?: InputMaybe<Scalars['String']>;
  openInANewWindow?: InputMaybe<Scalars['Boolean']>;
  promoImage?: InputMaybe<AssetUpdateOneInlineInput>;
};

export type LinkPromoImageUpdateManyInlineInput = {
  /** Create and connect multiple LinkPromoImage component instances */
  create?: InputMaybe<Array<LinkPromoImageCreateWithPositionInput>>;
  /** Delete multiple LinkPromoImage documents */
  delete?: InputMaybe<Array<LinkPromoImageWhereUniqueInput>>;
  /** Update multiple LinkPromoImage component instances */
  update?: InputMaybe<Array<LinkPromoImageUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple LinkPromoImage component instances */
  upsert?: InputMaybe<Array<LinkPromoImageUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type LinkPromoImageUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  openInANewWindow?: InputMaybe<Scalars['Boolean']>;
};

export type LinkPromoImageUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: LinkPromoImageUpdateManyInput;
  /** Document search */
  where: LinkPromoImageWhereInput;
};

export type LinkPromoImageUpdateOneInlineInput = {
  /** Create and connect one LinkPromoImage document */
  create?: InputMaybe<LinkPromoImageCreateInput>;
  /** Delete currently connected LinkPromoImage document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single LinkPromoImage document */
  update?: InputMaybe<LinkPromoImageUpdateWithNestedWhereUniqueInput>;
  /** Upsert single LinkPromoImage document */
  upsert?: InputMaybe<LinkPromoImageUpsertWithNestedWhereUniqueInput>;
};

export type LinkPromoImageUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<LinkPromoImageUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: LinkPromoImageWhereUniqueInput;
};

export type LinkPromoImageUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: LinkPromoImageUpdateInput;
  /** Unique document search */
  where: LinkPromoImageWhereUniqueInput;
};

export type LinkPromoImageUpsertInput = {
  /** Create document if it didn't exist */
  create: LinkPromoImageCreateInput;
  /** Update document if it exists */
  update: LinkPromoImageUpdateInput;
};

export type LinkPromoImageUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<LinkPromoImageUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: LinkPromoImageWhereUniqueInput;
};

export type LinkPromoImageUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: LinkPromoImageUpsertInput;
  /** Unique document search */
  where: LinkPromoImageWhereUniqueInput;
};

/** Identifies documents */
export type LinkPromoImageWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LinkPromoImageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LinkPromoImageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LinkPromoImageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  imageLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  imageLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  imageLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  imageLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  imageLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  imageLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  imageLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  imageLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  imageLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  imageLink_starts_with?: InputMaybe<Scalars['String']>;
  openInANewWindow?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  openInANewWindow_not?: InputMaybe<Scalars['Boolean']>;
  promoImage?: InputMaybe<AssetWhereInput>;
};

/** References LinkPromoImage record uniquely */
export type LinkPromoImageWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  imageLink?: InputMaybe<Scalars['String']>;
};

export type LinkUpdateInput = {
  linkText?: InputMaybe<Scalars['String']>;
  openInNewWindow?: InputMaybe<Scalars['Boolean']>;
  url?: InputMaybe<Scalars['String']>;
};

export type LinkUpdateManyInlineInput = {
  /** Create and connect multiple Link component instances */
  create?: InputMaybe<Array<LinkCreateWithPositionInput>>;
  /** Delete multiple Link documents */
  delete?: InputMaybe<Array<LinkWhereUniqueInput>>;
  /** Update multiple Link component instances */
  update?: InputMaybe<Array<LinkUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple Link component instances */
  upsert?: InputMaybe<Array<LinkUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type LinkUpdateManyInput = {
  linkText?: InputMaybe<Scalars['String']>;
  openInNewWindow?: InputMaybe<Scalars['Boolean']>;
  url?: InputMaybe<Scalars['String']>;
};

export type LinkUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: LinkUpdateManyInput;
  /** Document search */
  where: LinkWhereInput;
};

export type LinkUpdateOneInlineInput = {
  /** Create and connect one Link document */
  create?: InputMaybe<LinkCreateInput>;
  /** Delete currently connected Link document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single Link document */
  update?: InputMaybe<LinkUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Link document */
  upsert?: InputMaybe<LinkUpsertWithNestedWhereUniqueInput>;
};

export type LinkUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<LinkUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: LinkWhereUniqueInput;
};

export type LinkUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: LinkUpdateInput;
  /** Unique document search */
  where: LinkWhereUniqueInput;
};

export type LinkUpsertInput = {
  /** Create document if it didn't exist */
  create: LinkCreateInput;
  /** Update document if it exists */
  update: LinkUpdateInput;
};

export type LinkUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<LinkUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: LinkWhereUniqueInput;
};

export type LinkUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: LinkUpsertInput;
  /** Unique document search */
  where: LinkWhereUniqueInput;
};

/** Identifies documents */
export type LinkWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<LinkWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<LinkWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<LinkWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  linkText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  linkText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  linkText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  linkText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  linkText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  linkText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  linkText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  linkText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  linkText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  linkText_starts_with?: InputMaybe<Scalars['String']>;
  openInNewWindow?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  openInNewWindow_not?: InputMaybe<Scalars['Boolean']>;
  url?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  url_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  url_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  url_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  url_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  url_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  url_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  url_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  url_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  url_starts_with?: InputMaybe<Scalars['String']>;
};

/** References Link record uniquely */
export type LinkWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Locale system enumeration */
export enum Locale {
  /** System locale */
  En = 'en'
}

/** Representing a geolocation point with latitude and longitude */
export type Location = {
  __typename?: 'Location';
  distance: Scalars['Float'];
  latitude: Scalars['Float'];
  longitude: Scalars['Float'];
};


/** Representing a geolocation point with latitude and longitude */
export type LocationDistanceArgs = {
  from: LocationInput;
};

/** Input for a geolocation point with latitude and longitude */
export type LocationInput = {
  latitude: Scalars['Float'];
  longitude: Scalars['Float'];
};

export type ModuleIconAndText = {
  __typename?: 'ModuleIconAndText';
  adminTitle?: Maybe<Scalars['String']>;
  headingText?: Maybe<Scalars['String']>;
  /** SVG Icon */
  icon?: Maybe<Asset>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System stage field */
  stage: Stage;
};


export type ModuleIconAndTextIconArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ModuleIconAndTextConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ModuleIconAndTextWhereUniqueInput;
};

/** A connection to a list of items. */
export type ModuleIconAndTextConnection = {
  __typename?: 'ModuleIconAndTextConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ModuleIconAndTextEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ModuleIconAndTextCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  headingText?: InputMaybe<Scalars['String']>;
  icon?: InputMaybe<AssetCreateOneInlineInput>;
};

export type ModuleIconAndTextCreateManyInlineInput = {
  /** Create and connect multiple existing ModuleIconAndText documents */
  create?: InputMaybe<Array<ModuleIconAndTextCreateInput>>;
};

export type ModuleIconAndTextCreateOneInlineInput = {
  /** Create and connect one ModuleIconAndText document */
  create?: InputMaybe<ModuleIconAndTextCreateInput>;
};

export type ModuleIconAndTextCreateWithPositionInput = {
  /** Document to create */
  data: ModuleIconAndTextCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type ModuleIconAndTextEdge = {
  __typename?: 'ModuleIconAndTextEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ModuleIconAndText;
};

/** Identifies documents */
export type ModuleIconAndTextManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ModuleIconAndTextWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ModuleIconAndTextWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ModuleIconAndTextWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  headingText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headingText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headingText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headingText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headingText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headingText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headingText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headingText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headingText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headingText_starts_with?: InputMaybe<Scalars['String']>;
  icon?: InputMaybe<AssetWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
};

export enum ModuleIconAndTextOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  HeadingTextAsc = 'headingText_ASC',
  HeadingTextDesc = 'headingText_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type ModuleIconAndTextParent = ConfigSalonMenu;

export type ModuleIconAndTextParentConnectInput = {
  ConfigSalonMenu?: InputMaybe<ConfigSalonMenuConnectInput>;
};

export type ModuleIconAndTextParentCreateInput = {
  ConfigSalonMenu?: InputMaybe<ConfigSalonMenuCreateInput>;
};

export type ModuleIconAndTextParentCreateManyInlineInput = {
  /** Connect multiple existing ModuleIconAndTextParent documents */
  connect?: InputMaybe<Array<ModuleIconAndTextParentWhereUniqueInput>>;
  /** Create and connect multiple existing ModuleIconAndTextParent documents */
  create?: InputMaybe<Array<ModuleIconAndTextParentCreateInput>>;
};

export type ModuleIconAndTextParentCreateOneInlineInput = {
  /** Connect one existing ModuleIconAndTextParent document */
  connect?: InputMaybe<ModuleIconAndTextParentWhereUniqueInput>;
  /** Create and connect one ModuleIconAndTextParent document */
  create?: InputMaybe<ModuleIconAndTextParentCreateInput>;
};

export type ModuleIconAndTextParentUpdateInput = {
  ConfigSalonMenu?: InputMaybe<ConfigSalonMenuUpdateInput>;
};

export type ModuleIconAndTextParentUpdateManyInlineInput = {
  /** Connect multiple existing ModuleIconAndTextParent documents */
  connect?: InputMaybe<Array<ModuleIconAndTextParentConnectInput>>;
  /** Create and connect multiple ModuleIconAndTextParent documents */
  create?: InputMaybe<Array<ModuleIconAndTextParentCreateInput>>;
  /** Delete multiple ModuleIconAndTextParent documents */
  delete?: InputMaybe<Array<ModuleIconAndTextParentWhereUniqueInput>>;
  /** Disconnect multiple ModuleIconAndTextParent documents */
  disconnect?: InputMaybe<Array<ModuleIconAndTextParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ModuleIconAndTextParent documents */
  set?: InputMaybe<Array<ModuleIconAndTextParentWhereUniqueInput>>;
  /** Update multiple ModuleIconAndTextParent documents */
  update?: InputMaybe<Array<ModuleIconAndTextParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ModuleIconAndTextParent documents */
  upsert?: InputMaybe<Array<ModuleIconAndTextParentUpsertWithNestedWhereUniqueInput>>;
};

export type ModuleIconAndTextParentUpdateManyWithNestedWhereInput = {
  ConfigSalonMenu?: InputMaybe<ConfigSalonMenuUpdateManyWithNestedWhereInput>;
};

export type ModuleIconAndTextParentUpdateOneInlineInput = {
  /** Connect existing ModuleIconAndTextParent document */
  connect?: InputMaybe<ModuleIconAndTextParentWhereUniqueInput>;
  /** Create and connect one ModuleIconAndTextParent document */
  create?: InputMaybe<ModuleIconAndTextParentCreateInput>;
  /** Delete currently connected ModuleIconAndTextParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected ModuleIconAndTextParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single ModuleIconAndTextParent document */
  update?: InputMaybe<ModuleIconAndTextParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ModuleIconAndTextParent document */
  upsert?: InputMaybe<ModuleIconAndTextParentUpsertWithNestedWhereUniqueInput>;
};

export type ModuleIconAndTextParentUpdateWithNestedWhereUniqueInput = {
  ConfigSalonMenu?: InputMaybe<ConfigSalonMenuUpdateWithNestedWhereUniqueInput>;
};

export type ModuleIconAndTextParentUpsertWithNestedWhereUniqueInput = {
  ConfigSalonMenu?: InputMaybe<ConfigSalonMenuUpsertWithNestedWhereUniqueInput>;
};

export type ModuleIconAndTextParentWhereInput = {
  ConfigSalonMenu?: InputMaybe<ConfigSalonMenuWhereInput>;
};

export type ModuleIconAndTextParentWhereUniqueInput = {
  ConfigSalonMenu?: InputMaybe<ConfigSalonMenuWhereUniqueInput>;
};

export type ModuleIconAndTextUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  headingText?: InputMaybe<Scalars['String']>;
  icon?: InputMaybe<AssetUpdateOneInlineInput>;
};

export type ModuleIconAndTextUpdateManyInlineInput = {
  /** Create and connect multiple ModuleIconAndText component instances */
  create?: InputMaybe<Array<ModuleIconAndTextCreateWithPositionInput>>;
  /** Delete multiple ModuleIconAndText documents */
  delete?: InputMaybe<Array<ModuleIconAndTextWhereUniqueInput>>;
  /** Update multiple ModuleIconAndText component instances */
  update?: InputMaybe<Array<ModuleIconAndTextUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple ModuleIconAndText component instances */
  upsert?: InputMaybe<Array<ModuleIconAndTextUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ModuleIconAndTextUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  headingText?: InputMaybe<Scalars['String']>;
};

export type ModuleIconAndTextUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ModuleIconAndTextUpdateManyInput;
  /** Document search */
  where: ModuleIconAndTextWhereInput;
};

export type ModuleIconAndTextUpdateOneInlineInput = {
  /** Create and connect one ModuleIconAndText document */
  create?: InputMaybe<ModuleIconAndTextCreateInput>;
  /** Delete currently connected ModuleIconAndText document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single ModuleIconAndText document */
  update?: InputMaybe<ModuleIconAndTextUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ModuleIconAndText document */
  upsert?: InputMaybe<ModuleIconAndTextUpsertWithNestedWhereUniqueInput>;
};

export type ModuleIconAndTextUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<ModuleIconAndTextUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ModuleIconAndTextWhereUniqueInput;
};

export type ModuleIconAndTextUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ModuleIconAndTextUpdateInput;
  /** Unique document search */
  where: ModuleIconAndTextWhereUniqueInput;
};

export type ModuleIconAndTextUpsertInput = {
  /** Create document if it didn't exist */
  create: ModuleIconAndTextCreateInput;
  /** Update document if it exists */
  update: ModuleIconAndTextUpdateInput;
};

export type ModuleIconAndTextUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<ModuleIconAndTextUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ModuleIconAndTextWhereUniqueInput;
};

export type ModuleIconAndTextUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ModuleIconAndTextUpsertInput;
  /** Unique document search */
  where: ModuleIconAndTextWhereUniqueInput;
};

/** Identifies documents */
export type ModuleIconAndTextWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ModuleIconAndTextWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ModuleIconAndTextWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ModuleIconAndTextWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  headingText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headingText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headingText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headingText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headingText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headingText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headingText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headingText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headingText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headingText_starts_with?: InputMaybe<Scalars['String']>;
  icon?: InputMaybe<AssetWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
};

/** References ModuleIconAndText record uniquely */
export type ModuleIconAndTextWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type ModuleImageAndText = {
  __typename?: 'ModuleImageAndText';
  heading?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  image?: Maybe<Asset>;
  /** System stage field */
  stage: Stage;
  text?: Maybe<RichText>;
};


export type ModuleImageAndTextImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ModuleImageAndTextConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ModuleImageAndTextWhereUniqueInput;
};

/** A connection to a list of items. */
export type ModuleImageAndTextConnection = {
  __typename?: 'ModuleImageAndTextConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ModuleImageAndTextEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ModuleImageAndTextCreateInput = {
  heading?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<AssetCreateOneInlineInput>;
  text?: InputMaybe<Scalars['RichTextAST']>;
};

export type ModuleImageAndTextCreateManyInlineInput = {
  /** Create and connect multiple existing ModuleImageAndText documents */
  create?: InputMaybe<Array<ModuleImageAndTextCreateInput>>;
};

export type ModuleImageAndTextCreateOneInlineInput = {
  /** Create and connect one ModuleImageAndText document */
  create?: InputMaybe<ModuleImageAndTextCreateInput>;
};

export type ModuleImageAndTextCreateWithPositionInput = {
  /** Document to create */
  data: ModuleImageAndTextCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type ModuleImageAndTextEdge = {
  __typename?: 'ModuleImageAndTextEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ModuleImageAndText;
};

/** Identifies documents */
export type ModuleImageAndTextManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ModuleImageAndTextWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ModuleImageAndTextWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ModuleImageAndTextWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  heading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  heading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  heading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  heading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  heading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  heading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  heading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  heading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  heading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  heading_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
};

export enum ModuleImageAndTextOrderByInput {
  HeadingAsc = 'heading_ASC',
  HeadingDesc = 'heading_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type ModuleImageAndTextParent = SectionImageAndTextGrid;

export type ModuleImageAndTextParentConnectInput = {
  SectionImageAndTextGrid?: InputMaybe<SectionImageAndTextGridConnectInput>;
};

export type ModuleImageAndTextParentCreateInput = {
  SectionImageAndTextGrid?: InputMaybe<SectionImageAndTextGridCreateInput>;
};

export type ModuleImageAndTextParentCreateManyInlineInput = {
  /** Connect multiple existing ModuleImageAndTextParent documents */
  connect?: InputMaybe<Array<ModuleImageAndTextParentWhereUniqueInput>>;
  /** Create and connect multiple existing ModuleImageAndTextParent documents */
  create?: InputMaybe<Array<ModuleImageAndTextParentCreateInput>>;
};

export type ModuleImageAndTextParentCreateOneInlineInput = {
  /** Connect one existing ModuleImageAndTextParent document */
  connect?: InputMaybe<ModuleImageAndTextParentWhereUniqueInput>;
  /** Create and connect one ModuleImageAndTextParent document */
  create?: InputMaybe<ModuleImageAndTextParentCreateInput>;
};

export type ModuleImageAndTextParentUpdateInput = {
  SectionImageAndTextGrid?: InputMaybe<SectionImageAndTextGridUpdateInput>;
};

export type ModuleImageAndTextParentUpdateManyInlineInput = {
  /** Connect multiple existing ModuleImageAndTextParent documents */
  connect?: InputMaybe<Array<ModuleImageAndTextParentConnectInput>>;
  /** Create and connect multiple ModuleImageAndTextParent documents */
  create?: InputMaybe<Array<ModuleImageAndTextParentCreateInput>>;
  /** Delete multiple ModuleImageAndTextParent documents */
  delete?: InputMaybe<Array<ModuleImageAndTextParentWhereUniqueInput>>;
  /** Disconnect multiple ModuleImageAndTextParent documents */
  disconnect?: InputMaybe<Array<ModuleImageAndTextParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ModuleImageAndTextParent documents */
  set?: InputMaybe<Array<ModuleImageAndTextParentWhereUniqueInput>>;
  /** Update multiple ModuleImageAndTextParent documents */
  update?: InputMaybe<Array<ModuleImageAndTextParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ModuleImageAndTextParent documents */
  upsert?: InputMaybe<Array<ModuleImageAndTextParentUpsertWithNestedWhereUniqueInput>>;
};

export type ModuleImageAndTextParentUpdateManyWithNestedWhereInput = {
  SectionImageAndTextGrid?: InputMaybe<SectionImageAndTextGridUpdateManyWithNestedWhereInput>;
};

export type ModuleImageAndTextParentUpdateOneInlineInput = {
  /** Connect existing ModuleImageAndTextParent document */
  connect?: InputMaybe<ModuleImageAndTextParentWhereUniqueInput>;
  /** Create and connect one ModuleImageAndTextParent document */
  create?: InputMaybe<ModuleImageAndTextParentCreateInput>;
  /** Delete currently connected ModuleImageAndTextParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected ModuleImageAndTextParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single ModuleImageAndTextParent document */
  update?: InputMaybe<ModuleImageAndTextParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ModuleImageAndTextParent document */
  upsert?: InputMaybe<ModuleImageAndTextParentUpsertWithNestedWhereUniqueInput>;
};

export type ModuleImageAndTextParentUpdateWithNestedWhereUniqueInput = {
  SectionImageAndTextGrid?: InputMaybe<SectionImageAndTextGridUpdateWithNestedWhereUniqueInput>;
};

export type ModuleImageAndTextParentUpsertWithNestedWhereUniqueInput = {
  SectionImageAndTextGrid?: InputMaybe<SectionImageAndTextGridUpsertWithNestedWhereUniqueInput>;
};

export type ModuleImageAndTextParentWhereInput = {
  SectionImageAndTextGrid?: InputMaybe<SectionImageAndTextGridWhereInput>;
};

export type ModuleImageAndTextParentWhereUniqueInput = {
  SectionImageAndTextGrid?: InputMaybe<SectionImageAndTextGridWhereUniqueInput>;
};

export type ModuleImageAndTextUpdateInput = {
  heading?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<AssetUpdateOneInlineInput>;
  text?: InputMaybe<Scalars['RichTextAST']>;
};

export type ModuleImageAndTextUpdateManyInlineInput = {
  /** Create and connect multiple ModuleImageAndText component instances */
  create?: InputMaybe<Array<ModuleImageAndTextCreateWithPositionInput>>;
  /** Delete multiple ModuleImageAndText documents */
  delete?: InputMaybe<Array<ModuleImageAndTextWhereUniqueInput>>;
  /** Update multiple ModuleImageAndText component instances */
  update?: InputMaybe<Array<ModuleImageAndTextUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple ModuleImageAndText component instances */
  upsert?: InputMaybe<Array<ModuleImageAndTextUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ModuleImageAndTextUpdateManyInput = {
  heading?: InputMaybe<Scalars['String']>;
  text?: InputMaybe<Scalars['RichTextAST']>;
};

export type ModuleImageAndTextUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ModuleImageAndTextUpdateManyInput;
  /** Document search */
  where: ModuleImageAndTextWhereInput;
};

export type ModuleImageAndTextUpdateOneInlineInput = {
  /** Create and connect one ModuleImageAndText document */
  create?: InputMaybe<ModuleImageAndTextCreateInput>;
  /** Delete currently connected ModuleImageAndText document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single ModuleImageAndText document */
  update?: InputMaybe<ModuleImageAndTextUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ModuleImageAndText document */
  upsert?: InputMaybe<ModuleImageAndTextUpsertWithNestedWhereUniqueInput>;
};

export type ModuleImageAndTextUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<ModuleImageAndTextUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ModuleImageAndTextWhereUniqueInput;
};

export type ModuleImageAndTextUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ModuleImageAndTextUpdateInput;
  /** Unique document search */
  where: ModuleImageAndTextWhereUniqueInput;
};

export type ModuleImageAndTextUpsertInput = {
  /** Create document if it didn't exist */
  create: ModuleImageAndTextCreateInput;
  /** Update document if it exists */
  update: ModuleImageAndTextUpdateInput;
};

export type ModuleImageAndTextUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<ModuleImageAndTextUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ModuleImageAndTextWhereUniqueInput;
};

export type ModuleImageAndTextUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ModuleImageAndTextUpsertInput;
  /** Unique document search */
  where: ModuleImageAndTextWhereUniqueInput;
};

/** Identifies documents */
export type ModuleImageAndTextWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ModuleImageAndTextWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ModuleImageAndTextWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ModuleImageAndTextWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  heading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  heading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  heading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  heading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  heading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  heading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  heading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  heading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  heading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  heading_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
};

/** References ModuleImageAndText record uniquely */
export type ModuleImageAndTextWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type ModuleMemberBenefitsTab = {
  __typename?: 'ModuleMemberBenefitsTab';
  adminTitle?: Maybe<Scalars['String']>;
  benefits: Array<Scalars['String']>;
  ctaButtons: Array<Cta>;
  headline?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** e.g. gold, platinum */
  levelTag?: Maybe<Scalars['String']>;
  levelTitle?: Maybe<Scalars['String']>;
  /** System stage field */
  stage: Stage;
  subText?: Maybe<Scalars['String']>;
};


export type ModuleMemberBenefitsTabCtaButtonsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<CtaOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CtaWhereInput>;
};

export type ModuleMemberBenefitsTabConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ModuleMemberBenefitsTabWhereUniqueInput;
};

/** A connection to a list of items. */
export type ModuleMemberBenefitsTabConnection = {
  __typename?: 'ModuleMemberBenefitsTabConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ModuleMemberBenefitsTabEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ModuleMemberBenefitsTabCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  benefits?: InputMaybe<Array<Scalars['String']>>;
  ctaButtons?: InputMaybe<CtaCreateManyInlineInput>;
  headline?: InputMaybe<Scalars['String']>;
  levelTag?: InputMaybe<Scalars['String']>;
  levelTitle?: InputMaybe<Scalars['String']>;
  subText?: InputMaybe<Scalars['String']>;
};

export type ModuleMemberBenefitsTabCreateManyInlineInput = {
  /** Create and connect multiple existing ModuleMemberBenefitsTab documents */
  create?: InputMaybe<Array<ModuleMemberBenefitsTabCreateInput>>;
};

export type ModuleMemberBenefitsTabCreateOneInlineInput = {
  /** Create and connect one ModuleMemberBenefitsTab document */
  create?: InputMaybe<ModuleMemberBenefitsTabCreateInput>;
};

export type ModuleMemberBenefitsTabCreateWithPositionInput = {
  /** Document to create */
  data: ModuleMemberBenefitsTabCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type ModuleMemberBenefitsTabEdge = {
  __typename?: 'ModuleMemberBenefitsTabEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ModuleMemberBenefitsTab;
};

/** Identifies documents */
export type ModuleMemberBenefitsTabManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ModuleMemberBenefitsTabWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ModuleMemberBenefitsTabWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ModuleMemberBenefitsTabWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  benefits?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains *all* items provided to the filter */
  benefits_contains_all?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  benefits_contains_none?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains at least one item provided to the filter */
  benefits_contains_some?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  benefits_not?: InputMaybe<Array<Scalars['String']>>;
  ctaButtons_every?: InputMaybe<CtaWhereInput>;
  ctaButtons_none?: InputMaybe<CtaWhereInput>;
  ctaButtons_some?: InputMaybe<CtaWhereInput>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  levelTag?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  levelTag_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  levelTag_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  levelTag_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  levelTag_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  levelTag_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  levelTag_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  levelTag_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  levelTag_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  levelTag_starts_with?: InputMaybe<Scalars['String']>;
  levelTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  levelTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  levelTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  levelTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  levelTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  levelTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  levelTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  levelTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  levelTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  levelTitle_starts_with?: InputMaybe<Scalars['String']>;
  subText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subText_starts_with?: InputMaybe<Scalars['String']>;
};

export enum ModuleMemberBenefitsTabOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  BenefitsAsc = 'benefits_ASC',
  BenefitsDesc = 'benefits_DESC',
  HeadlineAsc = 'headline_ASC',
  HeadlineDesc = 'headline_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LevelTagAsc = 'levelTag_ASC',
  LevelTagDesc = 'levelTag_DESC',
  LevelTitleAsc = 'levelTitle_ASC',
  LevelTitleDesc = 'levelTitle_DESC',
  SubTextAsc = 'subText_ASC',
  SubTextDesc = 'subText_DESC'
}

export type ModuleMemberBenefitsTabUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  benefits?: InputMaybe<Array<Scalars['String']>>;
  ctaButtons?: InputMaybe<CtaUpdateManyInlineInput>;
  headline?: InputMaybe<Scalars['String']>;
  levelTag?: InputMaybe<Scalars['String']>;
  levelTitle?: InputMaybe<Scalars['String']>;
  subText?: InputMaybe<Scalars['String']>;
};

export type ModuleMemberBenefitsTabUpdateManyInlineInput = {
  /** Create and connect multiple ModuleMemberBenefitsTab component instances */
  create?: InputMaybe<Array<ModuleMemberBenefitsTabCreateWithPositionInput>>;
  /** Delete multiple ModuleMemberBenefitsTab documents */
  delete?: InputMaybe<Array<ModuleMemberBenefitsTabWhereUniqueInput>>;
  /** Update multiple ModuleMemberBenefitsTab component instances */
  update?: InputMaybe<Array<ModuleMemberBenefitsTabUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple ModuleMemberBenefitsTab component instances */
  upsert?: InputMaybe<Array<ModuleMemberBenefitsTabUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ModuleMemberBenefitsTabUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  benefits?: InputMaybe<Array<Scalars['String']>>;
  headline?: InputMaybe<Scalars['String']>;
  levelTag?: InputMaybe<Scalars['String']>;
  levelTitle?: InputMaybe<Scalars['String']>;
  subText?: InputMaybe<Scalars['String']>;
};

export type ModuleMemberBenefitsTabUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ModuleMemberBenefitsTabUpdateManyInput;
  /** Document search */
  where: ModuleMemberBenefitsTabWhereInput;
};

export type ModuleMemberBenefitsTabUpdateOneInlineInput = {
  /** Create and connect one ModuleMemberBenefitsTab document */
  create?: InputMaybe<ModuleMemberBenefitsTabCreateInput>;
  /** Delete currently connected ModuleMemberBenefitsTab document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single ModuleMemberBenefitsTab document */
  update?: InputMaybe<ModuleMemberBenefitsTabUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ModuleMemberBenefitsTab document */
  upsert?: InputMaybe<ModuleMemberBenefitsTabUpsertWithNestedWhereUniqueInput>;
};

export type ModuleMemberBenefitsTabUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<ModuleMemberBenefitsTabUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ModuleMemberBenefitsTabWhereUniqueInput;
};

export type ModuleMemberBenefitsTabUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ModuleMemberBenefitsTabUpdateInput;
  /** Unique document search */
  where: ModuleMemberBenefitsTabWhereUniqueInput;
};

export type ModuleMemberBenefitsTabUpsertInput = {
  /** Create document if it didn't exist */
  create: ModuleMemberBenefitsTabCreateInput;
  /** Update document if it exists */
  update: ModuleMemberBenefitsTabUpdateInput;
};

export type ModuleMemberBenefitsTabUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<ModuleMemberBenefitsTabUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ModuleMemberBenefitsTabWhereUniqueInput;
};

export type ModuleMemberBenefitsTabUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ModuleMemberBenefitsTabUpsertInput;
  /** Unique document search */
  where: ModuleMemberBenefitsTabWhereUniqueInput;
};

/** Identifies documents */
export type ModuleMemberBenefitsTabWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ModuleMemberBenefitsTabWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ModuleMemberBenefitsTabWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ModuleMemberBenefitsTabWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  benefits?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains *all* items provided to the filter */
  benefits_contains_all?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  benefits_contains_none?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains at least one item provided to the filter */
  benefits_contains_some?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  benefits_not?: InputMaybe<Array<Scalars['String']>>;
  ctaButtons_every?: InputMaybe<CtaWhereInput>;
  ctaButtons_none?: InputMaybe<CtaWhereInput>;
  ctaButtons_some?: InputMaybe<CtaWhereInput>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  levelTag?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  levelTag_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  levelTag_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  levelTag_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  levelTag_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  levelTag_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  levelTag_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  levelTag_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  levelTag_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  levelTag_starts_with?: InputMaybe<Scalars['String']>;
  levelTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  levelTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  levelTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  levelTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  levelTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  levelTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  levelTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  levelTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  levelTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  levelTitle_starts_with?: InputMaybe<Scalars['String']>;
  subText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subText_starts_with?: InputMaybe<Scalars['String']>;
};

/** References ModuleMemberBenefitsTab record uniquely */
export type ModuleMemberBenefitsTabWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type ModulePromoBanner = Node & {
  __typename?: 'ModulePromoBanner';
  adminTitle?: Maybe<Scalars['String']>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  desktopImage?: Maybe<Asset>;
  /** Get the document in other stages */
  documentInStages: Array<ModulePromoBanner>;
  /** List of ModulePromoBanner versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  mobileImage?: Maybe<Asset>;
  openInANewWindow?: Maybe<Scalars['Boolean']>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  sectionCollectionMains: Array<SectionCollectionMain>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  urlLink?: Maybe<Scalars['String']>;
};


export type ModulePromoBannerCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ModulePromoBannerDesktopImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ModulePromoBannerDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type ModulePromoBannerHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type ModulePromoBannerMobileImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ModulePromoBannerPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ModulePromoBannerScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type ModulePromoBannerSectionCollectionMainsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<SectionCollectionMainOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionCollectionMainWhereInput>;
};


export type ModulePromoBannerUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ModulePromoBannerConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ModulePromoBannerWhereUniqueInput;
};

/** A connection to a list of items. */
export type ModulePromoBannerConnection = {
  __typename?: 'ModulePromoBannerConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ModulePromoBannerEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ModulePromoBannerCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  desktopImage?: InputMaybe<AssetCreateOneInlineInput>;
  mobileImage?: InputMaybe<AssetCreateOneInlineInput>;
  openInANewWindow?: InputMaybe<Scalars['Boolean']>;
  sectionCollectionMains?: InputMaybe<SectionCollectionMainCreateManyInlineInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  urlLink?: InputMaybe<Scalars['String']>;
};

export type ModulePromoBannerCreateManyInlineInput = {
  /** Connect multiple existing ModulePromoBanner documents */
  connect?: InputMaybe<Array<ModulePromoBannerWhereUniqueInput>>;
  /** Create and connect multiple existing ModulePromoBanner documents */
  create?: InputMaybe<Array<ModulePromoBannerCreateInput>>;
};

export type ModulePromoBannerCreateOneInlineInput = {
  /** Connect one existing ModulePromoBanner document */
  connect?: InputMaybe<ModulePromoBannerWhereUniqueInput>;
  /** Create and connect one ModulePromoBanner document */
  create?: InputMaybe<ModulePromoBannerCreateInput>;
};

/** An edge in a connection. */
export type ModulePromoBannerEdge = {
  __typename?: 'ModulePromoBannerEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ModulePromoBanner;
};

/** Identifies documents */
export type ModulePromoBannerManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ModulePromoBannerWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ModulePromoBannerWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ModulePromoBannerWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  desktopImage?: InputMaybe<AssetWhereInput>;
  documentInStages_every?: InputMaybe<ModulePromoBannerWhereStageInput>;
  documentInStages_none?: InputMaybe<ModulePromoBannerWhereStageInput>;
  documentInStages_some?: InputMaybe<ModulePromoBannerWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  mobileImage?: InputMaybe<AssetWhereInput>;
  openInANewWindow?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  openInANewWindow_not?: InputMaybe<Scalars['Boolean']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  sectionCollectionMains_every?: InputMaybe<SectionCollectionMainWhereInput>;
  sectionCollectionMains_none?: InputMaybe<SectionCollectionMainWhereInput>;
  sectionCollectionMains_some?: InputMaybe<SectionCollectionMainWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  urlLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  urlLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  urlLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  urlLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  urlLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  urlLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  urlLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  urlLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  urlLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  urlLink_starts_with?: InputMaybe<Scalars['String']>;
};

export enum ModulePromoBannerOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  OpenInANewWindowAsc = 'openInANewWindow_ASC',
  OpenInANewWindowDesc = 'openInANewWindow_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  UrlLinkAsc = 'urlLink_ASC',
  UrlLinkDesc = 'urlLink_DESC'
}

export type ModulePromoBannerUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  desktopImage?: InputMaybe<AssetUpdateOneInlineInput>;
  mobileImage?: InputMaybe<AssetUpdateOneInlineInput>;
  openInANewWindow?: InputMaybe<Scalars['Boolean']>;
  sectionCollectionMains?: InputMaybe<SectionCollectionMainUpdateManyInlineInput>;
  urlLink?: InputMaybe<Scalars['String']>;
};

export type ModulePromoBannerUpdateManyInlineInput = {
  /** Connect multiple existing ModulePromoBanner documents */
  connect?: InputMaybe<Array<ModulePromoBannerConnectInput>>;
  /** Create and connect multiple ModulePromoBanner documents */
  create?: InputMaybe<Array<ModulePromoBannerCreateInput>>;
  /** Delete multiple ModulePromoBanner documents */
  delete?: InputMaybe<Array<ModulePromoBannerWhereUniqueInput>>;
  /** Disconnect multiple ModulePromoBanner documents */
  disconnect?: InputMaybe<Array<ModulePromoBannerWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ModulePromoBanner documents */
  set?: InputMaybe<Array<ModulePromoBannerWhereUniqueInput>>;
  /** Update multiple ModulePromoBanner documents */
  update?: InputMaybe<Array<ModulePromoBannerUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ModulePromoBanner documents */
  upsert?: InputMaybe<Array<ModulePromoBannerUpsertWithNestedWhereUniqueInput>>;
};

export type ModulePromoBannerUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  openInANewWindow?: InputMaybe<Scalars['Boolean']>;
};

export type ModulePromoBannerUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ModulePromoBannerUpdateManyInput;
  /** Document search */
  where: ModulePromoBannerWhereInput;
};

export type ModulePromoBannerUpdateOneInlineInput = {
  /** Connect existing ModulePromoBanner document */
  connect?: InputMaybe<ModulePromoBannerWhereUniqueInput>;
  /** Create and connect one ModulePromoBanner document */
  create?: InputMaybe<ModulePromoBannerCreateInput>;
  /** Delete currently connected ModulePromoBanner document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected ModulePromoBanner document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single ModulePromoBanner document */
  update?: InputMaybe<ModulePromoBannerUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ModulePromoBanner document */
  upsert?: InputMaybe<ModulePromoBannerUpsertWithNestedWhereUniqueInput>;
};

export type ModulePromoBannerUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ModulePromoBannerUpdateInput;
  /** Unique document search */
  where: ModulePromoBannerWhereUniqueInput;
};

export type ModulePromoBannerUpsertInput = {
  /** Create document if it didn't exist */
  create: ModulePromoBannerCreateInput;
  /** Update document if it exists */
  update: ModulePromoBannerUpdateInput;
};

export type ModulePromoBannerUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ModulePromoBannerUpsertInput;
  /** Unique document search */
  where: ModulePromoBannerWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type ModulePromoBannerWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type ModulePromoBannerWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ModulePromoBannerWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ModulePromoBannerWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ModulePromoBannerWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  desktopImage?: InputMaybe<AssetWhereInput>;
  documentInStages_every?: InputMaybe<ModulePromoBannerWhereStageInput>;
  documentInStages_none?: InputMaybe<ModulePromoBannerWhereStageInput>;
  documentInStages_some?: InputMaybe<ModulePromoBannerWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  mobileImage?: InputMaybe<AssetWhereInput>;
  openInANewWindow?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  openInANewWindow_not?: InputMaybe<Scalars['Boolean']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  sectionCollectionMains_every?: InputMaybe<SectionCollectionMainWhereInput>;
  sectionCollectionMains_none?: InputMaybe<SectionCollectionMainWhereInput>;
  sectionCollectionMains_some?: InputMaybe<SectionCollectionMainWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  urlLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  urlLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  urlLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  urlLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  urlLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  urlLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  urlLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  urlLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  urlLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  urlLink_starts_with?: InputMaybe<Scalars['String']>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type ModulePromoBannerWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ModulePromoBannerWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ModulePromoBannerWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ModulePromoBannerWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<ModulePromoBannerWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References ModulePromoBanner record uniquely */
export type ModulePromoBannerWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  urlLink?: InputMaybe<Scalars['String']>;
};

export type MultiCollectionSlider = Node & {
  __typename?: 'MultiCollectionSlider';
  adminTitle?: Maybe<Scalars['String']>;
  collections: Array<MultiCollectionSlidercollectionsUnion>;
  configSearches: Array<ConfigSearch>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<MultiCollectionSlider>;
  fullWidthTemplates: Array<CmsPage>;
  headline?: Maybe<RichText>;
  /** List of MultiCollectionSlider versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type MultiCollectionSliderCollectionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type MultiCollectionSliderConfigSearchesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigSearchWhereInput>;
};


export type MultiCollectionSliderCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type MultiCollectionSliderDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type MultiCollectionSliderFullWidthTemplatesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsPageWhereInput>;
};


export type MultiCollectionSliderHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type MultiCollectionSliderPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type MultiCollectionSliderScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type MultiCollectionSliderUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type MultiCollectionSliderConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: MultiCollectionSliderWhereUniqueInput;
};

/** A connection to a list of items. */
export type MultiCollectionSliderConnection = {
  __typename?: 'MultiCollectionSliderConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<MultiCollectionSliderEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type MultiCollectionSliderCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  collections?: InputMaybe<MultiCollectionSlidercollectionsUnionCreateManyInlineInput>;
  configSearches?: InputMaybe<ConfigSearchCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  fullWidthTemplates?: InputMaybe<CmsPageCreateManyInlineInput>;
  headline?: InputMaybe<Scalars['RichTextAST']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type MultiCollectionSliderCreateManyInlineInput = {
  /** Connect multiple existing MultiCollectionSlider documents */
  connect?: InputMaybe<Array<MultiCollectionSliderWhereUniqueInput>>;
  /** Create and connect multiple existing MultiCollectionSlider documents */
  create?: InputMaybe<Array<MultiCollectionSliderCreateInput>>;
};

export type MultiCollectionSliderCreateOneInlineInput = {
  /** Connect one existing MultiCollectionSlider document */
  connect?: InputMaybe<MultiCollectionSliderWhereUniqueInput>;
  /** Create and connect one MultiCollectionSlider document */
  create?: InputMaybe<MultiCollectionSliderCreateInput>;
};

/** An edge in a connection. */
export type MultiCollectionSliderEdge = {
  __typename?: 'MultiCollectionSliderEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: MultiCollectionSlider;
};

/** Identifies documents */
export type MultiCollectionSliderManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<MultiCollectionSliderWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<MultiCollectionSliderWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<MultiCollectionSliderWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  /** All values in which the union is empty. */
  collections_empty?: InputMaybe<Scalars['Boolean']>;
  /** Matches if the modular component contains at least one connection to the item provided to the filter */
  collections_some?: InputMaybe<MultiCollectionSlidercollectionsUnionWhereInput>;
  configSearches_every?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_none?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_some?: InputMaybe<ConfigSearchWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<MultiCollectionSliderWhereStageInput>;
  documentInStages_none?: InputMaybe<MultiCollectionSliderWhereStageInput>;
  documentInStages_some?: InputMaybe<MultiCollectionSliderWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum MultiCollectionSliderOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type MultiCollectionSliderUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  collections?: InputMaybe<MultiCollectionSlidercollectionsUnionUpdateManyInlineInput>;
  configSearches?: InputMaybe<ConfigSearchUpdateManyInlineInput>;
  fullWidthTemplates?: InputMaybe<CmsPageUpdateManyInlineInput>;
  headline?: InputMaybe<Scalars['RichTextAST']>;
};

export type MultiCollectionSliderUpdateManyInlineInput = {
  /** Connect multiple existing MultiCollectionSlider documents */
  connect?: InputMaybe<Array<MultiCollectionSliderConnectInput>>;
  /** Create and connect multiple MultiCollectionSlider documents */
  create?: InputMaybe<Array<MultiCollectionSliderCreateInput>>;
  /** Delete multiple MultiCollectionSlider documents */
  delete?: InputMaybe<Array<MultiCollectionSliderWhereUniqueInput>>;
  /** Disconnect multiple MultiCollectionSlider documents */
  disconnect?: InputMaybe<Array<MultiCollectionSliderWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing MultiCollectionSlider documents */
  set?: InputMaybe<Array<MultiCollectionSliderWhereUniqueInput>>;
  /** Update multiple MultiCollectionSlider documents */
  update?: InputMaybe<Array<MultiCollectionSliderUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple MultiCollectionSlider documents */
  upsert?: InputMaybe<Array<MultiCollectionSliderUpsertWithNestedWhereUniqueInput>>;
};

export type MultiCollectionSliderUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  headline?: InputMaybe<Scalars['RichTextAST']>;
};

export type MultiCollectionSliderUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: MultiCollectionSliderUpdateManyInput;
  /** Document search */
  where: MultiCollectionSliderWhereInput;
};

export type MultiCollectionSliderUpdateOneInlineInput = {
  /** Connect existing MultiCollectionSlider document */
  connect?: InputMaybe<MultiCollectionSliderWhereUniqueInput>;
  /** Create and connect one MultiCollectionSlider document */
  create?: InputMaybe<MultiCollectionSliderCreateInput>;
  /** Delete currently connected MultiCollectionSlider document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected MultiCollectionSlider document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single MultiCollectionSlider document */
  update?: InputMaybe<MultiCollectionSliderUpdateWithNestedWhereUniqueInput>;
  /** Upsert single MultiCollectionSlider document */
  upsert?: InputMaybe<MultiCollectionSliderUpsertWithNestedWhereUniqueInput>;
};

export type MultiCollectionSliderUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: MultiCollectionSliderUpdateInput;
  /** Unique document search */
  where: MultiCollectionSliderWhereUniqueInput;
};

export type MultiCollectionSliderUpsertInput = {
  /** Create document if it didn't exist */
  create: MultiCollectionSliderCreateInput;
  /** Update document if it exists */
  update: MultiCollectionSliderUpdateInput;
};

export type MultiCollectionSliderUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: MultiCollectionSliderUpsertInput;
  /** Unique document search */
  where: MultiCollectionSliderWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type MultiCollectionSliderWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type MultiCollectionSliderWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<MultiCollectionSliderWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<MultiCollectionSliderWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<MultiCollectionSliderWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  /** All values in which the union is empty. */
  collections_empty?: InputMaybe<Scalars['Boolean']>;
  /** Matches if the modular component contains at least one connection to the item provided to the filter */
  collections_some?: InputMaybe<MultiCollectionSlidercollectionsUnionWhereInput>;
  configSearches_every?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_none?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_some?: InputMaybe<ConfigSearchWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<MultiCollectionSliderWhereStageInput>;
  documentInStages_none?: InputMaybe<MultiCollectionSliderWhereStageInput>;
  documentInStages_some?: InputMaybe<MultiCollectionSliderWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type MultiCollectionSliderWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<MultiCollectionSliderWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<MultiCollectionSliderWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<MultiCollectionSliderWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<MultiCollectionSliderWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References MultiCollectionSlider record uniquely */
export type MultiCollectionSliderWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type MultiCollectionSlidercollectionsUnion = CollectionLink;

export type MultiCollectionSlidercollectionsUnionConnectInput = {
  CollectionLink?: InputMaybe<CollectionLinkConnectInput>;
};

export type MultiCollectionSlidercollectionsUnionCreateInput = {
  CollectionLink?: InputMaybe<CollectionLinkCreateInput>;
};

export type MultiCollectionSlidercollectionsUnionCreateManyInlineInput = {
  /** Create and connect multiple existing MultiCollectionSlidercollectionsUnion documents */
  create?: InputMaybe<Array<MultiCollectionSlidercollectionsUnionCreateInput>>;
};

export type MultiCollectionSlidercollectionsUnionCreateOneInlineInput = {
  /** Create and connect one MultiCollectionSlidercollectionsUnion document */
  create?: InputMaybe<MultiCollectionSlidercollectionsUnionCreateInput>;
};

export type MultiCollectionSlidercollectionsUnionCreateWithPositionInput = {
  CollectionLink?: InputMaybe<CollectionLinkCreateWithPositionInput>;
};

export type MultiCollectionSlidercollectionsUnionUpdateInput = {
  CollectionLink?: InputMaybe<CollectionLinkUpdateInput>;
};

export type MultiCollectionSlidercollectionsUnionUpdateManyInlineInput = {
  /** Create and connect multiple MultiCollectionSlidercollectionsUnion component instances */
  create?: InputMaybe<Array<MultiCollectionSlidercollectionsUnionCreateWithPositionInput>>;
  /** Delete multiple MultiCollectionSlidercollectionsUnion documents */
  delete?: InputMaybe<Array<MultiCollectionSlidercollectionsUnionWhereUniqueInput>>;
  /** Update multiple MultiCollectionSlidercollectionsUnion component instances */
  update?: InputMaybe<Array<MultiCollectionSlidercollectionsUnionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple MultiCollectionSlidercollectionsUnion component instances */
  upsert?: InputMaybe<Array<MultiCollectionSlidercollectionsUnionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type MultiCollectionSlidercollectionsUnionUpdateManyWithNestedWhereInput = {
  CollectionLink?: InputMaybe<CollectionLinkUpdateManyWithNestedWhereInput>;
};

export type MultiCollectionSlidercollectionsUnionUpdateOneInlineInput = {
  /** Create and connect one MultiCollectionSlidercollectionsUnion document */
  create?: InputMaybe<MultiCollectionSlidercollectionsUnionCreateInput>;
  /** Delete currently connected MultiCollectionSlidercollectionsUnion document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single MultiCollectionSlidercollectionsUnion document */
  update?: InputMaybe<MultiCollectionSlidercollectionsUnionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single MultiCollectionSlidercollectionsUnion document */
  upsert?: InputMaybe<MultiCollectionSlidercollectionsUnionUpsertWithNestedWhereUniqueInput>;
};

export type MultiCollectionSlidercollectionsUnionUpdateWithNestedWhereUniqueAndPositionInput = {
  CollectionLink?: InputMaybe<CollectionLinkUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type MultiCollectionSlidercollectionsUnionUpdateWithNestedWhereUniqueInput = {
  CollectionLink?: InputMaybe<CollectionLinkUpdateWithNestedWhereUniqueInput>;
};

export type MultiCollectionSlidercollectionsUnionUpsertWithNestedWhereUniqueAndPositionInput = {
  CollectionLink?: InputMaybe<CollectionLinkUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type MultiCollectionSlidercollectionsUnionUpsertWithNestedWhereUniqueInput = {
  CollectionLink?: InputMaybe<CollectionLinkUpsertWithNestedWhereUniqueInput>;
};

export type MultiCollectionSlidercollectionsUnionWhereInput = {
  CollectionLink?: InputMaybe<CollectionLinkWhereInput>;
};

export type MultiCollectionSlidercollectionsUnionWhereUniqueInput = {
  CollectionLink?: InputMaybe<CollectionLinkWhereUniqueInput>;
};

export type Mutation = {
  __typename?: 'Mutation';
  /**
   * Create one asset
   * @deprecated Asset mutations will be overhauled soon
   */
  createAsset?: Maybe<Asset>;
  /** Create one blogArticle */
  createBlogArticle?: Maybe<BlogArticle>;
  /** Create one blogAuthor */
  createBlogAuthor?: Maybe<BlogAuthor>;
  /** Create one brandLogoGrid */
  createBrandLogoGrid?: Maybe<BrandLogoGrid>;
  /** Create one brandsBrandLogo */
  createBrandsBrandLogo?: Maybe<BrandsBrandLogo>;
  /** Create one cMSPage */
  createCMSPage?: Maybe<CmsPage>;
  /** Create one collectionPage */
  createCollectionPage?: Maybe<CollectionPage>;
  /** Create one configCareer */
  createConfigCareer?: Maybe<ConfigCareer>;
  /** Create one configSalonBooking */
  createConfigSalonBooking?: Maybe<ConfigSalonBooking>;
  /** Create one configSalonMenu */
  createConfigSalonMenu?: Maybe<ConfigSalonMenu>;
  /** Create one configSearch */
  createConfigSearch?: Maybe<ConfigSearch>;
  /** Create one editorialText */
  createEditorialText?: Maybe<EditorialText>;
  /** Create one featureProductCarouselTabbed */
  createFeatureProductCarouselTabbed?: Maybe<FeatureProductCarouselTabbed>;
  /** Create one footerConfig */
  createFooterConfig?: Maybe<FooterConfig>;
  /** Create one headerConfig */
  createHeaderConfig?: Maybe<HeaderConfig>;
  /** Create one heroBanner */
  createHeroBanner?: Maybe<HeroBanner>;
  /** Create one joinCTApanel */
  createJoinCTApanel?: Maybe<JoinCtApanel>;
  /** Create one modulePromoBanner */
  createModulePromoBanner?: Maybe<ModulePromoBanner>;
  /** Create one multiCollectionSlider */
  createMultiCollectionSlider?: Maybe<MultiCollectionSlider>;
  /** Create one offerTiles */
  createOfferTiles?: Maybe<OfferTiles>;
  /** Create one pageBuyingGuide */
  createPageBuyingGuide?: Maybe<PageBuyingGuide>;
  /** Create one productBenefitsGrid */
  createProductBenefitsGrid?: Maybe<ProductBenefitsGrid>;
  /** Create one productHowTo */
  createProductHowTo?: Maybe<ProductHowTo>;
  /** Create one productPage */
  createProductPage?: Maybe<ProductPage>;
  /** Create one proposition */
  createProposition?: Maybe<Proposition>;
  /** Create one scheduledRelease */
  createScheduledRelease?: Maybe<ScheduledRelease>;
  /** Create one sectionAccountSignupCta */
  createSectionAccountSignupCta?: Maybe<SectionAccountSignupCta>;
  /** Create one sectionBlogListing */
  createSectionBlogListing?: Maybe<SectionBlogListing>;
  /** Create one sectionCollectionCarousel */
  createSectionCollectionCarousel?: Maybe<SectionCollectionCarousel>;
  /** Create one sectionCollectionDropDown */
  createSectionCollectionDropDown?: Maybe<SectionCollectionDropDown>;
  /** Create one sectionCollectionFeatureLarge */
  createSectionCollectionFeatureLarge?: Maybe<SectionCollectionFeatureLarge>;
  /** Create one sectionCollectionMain */
  createSectionCollectionMain?: Maybe<SectionCollectionMain>;
  /** Create one sectionCollectionSubcategoryLink */
  createSectionCollectionSubcategoryLink?: Maybe<SectionCollectionSubcategoryLink>;
  /** Create one sectionCtaButton */
  createSectionCtaButton?: Maybe<SectionCtaButton>;
  /** Create one sectionFullWidthImage */
  createSectionFullWidthImage?: Maybe<SectionFullWidthImage>;
  /** Create one sectionImageAndTextGrid */
  createSectionImageAndTextGrid?: Maybe<SectionImageAndTextGrid>;
  /** Create one sectionImageTextOverlay */
  createSectionImageTextOverlay?: Maybe<SectionImageTextOverlay>;
  /** Create one sectionPreezieProductFinder */
  createSectionPreezieProductFinder?: Maybe<SectionPreezieProductFinder>;
  /** Create one sectionProductMain */
  createSectionProductMain?: Maybe<SectionProductMain>;
  /** Create one sectionProductReview */
  createSectionProductReview?: Maybe<SectionProductReview>;
  /** Create one sectionProductSpotlightGrid */
  createSectionProductSpotlightGrid?: Maybe<SectionProductSpotlightGrid>;
  /** Create one sectionProductSpotlightLarge */
  createSectionProductSpotlightLarge?: Maybe<SectionProductSpotlightLarge>;
  /** Create one sectionRelatedProduct */
  createSectionRelatedProduct?: Maybe<SectionRelatedProduct>;
  /** Create one sectionSalonServiceBlock */
  createSectionSalonServiceBlock?: Maybe<SectionSalonServiceBlock>;
  /** Create one sectionSearchTermList */
  createSectionSearchTermList?: Maybe<SectionSearchTermList>;
  /** Create one sectionSeoText */
  createSectionSeoText?: Maybe<SectionSeoText>;
  /** Create one sectionSocialMediaCtaSmall */
  createSectionSocialMediaCtaSmall?: Maybe<SectionSocialMediaCtaSmall>;
  /** Create one sectionTextBlock */
  createSectionTextBlock?: Maybe<SectionTextBlock>;
  /** Create one sectionVideoCarousel */
  createSectionVideoCarousel?: Maybe<SectionVideoCarousel>;
  /** Create one sectionsAccordion */
  createSectionsAccordion?: Maybe<SectionsAccordion>;
  /** Create one socialMediaCtaLarge */
  createSocialMediaCtaLarge?: Maybe<SocialMediaCtaLarge>;
  /** Create one websiteConfig */
  createWebsiteConfig?: Maybe<WebsiteConfig>;
  /** Delete one asset from _all_ existing stages. Returns deleted document. */
  deleteAsset?: Maybe<Asset>;
  /** Delete one blogArticle from _all_ existing stages. Returns deleted document. */
  deleteBlogArticle?: Maybe<BlogArticle>;
  /** Delete one blogAuthor from _all_ existing stages. Returns deleted document. */
  deleteBlogAuthor?: Maybe<BlogAuthor>;
  /** Delete one brandLogoGrid from _all_ existing stages. Returns deleted document. */
  deleteBrandLogoGrid?: Maybe<BrandLogoGrid>;
  /** Delete one brandsBrandLogo from _all_ existing stages. Returns deleted document. */
  deleteBrandsBrandLogo?: Maybe<BrandsBrandLogo>;
  /** Delete one cMSPage from _all_ existing stages. Returns deleted document. */
  deleteCMSPage?: Maybe<CmsPage>;
  /** Delete one collectionPage from _all_ existing stages. Returns deleted document. */
  deleteCollectionPage?: Maybe<CollectionPage>;
  /** Delete one configCareer from _all_ existing stages. Returns deleted document. */
  deleteConfigCareer?: Maybe<ConfigCareer>;
  /** Delete one configSalonBooking from _all_ existing stages. Returns deleted document. */
  deleteConfigSalonBooking?: Maybe<ConfigSalonBooking>;
  /** Delete one configSalonMenu from _all_ existing stages. Returns deleted document. */
  deleteConfigSalonMenu?: Maybe<ConfigSalonMenu>;
  /** Delete one configSearch from _all_ existing stages. Returns deleted document. */
  deleteConfigSearch?: Maybe<ConfigSearch>;
  /** Delete one editorialText from _all_ existing stages. Returns deleted document. */
  deleteEditorialText?: Maybe<EditorialText>;
  /** Delete one featureProductCarouselTabbed from _all_ existing stages. Returns deleted document. */
  deleteFeatureProductCarouselTabbed?: Maybe<FeatureProductCarouselTabbed>;
  /** Delete one footerConfig from _all_ existing stages. Returns deleted document. */
  deleteFooterConfig?: Maybe<FooterConfig>;
  /** Delete one headerConfig from _all_ existing stages. Returns deleted document. */
  deleteHeaderConfig?: Maybe<HeaderConfig>;
  /** Delete one heroBanner from _all_ existing stages. Returns deleted document. */
  deleteHeroBanner?: Maybe<HeroBanner>;
  /** Delete one joinCTApanel from _all_ existing stages. Returns deleted document. */
  deleteJoinCTApanel?: Maybe<JoinCtApanel>;
  /**
   * Delete many Asset documents
   * @deprecated Please use the new paginated many mutation (deleteManyAssetsConnection)
   */
  deleteManyAssets: BatchPayload;
  /** Delete many Asset documents, return deleted documents */
  deleteManyAssetsConnection: AssetConnection;
  /**
   * Delete many BlogAuthor documents
   * @deprecated Please use the new paginated many mutation (deleteManyBlogAuthorsConnection)
   */
  deleteManyBlogAuthors: BatchPayload;
  /** Delete many BlogAuthor documents, return deleted documents */
  deleteManyBlogAuthorsConnection: BlogAuthorConnection;
  /**
   * Delete many BrandLogoGrid documents
   * @deprecated Please use the new paginated many mutation (deleteManyBrandLogoGridsConnection)
   */
  deleteManyBrandLogoGrids: BatchPayload;
  /** Delete many BrandLogoGrid documents, return deleted documents */
  deleteManyBrandLogoGridsConnection: BrandLogoGridConnection;
  /**
   * Delete many BrandsBrandLogo documents
   * @deprecated Please use the new paginated many mutation (deleteManyBrandsBrandsLogosConnection)
   */
  deleteManyBrandsBrandsLogos: BatchPayload;
  /** Delete many BrandsBrandLogo documents, return deleted documents */
  deleteManyBrandsBrandsLogosConnection: BrandsBrandLogoConnection;
  /**
   * Delete many CMSPage documents
   * @deprecated Please use the new paginated many mutation (deleteManyCMSPagesConnection)
   */
  deleteManyCMSPages: BatchPayload;
  /** Delete many CMSPage documents, return deleted documents */
  deleteManyCMSPagesConnection: CmsPageConnection;
  /**
   * Delete many CollectionPage documents
   * @deprecated Please use the new paginated many mutation (deleteManyCollectionPagesConnection)
   */
  deleteManyCollectionPages: BatchPayload;
  /** Delete many CollectionPage documents, return deleted documents */
  deleteManyCollectionPagesConnection: CollectionPageConnection;
  /**
   * Delete many ConfigCareer documents
   * @deprecated Please use the new paginated many mutation (deleteManyConfigCareersConnection)
   */
  deleteManyConfigCareers: BatchPayload;
  /** Delete many ConfigCareer documents, return deleted documents */
  deleteManyConfigCareersConnection: ConfigCareerConnection;
  /**
   * Delete many ConfigSalonBooking documents
   * @deprecated Please use the new paginated many mutation (deleteManyConfigSalonBookingsConnection)
   */
  deleteManyConfigSalonBookings: BatchPayload;
  /** Delete many ConfigSalonBooking documents, return deleted documents */
  deleteManyConfigSalonBookingsConnection: ConfigSalonBookingConnection;
  /**
   * Delete many ConfigSalonMenu documents
   * @deprecated Please use the new paginated many mutation (deleteManyConfigSalonMenusConnection)
   */
  deleteManyConfigSalonMenus: BatchPayload;
  /** Delete many ConfigSalonMenu documents, return deleted documents */
  deleteManyConfigSalonMenusConnection: ConfigSalonMenuConnection;
  /**
   * Delete many ConfigSearch documents
   * @deprecated Please use the new paginated many mutation (deleteManyConfigSearchesConnection)
   */
  deleteManyConfigSearches: BatchPayload;
  /** Delete many ConfigSearch documents, return deleted documents */
  deleteManyConfigSearchesConnection: ConfigSearchConnection;
  /**
   * Delete many EditorialText documents
   * @deprecated Please use the new paginated many mutation (deleteManyEditorialTextsConnection)
   */
  deleteManyEditorialTexts: BatchPayload;
  /** Delete many EditorialText documents, return deleted documents */
  deleteManyEditorialTextsConnection: EditorialTextConnection;
  /**
   * Delete many FeatureProductCarouselTabbed documents
   * @deprecated Please use the new paginated many mutation (deleteManyFeatureProductCarouselTabsConnection)
   */
  deleteManyFeatureProductCarouselTabs: BatchPayload;
  /** Delete many FeatureProductCarouselTabbed documents, return deleted documents */
  deleteManyFeatureProductCarouselTabsConnection: FeatureProductCarouselTabbedConnection;
  /**
   * Delete many FooterConfig documents
   * @deprecated Please use the new paginated many mutation (deleteManyFooterConfigsConnection)
   */
  deleteManyFooterConfigs: BatchPayload;
  /** Delete many FooterConfig documents, return deleted documents */
  deleteManyFooterConfigsConnection: FooterConfigConnection;
  /**
   * Delete many HeaderConfig documents
   * @deprecated Please use the new paginated many mutation (deleteManyHeaderConfigsConnection)
   */
  deleteManyHeaderConfigs: BatchPayload;
  /** Delete many HeaderConfig documents, return deleted documents */
  deleteManyHeaderConfigsConnection: HeaderConfigConnection;
  /**
   * Delete many HeroBanner documents
   * @deprecated Please use the new paginated many mutation (deleteManyHeroBannersConnection)
   */
  deleteManyHeroBanners: BatchPayload;
  /** Delete many HeroBanner documents, return deleted documents */
  deleteManyHeroBannersConnection: HeroBannerConnection;
  /**
   * Delete many JoinCTApanel documents
   * @deprecated Please use the new paginated many mutation (deleteManyJointCTApanelsConnection)
   */
  deleteManyJointCTApanels: BatchPayload;
  /** Delete many JoinCTApanel documents, return deleted documents */
  deleteManyJointCTApanelsConnection: JoinCtApanelConnection;
  /**
   * Delete many ModulePromoBanner documents
   * @deprecated Please use the new paginated many mutation (deleteManyModulePromoBannersConnection)
   */
  deleteManyModulePromoBanners: BatchPayload;
  /** Delete many ModulePromoBanner documents, return deleted documents */
  deleteManyModulePromoBannersConnection: ModulePromoBannerConnection;
  /**
   * Delete many MultiCollectionSlider documents
   * @deprecated Please use the new paginated many mutation (deleteManyMultiCollectionSlidersConnection)
   */
  deleteManyMultiCollectionSliders: BatchPayload;
  /** Delete many MultiCollectionSlider documents, return deleted documents */
  deleteManyMultiCollectionSlidersConnection: MultiCollectionSliderConnection;
  /**
   * Delete many OfferTiles documents
   * @deprecated Please use the new paginated many mutation (deleteManyOfferTilessConnection)
   */
  deleteManyOfferTiless: BatchPayload;
  /** Delete many OfferTiles documents, return deleted documents */
  deleteManyOfferTilessConnection: OfferTilesConnection;
  /**
   * Delete many BlogArticle documents
   * @deprecated Please use the new paginated many mutation (deleteManyPageBlogArticlesConnection)
   */
  deleteManyPageBlogArticles: BatchPayload;
  /** Delete many BlogArticle documents, return deleted documents */
  deleteManyPageBlogArticlesConnection: BlogArticleConnection;
  /**
   * Delete many PageBuyingGuide documents
   * @deprecated Please use the new paginated many mutation (deleteManyPageBuyingGuidesConnection)
   */
  deleteManyPageBuyingGuides: BatchPayload;
  /** Delete many PageBuyingGuide documents, return deleted documents */
  deleteManyPageBuyingGuidesConnection: PageBuyingGuideConnection;
  /**
   * Delete many ProductBenefitsGrid documents
   * @deprecated Please use the new paginated many mutation (deleteManyProductBenefitsGridsConnection)
   */
  deleteManyProductBenefitsGrids: BatchPayload;
  /** Delete many ProductBenefitsGrid documents, return deleted documents */
  deleteManyProductBenefitsGridsConnection: ProductBenefitsGridConnection;
  /**
   * Delete many ProductHowTo documents
   * @deprecated Please use the new paginated many mutation (deleteManyProductHowTosConnection)
   */
  deleteManyProductHowTos: BatchPayload;
  /** Delete many ProductHowTo documents, return deleted documents */
  deleteManyProductHowTosConnection: ProductHowToConnection;
  /**
   * Delete many ProductPage documents
   * @deprecated Please use the new paginated many mutation (deleteManyProductPagesConnection)
   */
  deleteManyProductPages: BatchPayload;
  /** Delete many ProductPage documents, return deleted documents */
  deleteManyProductPagesConnection: ProductPageConnection;
  /**
   * Delete many Proposition documents
   * @deprecated Please use the new paginated many mutation (deleteManyPropositionsConnection)
   */
  deleteManyPropositions: BatchPayload;
  /** Delete many Proposition documents, return deleted documents */
  deleteManyPropositionsConnection: PropositionConnection;
  /**
   * Delete many SectionAccountSignupCta documents
   * @deprecated Please use the new paginated many mutation (deleteManySectionAccountSignupCtasConnection)
   */
  deleteManySectionAccountSignupCtas: BatchPayload;
  /** Delete many SectionAccountSignupCta documents, return deleted documents */
  deleteManySectionAccountSignupCtasConnection: SectionAccountSignupCtaConnection;
  /**
   * Delete many SectionBlogListing documents
   * @deprecated Please use the new paginated many mutation (deleteManySectionBlogListingsConnection)
   */
  deleteManySectionBlogListings: BatchPayload;
  /** Delete many SectionBlogListing documents, return deleted documents */
  deleteManySectionBlogListingsConnection: SectionBlogListingConnection;
  /**
   * Delete many SectionCollectionCarousel documents
   * @deprecated Please use the new paginated many mutation (deleteManySectionCollectionCarouselsConnection)
   */
  deleteManySectionCollectionCarousels: BatchPayload;
  /** Delete many SectionCollectionCarousel documents, return deleted documents */
  deleteManySectionCollectionCarouselsConnection: SectionCollectionCarouselConnection;
  /**
   * Delete many SectionCollectionDropDown documents
   * @deprecated Please use the new paginated many mutation (deleteManySectionCollectionDropDownsConnection)
   */
  deleteManySectionCollectionDropDowns: BatchPayload;
  /** Delete many SectionCollectionDropDown documents, return deleted documents */
  deleteManySectionCollectionDropDownsConnection: SectionCollectionDropDownConnection;
  /**
   * Delete many SectionCollectionFeatureLarge documents
   * @deprecated Please use the new paginated many mutation (deleteManySectionCollectionFeatureLargesConnection)
   */
  deleteManySectionCollectionFeatureLarges: BatchPayload;
  /** Delete many SectionCollectionFeatureLarge documents, return deleted documents */
  deleteManySectionCollectionFeatureLargesConnection: SectionCollectionFeatureLargeConnection;
  /**
   * Delete many SectionCollectionMain documents
   * @deprecated Please use the new paginated many mutation (deleteManySectionCollectionMainsConnection)
   */
  deleteManySectionCollectionMains: BatchPayload;
  /** Delete many SectionCollectionMain documents, return deleted documents */
  deleteManySectionCollectionMainsConnection: SectionCollectionMainConnection;
  /**
   * Delete many SectionCollectionSubcategoryLink documents
   * @deprecated Please use the new paginated many mutation (deleteManySectionCollectionSubcategoryLinksConnection)
   */
  deleteManySectionCollectionSubcategoryLinks: BatchPayload;
  /** Delete many SectionCollectionSubcategoryLink documents, return deleted documents */
  deleteManySectionCollectionSubcategoryLinksConnection: SectionCollectionSubcategoryLinkConnection;
  /**
   * Delete many SectionCtaButton documents
   * @deprecated Please use the new paginated many mutation (deleteManySectionCtaButtonsConnection)
   */
  deleteManySectionCtaButtons: BatchPayload;
  /** Delete many SectionCtaButton documents, return deleted documents */
  deleteManySectionCtaButtonsConnection: SectionCtaButtonConnection;
  /**
   * Delete many SectionFullWidthImage documents
   * @deprecated Please use the new paginated many mutation (deleteManySectionFullWidthImagesConnection)
   */
  deleteManySectionFullWidthImages: BatchPayload;
  /** Delete many SectionFullWidthImage documents, return deleted documents */
  deleteManySectionFullWidthImagesConnection: SectionFullWidthImageConnection;
  /**
   * Delete many SectionImageAndTextGrid documents
   * @deprecated Please use the new paginated many mutation (deleteManySectionImageAndTextGridsConnection)
   */
  deleteManySectionImageAndTextGrids: BatchPayload;
  /** Delete many SectionImageAndTextGrid documents, return deleted documents */
  deleteManySectionImageAndTextGridsConnection: SectionImageAndTextGridConnection;
  /**
   * Delete many SectionImageTextOverlay documents
   * @deprecated Please use the new paginated many mutation (deleteManySectionImageTextOverlaysConnection)
   */
  deleteManySectionImageTextOverlays: BatchPayload;
  /** Delete many SectionImageTextOverlay documents, return deleted documents */
  deleteManySectionImageTextOverlaysConnection: SectionImageTextOverlayConnection;
  /**
   * Delete many SectionPreezieProductFinder documents
   * @deprecated Please use the new paginated many mutation (deleteManySectionPreezieProductFindersConnection)
   */
  deleteManySectionPreezieProductFinders: BatchPayload;
  /** Delete many SectionPreezieProductFinder documents, return deleted documents */
  deleteManySectionPreezieProductFindersConnection: SectionPreezieProductFinderConnection;
  /**
   * Delete many SectionProductMain documents
   * @deprecated Please use the new paginated many mutation (deleteManySectionProductMainsConnection)
   */
  deleteManySectionProductMains: BatchPayload;
  /** Delete many SectionProductMain documents, return deleted documents */
  deleteManySectionProductMainsConnection: SectionProductMainConnection;
  /**
   * Delete many SectionProductReview documents
   * @deprecated Please use the new paginated many mutation (deleteManySectionProductReviewsConnection)
   */
  deleteManySectionProductReviews: BatchPayload;
  /** Delete many SectionProductReview documents, return deleted documents */
  deleteManySectionProductReviewsConnection: SectionProductReviewConnection;
  /**
   * Delete many SectionProductSpotlightGrid documents
   * @deprecated Please use the new paginated many mutation (deleteManySectionProductSpotlightGridsConnection)
   */
  deleteManySectionProductSpotlightGrids: BatchPayload;
  /** Delete many SectionProductSpotlightGrid documents, return deleted documents */
  deleteManySectionProductSpotlightGridsConnection: SectionProductSpotlightGridConnection;
  /**
   * Delete many SectionProductSpotlightLarge documents
   * @deprecated Please use the new paginated many mutation (deleteManySectionProductSpotlightLargesConnection)
   */
  deleteManySectionProductSpotlightLarges: BatchPayload;
  /** Delete many SectionProductSpotlightLarge documents, return deleted documents */
  deleteManySectionProductSpotlightLargesConnection: SectionProductSpotlightLargeConnection;
  /**
   * Delete many SectionRelatedProduct documents
   * @deprecated Please use the new paginated many mutation (deleteManySectionRelatedProductsConnection)
   */
  deleteManySectionRelatedProducts: BatchPayload;
  /** Delete many SectionRelatedProduct documents, return deleted documents */
  deleteManySectionRelatedProductsConnection: SectionRelatedProductConnection;
  /**
   * Delete many SectionSalonServiceBlock documents
   * @deprecated Please use the new paginated many mutation (deleteManySectionSalonServiceBlocksConnection)
   */
  deleteManySectionSalonServiceBlocks: BatchPayload;
  /** Delete many SectionSalonServiceBlock documents, return deleted documents */
  deleteManySectionSalonServiceBlocksConnection: SectionSalonServiceBlockConnection;
  /**
   * Delete many SectionSearchTermList documents
   * @deprecated Please use the new paginated many mutation (deleteManySectionSearchTermListsConnection)
   */
  deleteManySectionSearchTermLists: BatchPayload;
  /** Delete many SectionSearchTermList documents, return deleted documents */
  deleteManySectionSearchTermListsConnection: SectionSearchTermListConnection;
  /**
   * Delete many SectionSeoText documents
   * @deprecated Please use the new paginated many mutation (deleteManySectionSeoTextsConnection)
   */
  deleteManySectionSeoTexts: BatchPayload;
  /** Delete many SectionSeoText documents, return deleted documents */
  deleteManySectionSeoTextsConnection: SectionSeoTextConnection;
  /**
   * Delete many SectionSocialMediaCtaSmall documents
   * @deprecated Please use the new paginated many mutation (deleteManySectionSocialMediaCtaSmallsConnection)
   */
  deleteManySectionSocialMediaCtaSmalls: BatchPayload;
  /** Delete many SectionSocialMediaCtaSmall documents, return deleted documents */
  deleteManySectionSocialMediaCtaSmallsConnection: SectionSocialMediaCtaSmallConnection;
  /**
   * Delete many SectionTextBlock documents
   * @deprecated Please use the new paginated many mutation (deleteManySectionTextBlocksConnection)
   */
  deleteManySectionTextBlocks: BatchPayload;
  /** Delete many SectionTextBlock documents, return deleted documents */
  deleteManySectionTextBlocksConnection: SectionTextBlockConnection;
  /**
   * Delete many SectionVideoCarousel documents
   * @deprecated Please use the new paginated many mutation (deleteManySectionVideoCarouselsConnection)
   */
  deleteManySectionVideoCarousels: BatchPayload;
  /** Delete many SectionVideoCarousel documents, return deleted documents */
  deleteManySectionVideoCarouselsConnection: SectionVideoCarouselConnection;
  /**
   * Delete many SectionsAccordion documents
   * @deprecated Please use the new paginated many mutation (deleteManySectionsAccordionsConnection)
   */
  deleteManySectionsAccordions: BatchPayload;
  /** Delete many SectionsAccordion documents, return deleted documents */
  deleteManySectionsAccordionsConnection: SectionsAccordionConnection;
  /**
   * Delete many SocialMediaCtaLarge documents
   * @deprecated Please use the new paginated many mutation (deleteManySocialMediaCtaLargesConnection)
   */
  deleteManySocialMediaCtaLarges: BatchPayload;
  /** Delete many SocialMediaCtaLarge documents, return deleted documents */
  deleteManySocialMediaCtaLargesConnection: SocialMediaCtaLargeConnection;
  /**
   * Delete many WebsiteConfig documents
   * @deprecated Please use the new paginated many mutation (deleteManyWebsiteConfigsConnection)
   */
  deleteManyWebsiteConfigs: BatchPayload;
  /** Delete many WebsiteConfig documents, return deleted documents */
  deleteManyWebsiteConfigsConnection: WebsiteConfigConnection;
  /** Delete one modulePromoBanner from _all_ existing stages. Returns deleted document. */
  deleteModulePromoBanner?: Maybe<ModulePromoBanner>;
  /** Delete one multiCollectionSlider from _all_ existing stages. Returns deleted document. */
  deleteMultiCollectionSlider?: Maybe<MultiCollectionSlider>;
  /** Delete one offerTiles from _all_ existing stages. Returns deleted document. */
  deleteOfferTiles?: Maybe<OfferTiles>;
  /** Delete one pageBuyingGuide from _all_ existing stages. Returns deleted document. */
  deletePageBuyingGuide?: Maybe<PageBuyingGuide>;
  /** Delete one productBenefitsGrid from _all_ existing stages. Returns deleted document. */
  deleteProductBenefitsGrid?: Maybe<ProductBenefitsGrid>;
  /** Delete one productHowTo from _all_ existing stages. Returns deleted document. */
  deleteProductHowTo?: Maybe<ProductHowTo>;
  /** Delete one productPage from _all_ existing stages. Returns deleted document. */
  deleteProductPage?: Maybe<ProductPage>;
  /** Delete one proposition from _all_ existing stages. Returns deleted document. */
  deleteProposition?: Maybe<Proposition>;
  /** Delete and return scheduled operation */
  deleteScheduledOperation?: Maybe<ScheduledOperation>;
  /** Delete one scheduledRelease from _all_ existing stages. Returns deleted document. */
  deleteScheduledRelease?: Maybe<ScheduledRelease>;
  /** Delete one sectionAccountSignupCta from _all_ existing stages. Returns deleted document. */
  deleteSectionAccountSignupCta?: Maybe<SectionAccountSignupCta>;
  /** Delete one sectionBlogListing from _all_ existing stages. Returns deleted document. */
  deleteSectionBlogListing?: Maybe<SectionBlogListing>;
  /** Delete one sectionCollectionCarousel from _all_ existing stages. Returns deleted document. */
  deleteSectionCollectionCarousel?: Maybe<SectionCollectionCarousel>;
  /** Delete one sectionCollectionDropDown from _all_ existing stages. Returns deleted document. */
  deleteSectionCollectionDropDown?: Maybe<SectionCollectionDropDown>;
  /** Delete one sectionCollectionFeatureLarge from _all_ existing stages. Returns deleted document. */
  deleteSectionCollectionFeatureLarge?: Maybe<SectionCollectionFeatureLarge>;
  /** Delete one sectionCollectionMain from _all_ existing stages. Returns deleted document. */
  deleteSectionCollectionMain?: Maybe<SectionCollectionMain>;
  /** Delete one sectionCollectionSubcategoryLink from _all_ existing stages. Returns deleted document. */
  deleteSectionCollectionSubcategoryLink?: Maybe<SectionCollectionSubcategoryLink>;
  /** Delete one sectionCtaButton from _all_ existing stages. Returns deleted document. */
  deleteSectionCtaButton?: Maybe<SectionCtaButton>;
  /** Delete one sectionFullWidthImage from _all_ existing stages. Returns deleted document. */
  deleteSectionFullWidthImage?: Maybe<SectionFullWidthImage>;
  /** Delete one sectionImageAndTextGrid from _all_ existing stages. Returns deleted document. */
  deleteSectionImageAndTextGrid?: Maybe<SectionImageAndTextGrid>;
  /** Delete one sectionImageTextOverlay from _all_ existing stages. Returns deleted document. */
  deleteSectionImageTextOverlay?: Maybe<SectionImageTextOverlay>;
  /** Delete one sectionPreezieProductFinder from _all_ existing stages. Returns deleted document. */
  deleteSectionPreezieProductFinder?: Maybe<SectionPreezieProductFinder>;
  /** Delete one sectionProductMain from _all_ existing stages. Returns deleted document. */
  deleteSectionProductMain?: Maybe<SectionProductMain>;
  /** Delete one sectionProductReview from _all_ existing stages. Returns deleted document. */
  deleteSectionProductReview?: Maybe<SectionProductReview>;
  /** Delete one sectionProductSpotlightGrid from _all_ existing stages. Returns deleted document. */
  deleteSectionProductSpotlightGrid?: Maybe<SectionProductSpotlightGrid>;
  /** Delete one sectionProductSpotlightLarge from _all_ existing stages. Returns deleted document. */
  deleteSectionProductSpotlightLarge?: Maybe<SectionProductSpotlightLarge>;
  /** Delete one sectionRelatedProduct from _all_ existing stages. Returns deleted document. */
  deleteSectionRelatedProduct?: Maybe<SectionRelatedProduct>;
  /** Delete one sectionSalonServiceBlock from _all_ existing stages. Returns deleted document. */
  deleteSectionSalonServiceBlock?: Maybe<SectionSalonServiceBlock>;
  /** Delete one sectionSearchTermList from _all_ existing stages. Returns deleted document. */
  deleteSectionSearchTermList?: Maybe<SectionSearchTermList>;
  /** Delete one sectionSeoText from _all_ existing stages. Returns deleted document. */
  deleteSectionSeoText?: Maybe<SectionSeoText>;
  /** Delete one sectionSocialMediaCtaSmall from _all_ existing stages. Returns deleted document. */
  deleteSectionSocialMediaCtaSmall?: Maybe<SectionSocialMediaCtaSmall>;
  /** Delete one sectionTextBlock from _all_ existing stages. Returns deleted document. */
  deleteSectionTextBlock?: Maybe<SectionTextBlock>;
  /** Delete one sectionVideoCarousel from _all_ existing stages. Returns deleted document. */
  deleteSectionVideoCarousel?: Maybe<SectionVideoCarousel>;
  /** Delete one sectionsAccordion from _all_ existing stages. Returns deleted document. */
  deleteSectionsAccordion?: Maybe<SectionsAccordion>;
  /** Delete one socialMediaCtaLarge from _all_ existing stages. Returns deleted document. */
  deleteSocialMediaCtaLarge?: Maybe<SocialMediaCtaLarge>;
  /** Delete one websiteConfig from _all_ existing stages. Returns deleted document. */
  deleteWebsiteConfig?: Maybe<WebsiteConfig>;
  /** Publish one asset */
  publishAsset?: Maybe<Asset>;
  /** Publish one blogArticle */
  publishBlogArticle?: Maybe<BlogArticle>;
  /** Publish one blogAuthor */
  publishBlogAuthor?: Maybe<BlogAuthor>;
  /** Publish one brandLogoGrid */
  publishBrandLogoGrid?: Maybe<BrandLogoGrid>;
  /** Publish one brandsBrandLogo */
  publishBrandsBrandLogo?: Maybe<BrandsBrandLogo>;
  /** Publish one cMSPage */
  publishCMSPage?: Maybe<CmsPage>;
  /** Publish one collectionPage */
  publishCollectionPage?: Maybe<CollectionPage>;
  /** Publish one configCareer */
  publishConfigCareer?: Maybe<ConfigCareer>;
  /** Publish one configSalonBooking */
  publishConfigSalonBooking?: Maybe<ConfigSalonBooking>;
  /** Publish one configSalonMenu */
  publishConfigSalonMenu?: Maybe<ConfigSalonMenu>;
  /** Publish one configSearch */
  publishConfigSearch?: Maybe<ConfigSearch>;
  /** Publish one editorialText */
  publishEditorialText?: Maybe<EditorialText>;
  /** Publish one featureProductCarouselTabbed */
  publishFeatureProductCarouselTabbed?: Maybe<FeatureProductCarouselTabbed>;
  /** Publish one footerConfig */
  publishFooterConfig?: Maybe<FooterConfig>;
  /** Publish one headerConfig */
  publishHeaderConfig?: Maybe<HeaderConfig>;
  /** Publish one heroBanner */
  publishHeroBanner?: Maybe<HeroBanner>;
  /** Publish one joinCTApanel */
  publishJoinCTApanel?: Maybe<JoinCtApanel>;
  /**
   * Publish many Asset documents
   * @deprecated Please use the new paginated many mutation (publishManyAssetsConnection)
   */
  publishManyAssets: BatchPayload;
  /** Publish many Asset documents */
  publishManyAssetsConnection: AssetConnection;
  /**
   * Publish many BlogAuthor documents
   * @deprecated Please use the new paginated many mutation (publishManyBlogAuthorsConnection)
   */
  publishManyBlogAuthors: BatchPayload;
  /** Publish many BlogAuthor documents */
  publishManyBlogAuthorsConnection: BlogAuthorConnection;
  /**
   * Publish many BrandLogoGrid documents
   * @deprecated Please use the new paginated many mutation (publishManyBrandLogoGridsConnection)
   */
  publishManyBrandLogoGrids: BatchPayload;
  /** Publish many BrandLogoGrid documents */
  publishManyBrandLogoGridsConnection: BrandLogoGridConnection;
  /**
   * Publish many BrandsBrandLogo documents
   * @deprecated Please use the new paginated many mutation (publishManyBrandsBrandsLogosConnection)
   */
  publishManyBrandsBrandsLogos: BatchPayload;
  /** Publish many BrandsBrandLogo documents */
  publishManyBrandsBrandsLogosConnection: BrandsBrandLogoConnection;
  /**
   * Publish many CMSPage documents
   * @deprecated Please use the new paginated many mutation (publishManyCMSPagesConnection)
   */
  publishManyCMSPages: BatchPayload;
  /** Publish many CMSPage documents */
  publishManyCMSPagesConnection: CmsPageConnection;
  /**
   * Publish many CollectionPage documents
   * @deprecated Please use the new paginated many mutation (publishManyCollectionPagesConnection)
   */
  publishManyCollectionPages: BatchPayload;
  /** Publish many CollectionPage documents */
  publishManyCollectionPagesConnection: CollectionPageConnection;
  /**
   * Publish many ConfigCareer documents
   * @deprecated Please use the new paginated many mutation (publishManyConfigCareersConnection)
   */
  publishManyConfigCareers: BatchPayload;
  /** Publish many ConfigCareer documents */
  publishManyConfigCareersConnection: ConfigCareerConnection;
  /**
   * Publish many ConfigSalonBooking documents
   * @deprecated Please use the new paginated many mutation (publishManyConfigSalonBookingsConnection)
   */
  publishManyConfigSalonBookings: BatchPayload;
  /** Publish many ConfigSalonBooking documents */
  publishManyConfigSalonBookingsConnection: ConfigSalonBookingConnection;
  /**
   * Publish many ConfigSalonMenu documents
   * @deprecated Please use the new paginated many mutation (publishManyConfigSalonMenusConnection)
   */
  publishManyConfigSalonMenus: BatchPayload;
  /** Publish many ConfigSalonMenu documents */
  publishManyConfigSalonMenusConnection: ConfigSalonMenuConnection;
  /**
   * Publish many ConfigSearch documents
   * @deprecated Please use the new paginated many mutation (publishManyConfigSearchesConnection)
   */
  publishManyConfigSearches: BatchPayload;
  /** Publish many ConfigSearch documents */
  publishManyConfigSearchesConnection: ConfigSearchConnection;
  /**
   * Publish many EditorialText documents
   * @deprecated Please use the new paginated many mutation (publishManyEditorialTextsConnection)
   */
  publishManyEditorialTexts: BatchPayload;
  /** Publish many EditorialText documents */
  publishManyEditorialTextsConnection: EditorialTextConnection;
  /**
   * Publish many FeatureProductCarouselTabbed documents
   * @deprecated Please use the new paginated many mutation (publishManyFeatureProductCarouselTabsConnection)
   */
  publishManyFeatureProductCarouselTabs: BatchPayload;
  /** Publish many FeatureProductCarouselTabbed documents */
  publishManyFeatureProductCarouselTabsConnection: FeatureProductCarouselTabbedConnection;
  /**
   * Publish many FooterConfig documents
   * @deprecated Please use the new paginated many mutation (publishManyFooterConfigsConnection)
   */
  publishManyFooterConfigs: BatchPayload;
  /** Publish many FooterConfig documents */
  publishManyFooterConfigsConnection: FooterConfigConnection;
  /**
   * Publish many HeaderConfig documents
   * @deprecated Please use the new paginated many mutation (publishManyHeaderConfigsConnection)
   */
  publishManyHeaderConfigs: BatchPayload;
  /** Publish many HeaderConfig documents */
  publishManyHeaderConfigsConnection: HeaderConfigConnection;
  /**
   * Publish many HeroBanner documents
   * @deprecated Please use the new paginated many mutation (publishManyHeroBannersConnection)
   */
  publishManyHeroBanners: BatchPayload;
  /** Publish many HeroBanner documents */
  publishManyHeroBannersConnection: HeroBannerConnection;
  /**
   * Publish many JoinCTApanel documents
   * @deprecated Please use the new paginated many mutation (publishManyJointCTApanelsConnection)
   */
  publishManyJointCTApanels: BatchPayload;
  /** Publish many JoinCTApanel documents */
  publishManyJointCTApanelsConnection: JoinCtApanelConnection;
  /**
   * Publish many ModulePromoBanner documents
   * @deprecated Please use the new paginated many mutation (publishManyModulePromoBannersConnection)
   */
  publishManyModulePromoBanners: BatchPayload;
  /** Publish many ModulePromoBanner documents */
  publishManyModulePromoBannersConnection: ModulePromoBannerConnection;
  /**
   * Publish many MultiCollectionSlider documents
   * @deprecated Please use the new paginated many mutation (publishManyMultiCollectionSlidersConnection)
   */
  publishManyMultiCollectionSliders: BatchPayload;
  /** Publish many MultiCollectionSlider documents */
  publishManyMultiCollectionSlidersConnection: MultiCollectionSliderConnection;
  /**
   * Publish many OfferTiles documents
   * @deprecated Please use the new paginated many mutation (publishManyOfferTilessConnection)
   */
  publishManyOfferTiless: BatchPayload;
  /** Publish many OfferTiles documents */
  publishManyOfferTilessConnection: OfferTilesConnection;
  /**
   * Publish many BlogArticle documents
   * @deprecated Please use the new paginated many mutation (publishManyPageBlogArticlesConnection)
   */
  publishManyPageBlogArticles: BatchPayload;
  /** Publish many BlogArticle documents */
  publishManyPageBlogArticlesConnection: BlogArticleConnection;
  /**
   * Publish many PageBuyingGuide documents
   * @deprecated Please use the new paginated many mutation (publishManyPageBuyingGuidesConnection)
   */
  publishManyPageBuyingGuides: BatchPayload;
  /** Publish many PageBuyingGuide documents */
  publishManyPageBuyingGuidesConnection: PageBuyingGuideConnection;
  /**
   * Publish many ProductBenefitsGrid documents
   * @deprecated Please use the new paginated many mutation (publishManyProductBenefitsGridsConnection)
   */
  publishManyProductBenefitsGrids: BatchPayload;
  /** Publish many ProductBenefitsGrid documents */
  publishManyProductBenefitsGridsConnection: ProductBenefitsGridConnection;
  /**
   * Publish many ProductHowTo documents
   * @deprecated Please use the new paginated many mutation (publishManyProductHowTosConnection)
   */
  publishManyProductHowTos: BatchPayload;
  /** Publish many ProductHowTo documents */
  publishManyProductHowTosConnection: ProductHowToConnection;
  /**
   * Publish many ProductPage documents
   * @deprecated Please use the new paginated many mutation (publishManyProductPagesConnection)
   */
  publishManyProductPages: BatchPayload;
  /** Publish many ProductPage documents */
  publishManyProductPagesConnection: ProductPageConnection;
  /**
   * Publish many Proposition documents
   * @deprecated Please use the new paginated many mutation (publishManyPropositionsConnection)
   */
  publishManyPropositions: BatchPayload;
  /** Publish many Proposition documents */
  publishManyPropositionsConnection: PropositionConnection;
  /**
   * Publish many SectionAccountSignupCta documents
   * @deprecated Please use the new paginated many mutation (publishManySectionAccountSignupCtasConnection)
   */
  publishManySectionAccountSignupCtas: BatchPayload;
  /** Publish many SectionAccountSignupCta documents */
  publishManySectionAccountSignupCtasConnection: SectionAccountSignupCtaConnection;
  /**
   * Publish many SectionBlogListing documents
   * @deprecated Please use the new paginated many mutation (publishManySectionBlogListingsConnection)
   */
  publishManySectionBlogListings: BatchPayload;
  /** Publish many SectionBlogListing documents */
  publishManySectionBlogListingsConnection: SectionBlogListingConnection;
  /**
   * Publish many SectionCollectionCarousel documents
   * @deprecated Please use the new paginated many mutation (publishManySectionCollectionCarouselsConnection)
   */
  publishManySectionCollectionCarousels: BatchPayload;
  /** Publish many SectionCollectionCarousel documents */
  publishManySectionCollectionCarouselsConnection: SectionCollectionCarouselConnection;
  /**
   * Publish many SectionCollectionDropDown documents
   * @deprecated Please use the new paginated many mutation (publishManySectionCollectionDropDownsConnection)
   */
  publishManySectionCollectionDropDowns: BatchPayload;
  /** Publish many SectionCollectionDropDown documents */
  publishManySectionCollectionDropDownsConnection: SectionCollectionDropDownConnection;
  /**
   * Publish many SectionCollectionFeatureLarge documents
   * @deprecated Please use the new paginated many mutation (publishManySectionCollectionFeatureLargesConnection)
   */
  publishManySectionCollectionFeatureLarges: BatchPayload;
  /** Publish many SectionCollectionFeatureLarge documents */
  publishManySectionCollectionFeatureLargesConnection: SectionCollectionFeatureLargeConnection;
  /**
   * Publish many SectionCollectionMain documents
   * @deprecated Please use the new paginated many mutation (publishManySectionCollectionMainsConnection)
   */
  publishManySectionCollectionMains: BatchPayload;
  /** Publish many SectionCollectionMain documents */
  publishManySectionCollectionMainsConnection: SectionCollectionMainConnection;
  /**
   * Publish many SectionCollectionSubcategoryLink documents
   * @deprecated Please use the new paginated many mutation (publishManySectionCollectionSubcategoryLinksConnection)
   */
  publishManySectionCollectionSubcategoryLinks: BatchPayload;
  /** Publish many SectionCollectionSubcategoryLink documents */
  publishManySectionCollectionSubcategoryLinksConnection: SectionCollectionSubcategoryLinkConnection;
  /**
   * Publish many SectionCtaButton documents
   * @deprecated Please use the new paginated many mutation (publishManySectionCtaButtonsConnection)
   */
  publishManySectionCtaButtons: BatchPayload;
  /** Publish many SectionCtaButton documents */
  publishManySectionCtaButtonsConnection: SectionCtaButtonConnection;
  /**
   * Publish many SectionFullWidthImage documents
   * @deprecated Please use the new paginated many mutation (publishManySectionFullWidthImagesConnection)
   */
  publishManySectionFullWidthImages: BatchPayload;
  /** Publish many SectionFullWidthImage documents */
  publishManySectionFullWidthImagesConnection: SectionFullWidthImageConnection;
  /**
   * Publish many SectionImageAndTextGrid documents
   * @deprecated Please use the new paginated many mutation (publishManySectionImageAndTextGridsConnection)
   */
  publishManySectionImageAndTextGrids: BatchPayload;
  /** Publish many SectionImageAndTextGrid documents */
  publishManySectionImageAndTextGridsConnection: SectionImageAndTextGridConnection;
  /**
   * Publish many SectionImageTextOverlay documents
   * @deprecated Please use the new paginated many mutation (publishManySectionImageTextOverlaysConnection)
   */
  publishManySectionImageTextOverlays: BatchPayload;
  /** Publish many SectionImageTextOverlay documents */
  publishManySectionImageTextOverlaysConnection: SectionImageTextOverlayConnection;
  /**
   * Publish many SectionPreezieProductFinder documents
   * @deprecated Please use the new paginated many mutation (publishManySectionPreezieProductFindersConnection)
   */
  publishManySectionPreezieProductFinders: BatchPayload;
  /** Publish many SectionPreezieProductFinder documents */
  publishManySectionPreezieProductFindersConnection: SectionPreezieProductFinderConnection;
  /**
   * Publish many SectionProductMain documents
   * @deprecated Please use the new paginated many mutation (publishManySectionProductMainsConnection)
   */
  publishManySectionProductMains: BatchPayload;
  /** Publish many SectionProductMain documents */
  publishManySectionProductMainsConnection: SectionProductMainConnection;
  /**
   * Publish many SectionProductReview documents
   * @deprecated Please use the new paginated many mutation (publishManySectionProductReviewsConnection)
   */
  publishManySectionProductReviews: BatchPayload;
  /** Publish many SectionProductReview documents */
  publishManySectionProductReviewsConnection: SectionProductReviewConnection;
  /**
   * Publish many SectionProductSpotlightGrid documents
   * @deprecated Please use the new paginated many mutation (publishManySectionProductSpotlightGridsConnection)
   */
  publishManySectionProductSpotlightGrids: BatchPayload;
  /** Publish many SectionProductSpotlightGrid documents */
  publishManySectionProductSpotlightGridsConnection: SectionProductSpotlightGridConnection;
  /**
   * Publish many SectionProductSpotlightLarge documents
   * @deprecated Please use the new paginated many mutation (publishManySectionProductSpotlightLargesConnection)
   */
  publishManySectionProductSpotlightLarges: BatchPayload;
  /** Publish many SectionProductSpotlightLarge documents */
  publishManySectionProductSpotlightLargesConnection: SectionProductSpotlightLargeConnection;
  /**
   * Publish many SectionRelatedProduct documents
   * @deprecated Please use the new paginated many mutation (publishManySectionRelatedProductsConnection)
   */
  publishManySectionRelatedProducts: BatchPayload;
  /** Publish many SectionRelatedProduct documents */
  publishManySectionRelatedProductsConnection: SectionRelatedProductConnection;
  /**
   * Publish many SectionSalonServiceBlock documents
   * @deprecated Please use the new paginated many mutation (publishManySectionSalonServiceBlocksConnection)
   */
  publishManySectionSalonServiceBlocks: BatchPayload;
  /** Publish many SectionSalonServiceBlock documents */
  publishManySectionSalonServiceBlocksConnection: SectionSalonServiceBlockConnection;
  /**
   * Publish many SectionSearchTermList documents
   * @deprecated Please use the new paginated many mutation (publishManySectionSearchTermListsConnection)
   */
  publishManySectionSearchTermLists: BatchPayload;
  /** Publish many SectionSearchTermList documents */
  publishManySectionSearchTermListsConnection: SectionSearchTermListConnection;
  /**
   * Publish many SectionSeoText documents
   * @deprecated Please use the new paginated many mutation (publishManySectionSeoTextsConnection)
   */
  publishManySectionSeoTexts: BatchPayload;
  /** Publish many SectionSeoText documents */
  publishManySectionSeoTextsConnection: SectionSeoTextConnection;
  /**
   * Publish many SectionSocialMediaCtaSmall documents
   * @deprecated Please use the new paginated many mutation (publishManySectionSocialMediaCtaSmallsConnection)
   */
  publishManySectionSocialMediaCtaSmalls: BatchPayload;
  /** Publish many SectionSocialMediaCtaSmall documents */
  publishManySectionSocialMediaCtaSmallsConnection: SectionSocialMediaCtaSmallConnection;
  /**
   * Publish many SectionTextBlock documents
   * @deprecated Please use the new paginated many mutation (publishManySectionTextBlocksConnection)
   */
  publishManySectionTextBlocks: BatchPayload;
  /** Publish many SectionTextBlock documents */
  publishManySectionTextBlocksConnection: SectionTextBlockConnection;
  /**
   * Publish many SectionVideoCarousel documents
   * @deprecated Please use the new paginated many mutation (publishManySectionVideoCarouselsConnection)
   */
  publishManySectionVideoCarousels: BatchPayload;
  /** Publish many SectionVideoCarousel documents */
  publishManySectionVideoCarouselsConnection: SectionVideoCarouselConnection;
  /**
   * Publish many SectionsAccordion documents
   * @deprecated Please use the new paginated many mutation (publishManySectionsAccordionsConnection)
   */
  publishManySectionsAccordions: BatchPayload;
  /** Publish many SectionsAccordion documents */
  publishManySectionsAccordionsConnection: SectionsAccordionConnection;
  /**
   * Publish many SocialMediaCtaLarge documents
   * @deprecated Please use the new paginated many mutation (publishManySocialMediaCtaLargesConnection)
   */
  publishManySocialMediaCtaLarges: BatchPayload;
  /** Publish many SocialMediaCtaLarge documents */
  publishManySocialMediaCtaLargesConnection: SocialMediaCtaLargeConnection;
  /**
   * Publish many WebsiteConfig documents
   * @deprecated Please use the new paginated many mutation (publishManyWebsiteConfigsConnection)
   */
  publishManyWebsiteConfigs: BatchPayload;
  /** Publish many WebsiteConfig documents */
  publishManyWebsiteConfigsConnection: WebsiteConfigConnection;
  /** Publish one modulePromoBanner */
  publishModulePromoBanner?: Maybe<ModulePromoBanner>;
  /** Publish one multiCollectionSlider */
  publishMultiCollectionSlider?: Maybe<MultiCollectionSlider>;
  /** Publish one offerTiles */
  publishOfferTiles?: Maybe<OfferTiles>;
  /** Publish one pageBuyingGuide */
  publishPageBuyingGuide?: Maybe<PageBuyingGuide>;
  /** Publish one productBenefitsGrid */
  publishProductBenefitsGrid?: Maybe<ProductBenefitsGrid>;
  /** Publish one productHowTo */
  publishProductHowTo?: Maybe<ProductHowTo>;
  /** Publish one productPage */
  publishProductPage?: Maybe<ProductPage>;
  /** Publish one proposition */
  publishProposition?: Maybe<Proposition>;
  /** Publish one sectionAccountSignupCta */
  publishSectionAccountSignupCta?: Maybe<SectionAccountSignupCta>;
  /** Publish one sectionBlogListing */
  publishSectionBlogListing?: Maybe<SectionBlogListing>;
  /** Publish one sectionCollectionCarousel */
  publishSectionCollectionCarousel?: Maybe<SectionCollectionCarousel>;
  /** Publish one sectionCollectionDropDown */
  publishSectionCollectionDropDown?: Maybe<SectionCollectionDropDown>;
  /** Publish one sectionCollectionFeatureLarge */
  publishSectionCollectionFeatureLarge?: Maybe<SectionCollectionFeatureLarge>;
  /** Publish one sectionCollectionMain */
  publishSectionCollectionMain?: Maybe<SectionCollectionMain>;
  /** Publish one sectionCollectionSubcategoryLink */
  publishSectionCollectionSubcategoryLink?: Maybe<SectionCollectionSubcategoryLink>;
  /** Publish one sectionCtaButton */
  publishSectionCtaButton?: Maybe<SectionCtaButton>;
  /** Publish one sectionFullWidthImage */
  publishSectionFullWidthImage?: Maybe<SectionFullWidthImage>;
  /** Publish one sectionImageAndTextGrid */
  publishSectionImageAndTextGrid?: Maybe<SectionImageAndTextGrid>;
  /** Publish one sectionImageTextOverlay */
  publishSectionImageTextOverlay?: Maybe<SectionImageTextOverlay>;
  /** Publish one sectionPreezieProductFinder */
  publishSectionPreezieProductFinder?: Maybe<SectionPreezieProductFinder>;
  /** Publish one sectionProductMain */
  publishSectionProductMain?: Maybe<SectionProductMain>;
  /** Publish one sectionProductReview */
  publishSectionProductReview?: Maybe<SectionProductReview>;
  /** Publish one sectionProductSpotlightGrid */
  publishSectionProductSpotlightGrid?: Maybe<SectionProductSpotlightGrid>;
  /** Publish one sectionProductSpotlightLarge */
  publishSectionProductSpotlightLarge?: Maybe<SectionProductSpotlightLarge>;
  /** Publish one sectionRelatedProduct */
  publishSectionRelatedProduct?: Maybe<SectionRelatedProduct>;
  /** Publish one sectionSalonServiceBlock */
  publishSectionSalonServiceBlock?: Maybe<SectionSalonServiceBlock>;
  /** Publish one sectionSearchTermList */
  publishSectionSearchTermList?: Maybe<SectionSearchTermList>;
  /** Publish one sectionSeoText */
  publishSectionSeoText?: Maybe<SectionSeoText>;
  /** Publish one sectionSocialMediaCtaSmall */
  publishSectionSocialMediaCtaSmall?: Maybe<SectionSocialMediaCtaSmall>;
  /** Publish one sectionTextBlock */
  publishSectionTextBlock?: Maybe<SectionTextBlock>;
  /** Publish one sectionVideoCarousel */
  publishSectionVideoCarousel?: Maybe<SectionVideoCarousel>;
  /** Publish one sectionsAccordion */
  publishSectionsAccordion?: Maybe<SectionsAccordion>;
  /** Publish one socialMediaCtaLarge */
  publishSocialMediaCtaLarge?: Maybe<SocialMediaCtaLarge>;
  /** Publish one websiteConfig */
  publishWebsiteConfig?: Maybe<WebsiteConfig>;
  /** Schedule to publish one asset */
  schedulePublishAsset?: Maybe<Asset>;
  /** Schedule to publish one blogArticle */
  schedulePublishBlogArticle?: Maybe<BlogArticle>;
  /** Schedule to publish one blogAuthor */
  schedulePublishBlogAuthor?: Maybe<BlogAuthor>;
  /** Schedule to publish one brandLogoGrid */
  schedulePublishBrandLogoGrid?: Maybe<BrandLogoGrid>;
  /** Schedule to publish one brandsBrandLogo */
  schedulePublishBrandsBrandLogo?: Maybe<BrandsBrandLogo>;
  /** Schedule to publish one cMSPage */
  schedulePublishCMSPage?: Maybe<CmsPage>;
  /** Schedule to publish one collectionPage */
  schedulePublishCollectionPage?: Maybe<CollectionPage>;
  /** Schedule to publish one configCareer */
  schedulePublishConfigCareer?: Maybe<ConfigCareer>;
  /** Schedule to publish one configSalonBooking */
  schedulePublishConfigSalonBooking?: Maybe<ConfigSalonBooking>;
  /** Schedule to publish one configSalonMenu */
  schedulePublishConfigSalonMenu?: Maybe<ConfigSalonMenu>;
  /** Schedule to publish one configSearch */
  schedulePublishConfigSearch?: Maybe<ConfigSearch>;
  /** Schedule to publish one editorialText */
  schedulePublishEditorialText?: Maybe<EditorialText>;
  /** Schedule to publish one featureProductCarouselTabbed */
  schedulePublishFeatureProductCarouselTabbed?: Maybe<FeatureProductCarouselTabbed>;
  /** Schedule to publish one footerConfig */
  schedulePublishFooterConfig?: Maybe<FooterConfig>;
  /** Schedule to publish one headerConfig */
  schedulePublishHeaderConfig?: Maybe<HeaderConfig>;
  /** Schedule to publish one heroBanner */
  schedulePublishHeroBanner?: Maybe<HeroBanner>;
  /** Schedule to publish one joinCTApanel */
  schedulePublishJoinCTApanel?: Maybe<JoinCtApanel>;
  /** Schedule to publish one modulePromoBanner */
  schedulePublishModulePromoBanner?: Maybe<ModulePromoBanner>;
  /** Schedule to publish one multiCollectionSlider */
  schedulePublishMultiCollectionSlider?: Maybe<MultiCollectionSlider>;
  /** Schedule to publish one offerTiles */
  schedulePublishOfferTiles?: Maybe<OfferTiles>;
  /** Schedule to publish one pageBuyingGuide */
  schedulePublishPageBuyingGuide?: Maybe<PageBuyingGuide>;
  /** Schedule to publish one productBenefitsGrid */
  schedulePublishProductBenefitsGrid?: Maybe<ProductBenefitsGrid>;
  /** Schedule to publish one productHowTo */
  schedulePublishProductHowTo?: Maybe<ProductHowTo>;
  /** Schedule to publish one productPage */
  schedulePublishProductPage?: Maybe<ProductPage>;
  /** Schedule to publish one proposition */
  schedulePublishProposition?: Maybe<Proposition>;
  /** Schedule to publish one sectionAccountSignupCta */
  schedulePublishSectionAccountSignupCta?: Maybe<SectionAccountSignupCta>;
  /** Schedule to publish one sectionBlogListing */
  schedulePublishSectionBlogListing?: Maybe<SectionBlogListing>;
  /** Schedule to publish one sectionCollectionCarousel */
  schedulePublishSectionCollectionCarousel?: Maybe<SectionCollectionCarousel>;
  /** Schedule to publish one sectionCollectionDropDown */
  schedulePublishSectionCollectionDropDown?: Maybe<SectionCollectionDropDown>;
  /** Schedule to publish one sectionCollectionFeatureLarge */
  schedulePublishSectionCollectionFeatureLarge?: Maybe<SectionCollectionFeatureLarge>;
  /** Schedule to publish one sectionCollectionMain */
  schedulePublishSectionCollectionMain?: Maybe<SectionCollectionMain>;
  /** Schedule to publish one sectionCollectionSubcategoryLink */
  schedulePublishSectionCollectionSubcategoryLink?: Maybe<SectionCollectionSubcategoryLink>;
  /** Schedule to publish one sectionCtaButton */
  schedulePublishSectionCtaButton?: Maybe<SectionCtaButton>;
  /** Schedule to publish one sectionFullWidthImage */
  schedulePublishSectionFullWidthImage?: Maybe<SectionFullWidthImage>;
  /** Schedule to publish one sectionImageAndTextGrid */
  schedulePublishSectionImageAndTextGrid?: Maybe<SectionImageAndTextGrid>;
  /** Schedule to publish one sectionImageTextOverlay */
  schedulePublishSectionImageTextOverlay?: Maybe<SectionImageTextOverlay>;
  /** Schedule to publish one sectionPreezieProductFinder */
  schedulePublishSectionPreezieProductFinder?: Maybe<SectionPreezieProductFinder>;
  /** Schedule to publish one sectionProductMain */
  schedulePublishSectionProductMain?: Maybe<SectionProductMain>;
  /** Schedule to publish one sectionProductReview */
  schedulePublishSectionProductReview?: Maybe<SectionProductReview>;
  /** Schedule to publish one sectionProductSpotlightGrid */
  schedulePublishSectionProductSpotlightGrid?: Maybe<SectionProductSpotlightGrid>;
  /** Schedule to publish one sectionProductSpotlightLarge */
  schedulePublishSectionProductSpotlightLarge?: Maybe<SectionProductSpotlightLarge>;
  /** Schedule to publish one sectionRelatedProduct */
  schedulePublishSectionRelatedProduct?: Maybe<SectionRelatedProduct>;
  /** Schedule to publish one sectionSalonServiceBlock */
  schedulePublishSectionSalonServiceBlock?: Maybe<SectionSalonServiceBlock>;
  /** Schedule to publish one sectionSearchTermList */
  schedulePublishSectionSearchTermList?: Maybe<SectionSearchTermList>;
  /** Schedule to publish one sectionSeoText */
  schedulePublishSectionSeoText?: Maybe<SectionSeoText>;
  /** Schedule to publish one sectionSocialMediaCtaSmall */
  schedulePublishSectionSocialMediaCtaSmall?: Maybe<SectionSocialMediaCtaSmall>;
  /** Schedule to publish one sectionTextBlock */
  schedulePublishSectionTextBlock?: Maybe<SectionTextBlock>;
  /** Schedule to publish one sectionVideoCarousel */
  schedulePublishSectionVideoCarousel?: Maybe<SectionVideoCarousel>;
  /** Schedule to publish one sectionsAccordion */
  schedulePublishSectionsAccordion?: Maybe<SectionsAccordion>;
  /** Schedule to publish one socialMediaCtaLarge */
  schedulePublishSocialMediaCtaLarge?: Maybe<SocialMediaCtaLarge>;
  /** Schedule to publish one websiteConfig */
  schedulePublishWebsiteConfig?: Maybe<WebsiteConfig>;
  /** Unpublish one asset from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishAsset?: Maybe<Asset>;
  /** Unpublish one blogArticle from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishBlogArticle?: Maybe<BlogArticle>;
  /** Unpublish one blogAuthor from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishBlogAuthor?: Maybe<BlogAuthor>;
  /** Unpublish one brandLogoGrid from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishBrandLogoGrid?: Maybe<BrandLogoGrid>;
  /** Unpublish one brandsBrandLogo from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishBrandsBrandLogo?: Maybe<BrandsBrandLogo>;
  /** Unpublish one cMSPage from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishCMSPage?: Maybe<CmsPage>;
  /** Unpublish one collectionPage from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishCollectionPage?: Maybe<CollectionPage>;
  /** Unpublish one configCareer from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishConfigCareer?: Maybe<ConfigCareer>;
  /** Unpublish one configSalonBooking from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishConfigSalonBooking?: Maybe<ConfigSalonBooking>;
  /** Unpublish one configSalonMenu from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishConfigSalonMenu?: Maybe<ConfigSalonMenu>;
  /** Unpublish one configSearch from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishConfigSearch?: Maybe<ConfigSearch>;
  /** Unpublish one editorialText from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishEditorialText?: Maybe<EditorialText>;
  /** Unpublish one featureProductCarouselTabbed from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishFeatureProductCarouselTabbed?: Maybe<FeatureProductCarouselTabbed>;
  /** Unpublish one footerConfig from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishFooterConfig?: Maybe<FooterConfig>;
  /** Unpublish one headerConfig from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishHeaderConfig?: Maybe<HeaderConfig>;
  /** Unpublish one heroBanner from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishHeroBanner?: Maybe<HeroBanner>;
  /** Unpublish one joinCTApanel from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishJoinCTApanel?: Maybe<JoinCtApanel>;
  /** Unpublish one modulePromoBanner from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishModulePromoBanner?: Maybe<ModulePromoBanner>;
  /** Unpublish one multiCollectionSlider from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishMultiCollectionSlider?: Maybe<MultiCollectionSlider>;
  /** Unpublish one offerTiles from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishOfferTiles?: Maybe<OfferTiles>;
  /** Unpublish one pageBuyingGuide from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishPageBuyingGuide?: Maybe<PageBuyingGuide>;
  /** Unpublish one productBenefitsGrid from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishProductBenefitsGrid?: Maybe<ProductBenefitsGrid>;
  /** Unpublish one productHowTo from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishProductHowTo?: Maybe<ProductHowTo>;
  /** Unpublish one productPage from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishProductPage?: Maybe<ProductPage>;
  /** Unpublish one proposition from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishProposition?: Maybe<Proposition>;
  /** Unpublish one sectionAccountSignupCta from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSectionAccountSignupCta?: Maybe<SectionAccountSignupCta>;
  /** Unpublish one sectionBlogListing from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSectionBlogListing?: Maybe<SectionBlogListing>;
  /** Unpublish one sectionCollectionCarousel from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSectionCollectionCarousel?: Maybe<SectionCollectionCarousel>;
  /** Unpublish one sectionCollectionDropDown from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSectionCollectionDropDown?: Maybe<SectionCollectionDropDown>;
  /** Unpublish one sectionCollectionFeatureLarge from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSectionCollectionFeatureLarge?: Maybe<SectionCollectionFeatureLarge>;
  /** Unpublish one sectionCollectionMain from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSectionCollectionMain?: Maybe<SectionCollectionMain>;
  /** Unpublish one sectionCollectionSubcategoryLink from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSectionCollectionSubcategoryLink?: Maybe<SectionCollectionSubcategoryLink>;
  /** Unpublish one sectionCtaButton from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSectionCtaButton?: Maybe<SectionCtaButton>;
  /** Unpublish one sectionFullWidthImage from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSectionFullWidthImage?: Maybe<SectionFullWidthImage>;
  /** Unpublish one sectionImageAndTextGrid from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSectionImageAndTextGrid?: Maybe<SectionImageAndTextGrid>;
  /** Unpublish one sectionImageTextOverlay from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSectionImageTextOverlay?: Maybe<SectionImageTextOverlay>;
  /** Unpublish one sectionPreezieProductFinder from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSectionPreezieProductFinder?: Maybe<SectionPreezieProductFinder>;
  /** Unpublish one sectionProductMain from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSectionProductMain?: Maybe<SectionProductMain>;
  /** Unpublish one sectionProductReview from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSectionProductReview?: Maybe<SectionProductReview>;
  /** Unpublish one sectionProductSpotlightGrid from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSectionProductSpotlightGrid?: Maybe<SectionProductSpotlightGrid>;
  /** Unpublish one sectionProductSpotlightLarge from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSectionProductSpotlightLarge?: Maybe<SectionProductSpotlightLarge>;
  /** Unpublish one sectionRelatedProduct from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSectionRelatedProduct?: Maybe<SectionRelatedProduct>;
  /** Unpublish one sectionSalonServiceBlock from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSectionSalonServiceBlock?: Maybe<SectionSalonServiceBlock>;
  /** Unpublish one sectionSearchTermList from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSectionSearchTermList?: Maybe<SectionSearchTermList>;
  /** Unpublish one sectionSeoText from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSectionSeoText?: Maybe<SectionSeoText>;
  /** Unpublish one sectionSocialMediaCtaSmall from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSectionSocialMediaCtaSmall?: Maybe<SectionSocialMediaCtaSmall>;
  /** Unpublish one sectionTextBlock from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSectionTextBlock?: Maybe<SectionTextBlock>;
  /** Unpublish one sectionVideoCarousel from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSectionVideoCarousel?: Maybe<SectionVideoCarousel>;
  /** Unpublish one sectionsAccordion from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSectionsAccordion?: Maybe<SectionsAccordion>;
  /** Unpublish one socialMediaCtaLarge from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishSocialMediaCtaLarge?: Maybe<SocialMediaCtaLarge>;
  /** Unpublish one websiteConfig from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishWebsiteConfig?: Maybe<WebsiteConfig>;
  /** Unpublish one asset from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishAsset?: Maybe<Asset>;
  /** Unpublish one blogArticle from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishBlogArticle?: Maybe<BlogArticle>;
  /** Unpublish one blogAuthor from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishBlogAuthor?: Maybe<BlogAuthor>;
  /** Unpublish one brandLogoGrid from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishBrandLogoGrid?: Maybe<BrandLogoGrid>;
  /** Unpublish one brandsBrandLogo from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishBrandsBrandLogo?: Maybe<BrandsBrandLogo>;
  /** Unpublish one cMSPage from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishCMSPage?: Maybe<CmsPage>;
  /** Unpublish one collectionPage from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishCollectionPage?: Maybe<CollectionPage>;
  /** Unpublish one configCareer from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishConfigCareer?: Maybe<ConfigCareer>;
  /** Unpublish one configSalonBooking from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishConfigSalonBooking?: Maybe<ConfigSalonBooking>;
  /** Unpublish one configSalonMenu from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishConfigSalonMenu?: Maybe<ConfigSalonMenu>;
  /** Unpublish one configSearch from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishConfigSearch?: Maybe<ConfigSearch>;
  /** Unpublish one editorialText from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishEditorialText?: Maybe<EditorialText>;
  /** Unpublish one featureProductCarouselTabbed from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishFeatureProductCarouselTabbed?: Maybe<FeatureProductCarouselTabbed>;
  /** Unpublish one footerConfig from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishFooterConfig?: Maybe<FooterConfig>;
  /** Unpublish one headerConfig from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishHeaderConfig?: Maybe<HeaderConfig>;
  /** Unpublish one heroBanner from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishHeroBanner?: Maybe<HeroBanner>;
  /** Unpublish one joinCTApanel from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishJoinCTApanel?: Maybe<JoinCtApanel>;
  /**
   * Unpublish many Asset documents
   * @deprecated Please use the new paginated many mutation (unpublishManyAssetsConnection)
   */
  unpublishManyAssets: BatchPayload;
  /** Find many Asset documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyAssetsConnection: AssetConnection;
  /**
   * Unpublish many BlogAuthor documents
   * @deprecated Please use the new paginated many mutation (unpublishManyBlogAuthorsConnection)
   */
  unpublishManyBlogAuthors: BatchPayload;
  /** Find many BlogAuthor documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyBlogAuthorsConnection: BlogAuthorConnection;
  /**
   * Unpublish many BrandLogoGrid documents
   * @deprecated Please use the new paginated many mutation (unpublishManyBrandLogoGridsConnection)
   */
  unpublishManyBrandLogoGrids: BatchPayload;
  /** Find many BrandLogoGrid documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyBrandLogoGridsConnection: BrandLogoGridConnection;
  /**
   * Unpublish many BrandsBrandLogo documents
   * @deprecated Please use the new paginated many mutation (unpublishManyBrandsBrandsLogosConnection)
   */
  unpublishManyBrandsBrandsLogos: BatchPayload;
  /** Find many BrandsBrandLogo documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyBrandsBrandsLogosConnection: BrandsBrandLogoConnection;
  /**
   * Unpublish many CMSPage documents
   * @deprecated Please use the new paginated many mutation (unpublishManyCMSPagesConnection)
   */
  unpublishManyCMSPages: BatchPayload;
  /** Find many CMSPage documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyCMSPagesConnection: CmsPageConnection;
  /**
   * Unpublish many CollectionPage documents
   * @deprecated Please use the new paginated many mutation (unpublishManyCollectionPagesConnection)
   */
  unpublishManyCollectionPages: BatchPayload;
  /** Find many CollectionPage documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyCollectionPagesConnection: CollectionPageConnection;
  /**
   * Unpublish many ConfigCareer documents
   * @deprecated Please use the new paginated many mutation (unpublishManyConfigCareersConnection)
   */
  unpublishManyConfigCareers: BatchPayload;
  /** Find many ConfigCareer documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyConfigCareersConnection: ConfigCareerConnection;
  /**
   * Unpublish many ConfigSalonBooking documents
   * @deprecated Please use the new paginated many mutation (unpublishManyConfigSalonBookingsConnection)
   */
  unpublishManyConfigSalonBookings: BatchPayload;
  /** Find many ConfigSalonBooking documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyConfigSalonBookingsConnection: ConfigSalonBookingConnection;
  /**
   * Unpublish many ConfigSalonMenu documents
   * @deprecated Please use the new paginated many mutation (unpublishManyConfigSalonMenusConnection)
   */
  unpublishManyConfigSalonMenus: BatchPayload;
  /** Find many ConfigSalonMenu documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyConfigSalonMenusConnection: ConfigSalonMenuConnection;
  /**
   * Unpublish many ConfigSearch documents
   * @deprecated Please use the new paginated many mutation (unpublishManyConfigSearchesConnection)
   */
  unpublishManyConfigSearches: BatchPayload;
  /** Find many ConfigSearch documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyConfigSearchesConnection: ConfigSearchConnection;
  /**
   * Unpublish many EditorialText documents
   * @deprecated Please use the new paginated many mutation (unpublishManyEditorialTextsConnection)
   */
  unpublishManyEditorialTexts: BatchPayload;
  /** Find many EditorialText documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyEditorialTextsConnection: EditorialTextConnection;
  /**
   * Unpublish many FeatureProductCarouselTabbed documents
   * @deprecated Please use the new paginated many mutation (unpublishManyFeatureProductCarouselTabsConnection)
   */
  unpublishManyFeatureProductCarouselTabs: BatchPayload;
  /** Find many FeatureProductCarouselTabbed documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyFeatureProductCarouselTabsConnection: FeatureProductCarouselTabbedConnection;
  /**
   * Unpublish many FooterConfig documents
   * @deprecated Please use the new paginated many mutation (unpublishManyFooterConfigsConnection)
   */
  unpublishManyFooterConfigs: BatchPayload;
  /** Find many FooterConfig documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyFooterConfigsConnection: FooterConfigConnection;
  /**
   * Unpublish many HeaderConfig documents
   * @deprecated Please use the new paginated many mutation (unpublishManyHeaderConfigsConnection)
   */
  unpublishManyHeaderConfigs: BatchPayload;
  /** Find many HeaderConfig documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyHeaderConfigsConnection: HeaderConfigConnection;
  /**
   * Unpublish many HeroBanner documents
   * @deprecated Please use the new paginated many mutation (unpublishManyHeroBannersConnection)
   */
  unpublishManyHeroBanners: BatchPayload;
  /** Find many HeroBanner documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyHeroBannersConnection: HeroBannerConnection;
  /**
   * Unpublish many JoinCTApanel documents
   * @deprecated Please use the new paginated many mutation (unpublishManyJointCTApanelsConnection)
   */
  unpublishManyJointCTApanels: BatchPayload;
  /** Find many JoinCTApanel documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyJointCTApanelsConnection: JoinCtApanelConnection;
  /**
   * Unpublish many ModulePromoBanner documents
   * @deprecated Please use the new paginated many mutation (unpublishManyModulePromoBannersConnection)
   */
  unpublishManyModulePromoBanners: BatchPayload;
  /** Find many ModulePromoBanner documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyModulePromoBannersConnection: ModulePromoBannerConnection;
  /**
   * Unpublish many MultiCollectionSlider documents
   * @deprecated Please use the new paginated many mutation (unpublishManyMultiCollectionSlidersConnection)
   */
  unpublishManyMultiCollectionSliders: BatchPayload;
  /** Find many MultiCollectionSlider documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyMultiCollectionSlidersConnection: MultiCollectionSliderConnection;
  /**
   * Unpublish many OfferTiles documents
   * @deprecated Please use the new paginated many mutation (unpublishManyOfferTilessConnection)
   */
  unpublishManyOfferTiless: BatchPayload;
  /** Find many OfferTiles documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyOfferTilessConnection: OfferTilesConnection;
  /**
   * Unpublish many BlogArticle documents
   * @deprecated Please use the new paginated many mutation (unpublishManyPageBlogArticlesConnection)
   */
  unpublishManyPageBlogArticles: BatchPayload;
  /** Find many BlogArticle documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyPageBlogArticlesConnection: BlogArticleConnection;
  /**
   * Unpublish many PageBuyingGuide documents
   * @deprecated Please use the new paginated many mutation (unpublishManyPageBuyingGuidesConnection)
   */
  unpublishManyPageBuyingGuides: BatchPayload;
  /** Find many PageBuyingGuide documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyPageBuyingGuidesConnection: PageBuyingGuideConnection;
  /**
   * Unpublish many ProductBenefitsGrid documents
   * @deprecated Please use the new paginated many mutation (unpublishManyProductBenefitsGridsConnection)
   */
  unpublishManyProductBenefitsGrids: BatchPayload;
  /** Find many ProductBenefitsGrid documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyProductBenefitsGridsConnection: ProductBenefitsGridConnection;
  /**
   * Unpublish many ProductHowTo documents
   * @deprecated Please use the new paginated many mutation (unpublishManyProductHowTosConnection)
   */
  unpublishManyProductHowTos: BatchPayload;
  /** Find many ProductHowTo documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyProductHowTosConnection: ProductHowToConnection;
  /**
   * Unpublish many ProductPage documents
   * @deprecated Please use the new paginated many mutation (unpublishManyProductPagesConnection)
   */
  unpublishManyProductPages: BatchPayload;
  /** Find many ProductPage documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyProductPagesConnection: ProductPageConnection;
  /**
   * Unpublish many Proposition documents
   * @deprecated Please use the new paginated many mutation (unpublishManyPropositionsConnection)
   */
  unpublishManyPropositions: BatchPayload;
  /** Find many Proposition documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyPropositionsConnection: PropositionConnection;
  /**
   * Unpublish many SectionAccountSignupCta documents
   * @deprecated Please use the new paginated many mutation (unpublishManySectionAccountSignupCtasConnection)
   */
  unpublishManySectionAccountSignupCtas: BatchPayload;
  /** Find many SectionAccountSignupCta documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySectionAccountSignupCtasConnection: SectionAccountSignupCtaConnection;
  /**
   * Unpublish many SectionBlogListing documents
   * @deprecated Please use the new paginated many mutation (unpublishManySectionBlogListingsConnection)
   */
  unpublishManySectionBlogListings: BatchPayload;
  /** Find many SectionBlogListing documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySectionBlogListingsConnection: SectionBlogListingConnection;
  /**
   * Unpublish many SectionCollectionCarousel documents
   * @deprecated Please use the new paginated many mutation (unpublishManySectionCollectionCarouselsConnection)
   */
  unpublishManySectionCollectionCarousels: BatchPayload;
  /** Find many SectionCollectionCarousel documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySectionCollectionCarouselsConnection: SectionCollectionCarouselConnection;
  /**
   * Unpublish many SectionCollectionDropDown documents
   * @deprecated Please use the new paginated many mutation (unpublishManySectionCollectionDropDownsConnection)
   */
  unpublishManySectionCollectionDropDowns: BatchPayload;
  /** Find many SectionCollectionDropDown documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySectionCollectionDropDownsConnection: SectionCollectionDropDownConnection;
  /**
   * Unpublish many SectionCollectionFeatureLarge documents
   * @deprecated Please use the new paginated many mutation (unpublishManySectionCollectionFeatureLargesConnection)
   */
  unpublishManySectionCollectionFeatureLarges: BatchPayload;
  /** Find many SectionCollectionFeatureLarge documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySectionCollectionFeatureLargesConnection: SectionCollectionFeatureLargeConnection;
  /**
   * Unpublish many SectionCollectionMain documents
   * @deprecated Please use the new paginated many mutation (unpublishManySectionCollectionMainsConnection)
   */
  unpublishManySectionCollectionMains: BatchPayload;
  /** Find many SectionCollectionMain documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySectionCollectionMainsConnection: SectionCollectionMainConnection;
  /**
   * Unpublish many SectionCollectionSubcategoryLink documents
   * @deprecated Please use the new paginated many mutation (unpublishManySectionCollectionSubcategoryLinksConnection)
   */
  unpublishManySectionCollectionSubcategoryLinks: BatchPayload;
  /** Find many SectionCollectionSubcategoryLink documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySectionCollectionSubcategoryLinksConnection: SectionCollectionSubcategoryLinkConnection;
  /**
   * Unpublish many SectionCtaButton documents
   * @deprecated Please use the new paginated many mutation (unpublishManySectionCtaButtonsConnection)
   */
  unpublishManySectionCtaButtons: BatchPayload;
  /** Find many SectionCtaButton documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySectionCtaButtonsConnection: SectionCtaButtonConnection;
  /**
   * Unpublish many SectionFullWidthImage documents
   * @deprecated Please use the new paginated many mutation (unpublishManySectionFullWidthImagesConnection)
   */
  unpublishManySectionFullWidthImages: BatchPayload;
  /** Find many SectionFullWidthImage documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySectionFullWidthImagesConnection: SectionFullWidthImageConnection;
  /**
   * Unpublish many SectionImageAndTextGrid documents
   * @deprecated Please use the new paginated many mutation (unpublishManySectionImageAndTextGridsConnection)
   */
  unpublishManySectionImageAndTextGrids: BatchPayload;
  /** Find many SectionImageAndTextGrid documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySectionImageAndTextGridsConnection: SectionImageAndTextGridConnection;
  /**
   * Unpublish many SectionImageTextOverlay documents
   * @deprecated Please use the new paginated many mutation (unpublishManySectionImageTextOverlaysConnection)
   */
  unpublishManySectionImageTextOverlays: BatchPayload;
  /** Find many SectionImageTextOverlay documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySectionImageTextOverlaysConnection: SectionImageTextOverlayConnection;
  /**
   * Unpublish many SectionPreezieProductFinder documents
   * @deprecated Please use the new paginated many mutation (unpublishManySectionPreezieProductFindersConnection)
   */
  unpublishManySectionPreezieProductFinders: BatchPayload;
  /** Find many SectionPreezieProductFinder documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySectionPreezieProductFindersConnection: SectionPreezieProductFinderConnection;
  /**
   * Unpublish many SectionProductMain documents
   * @deprecated Please use the new paginated many mutation (unpublishManySectionProductMainsConnection)
   */
  unpublishManySectionProductMains: BatchPayload;
  /** Find many SectionProductMain documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySectionProductMainsConnection: SectionProductMainConnection;
  /**
   * Unpublish many SectionProductReview documents
   * @deprecated Please use the new paginated many mutation (unpublishManySectionProductReviewsConnection)
   */
  unpublishManySectionProductReviews: BatchPayload;
  /** Find many SectionProductReview documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySectionProductReviewsConnection: SectionProductReviewConnection;
  /**
   * Unpublish many SectionProductSpotlightGrid documents
   * @deprecated Please use the new paginated many mutation (unpublishManySectionProductSpotlightGridsConnection)
   */
  unpublishManySectionProductSpotlightGrids: BatchPayload;
  /** Find many SectionProductSpotlightGrid documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySectionProductSpotlightGridsConnection: SectionProductSpotlightGridConnection;
  /**
   * Unpublish many SectionProductSpotlightLarge documents
   * @deprecated Please use the new paginated many mutation (unpublishManySectionProductSpotlightLargesConnection)
   */
  unpublishManySectionProductSpotlightLarges: BatchPayload;
  /** Find many SectionProductSpotlightLarge documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySectionProductSpotlightLargesConnection: SectionProductSpotlightLargeConnection;
  /**
   * Unpublish many SectionRelatedProduct documents
   * @deprecated Please use the new paginated many mutation (unpublishManySectionRelatedProductsConnection)
   */
  unpublishManySectionRelatedProducts: BatchPayload;
  /** Find many SectionRelatedProduct documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySectionRelatedProductsConnection: SectionRelatedProductConnection;
  /**
   * Unpublish many SectionSalonServiceBlock documents
   * @deprecated Please use the new paginated many mutation (unpublishManySectionSalonServiceBlocksConnection)
   */
  unpublishManySectionSalonServiceBlocks: BatchPayload;
  /** Find many SectionSalonServiceBlock documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySectionSalonServiceBlocksConnection: SectionSalonServiceBlockConnection;
  /**
   * Unpublish many SectionSearchTermList documents
   * @deprecated Please use the new paginated many mutation (unpublishManySectionSearchTermListsConnection)
   */
  unpublishManySectionSearchTermLists: BatchPayload;
  /** Find many SectionSearchTermList documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySectionSearchTermListsConnection: SectionSearchTermListConnection;
  /**
   * Unpublish many SectionSeoText documents
   * @deprecated Please use the new paginated many mutation (unpublishManySectionSeoTextsConnection)
   */
  unpublishManySectionSeoTexts: BatchPayload;
  /** Find many SectionSeoText documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySectionSeoTextsConnection: SectionSeoTextConnection;
  /**
   * Unpublish many SectionSocialMediaCtaSmall documents
   * @deprecated Please use the new paginated many mutation (unpublishManySectionSocialMediaCtaSmallsConnection)
   */
  unpublishManySectionSocialMediaCtaSmalls: BatchPayload;
  /** Find many SectionSocialMediaCtaSmall documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySectionSocialMediaCtaSmallsConnection: SectionSocialMediaCtaSmallConnection;
  /**
   * Unpublish many SectionTextBlock documents
   * @deprecated Please use the new paginated many mutation (unpublishManySectionTextBlocksConnection)
   */
  unpublishManySectionTextBlocks: BatchPayload;
  /** Find many SectionTextBlock documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySectionTextBlocksConnection: SectionTextBlockConnection;
  /**
   * Unpublish many SectionVideoCarousel documents
   * @deprecated Please use the new paginated many mutation (unpublishManySectionVideoCarouselsConnection)
   */
  unpublishManySectionVideoCarousels: BatchPayload;
  /** Find many SectionVideoCarousel documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySectionVideoCarouselsConnection: SectionVideoCarouselConnection;
  /**
   * Unpublish many SectionsAccordion documents
   * @deprecated Please use the new paginated many mutation (unpublishManySectionsAccordionsConnection)
   */
  unpublishManySectionsAccordions: BatchPayload;
  /** Find many SectionsAccordion documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySectionsAccordionsConnection: SectionsAccordionConnection;
  /**
   * Unpublish many SocialMediaCtaLarge documents
   * @deprecated Please use the new paginated many mutation (unpublishManySocialMediaCtaLargesConnection)
   */
  unpublishManySocialMediaCtaLarges: BatchPayload;
  /** Find many SocialMediaCtaLarge documents that match criteria in specified stage and unpublish from target stages */
  unpublishManySocialMediaCtaLargesConnection: SocialMediaCtaLargeConnection;
  /**
   * Unpublish many WebsiteConfig documents
   * @deprecated Please use the new paginated many mutation (unpublishManyWebsiteConfigsConnection)
   */
  unpublishManyWebsiteConfigs: BatchPayload;
  /** Find many WebsiteConfig documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyWebsiteConfigsConnection: WebsiteConfigConnection;
  /** Unpublish one modulePromoBanner from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishModulePromoBanner?: Maybe<ModulePromoBanner>;
  /** Unpublish one multiCollectionSlider from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishMultiCollectionSlider?: Maybe<MultiCollectionSlider>;
  /** Unpublish one offerTiles from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishOfferTiles?: Maybe<OfferTiles>;
  /** Unpublish one pageBuyingGuide from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishPageBuyingGuide?: Maybe<PageBuyingGuide>;
  /** Unpublish one productBenefitsGrid from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishProductBenefitsGrid?: Maybe<ProductBenefitsGrid>;
  /** Unpublish one productHowTo from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishProductHowTo?: Maybe<ProductHowTo>;
  /** Unpublish one productPage from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishProductPage?: Maybe<ProductPage>;
  /** Unpublish one proposition from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishProposition?: Maybe<Proposition>;
  /** Unpublish one sectionAccountSignupCta from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSectionAccountSignupCta?: Maybe<SectionAccountSignupCta>;
  /** Unpublish one sectionBlogListing from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSectionBlogListing?: Maybe<SectionBlogListing>;
  /** Unpublish one sectionCollectionCarousel from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSectionCollectionCarousel?: Maybe<SectionCollectionCarousel>;
  /** Unpublish one sectionCollectionDropDown from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSectionCollectionDropDown?: Maybe<SectionCollectionDropDown>;
  /** Unpublish one sectionCollectionFeatureLarge from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSectionCollectionFeatureLarge?: Maybe<SectionCollectionFeatureLarge>;
  /** Unpublish one sectionCollectionMain from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSectionCollectionMain?: Maybe<SectionCollectionMain>;
  /** Unpublish one sectionCollectionSubcategoryLink from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSectionCollectionSubcategoryLink?: Maybe<SectionCollectionSubcategoryLink>;
  /** Unpublish one sectionCtaButton from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSectionCtaButton?: Maybe<SectionCtaButton>;
  /** Unpublish one sectionFullWidthImage from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSectionFullWidthImage?: Maybe<SectionFullWidthImage>;
  /** Unpublish one sectionImageAndTextGrid from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSectionImageAndTextGrid?: Maybe<SectionImageAndTextGrid>;
  /** Unpublish one sectionImageTextOverlay from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSectionImageTextOverlay?: Maybe<SectionImageTextOverlay>;
  /** Unpublish one sectionPreezieProductFinder from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSectionPreezieProductFinder?: Maybe<SectionPreezieProductFinder>;
  /** Unpublish one sectionProductMain from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSectionProductMain?: Maybe<SectionProductMain>;
  /** Unpublish one sectionProductReview from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSectionProductReview?: Maybe<SectionProductReview>;
  /** Unpublish one sectionProductSpotlightGrid from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSectionProductSpotlightGrid?: Maybe<SectionProductSpotlightGrid>;
  /** Unpublish one sectionProductSpotlightLarge from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSectionProductSpotlightLarge?: Maybe<SectionProductSpotlightLarge>;
  /** Unpublish one sectionRelatedProduct from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSectionRelatedProduct?: Maybe<SectionRelatedProduct>;
  /** Unpublish one sectionSalonServiceBlock from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSectionSalonServiceBlock?: Maybe<SectionSalonServiceBlock>;
  /** Unpublish one sectionSearchTermList from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSectionSearchTermList?: Maybe<SectionSearchTermList>;
  /** Unpublish one sectionSeoText from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSectionSeoText?: Maybe<SectionSeoText>;
  /** Unpublish one sectionSocialMediaCtaSmall from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSectionSocialMediaCtaSmall?: Maybe<SectionSocialMediaCtaSmall>;
  /** Unpublish one sectionTextBlock from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSectionTextBlock?: Maybe<SectionTextBlock>;
  /** Unpublish one sectionVideoCarousel from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSectionVideoCarousel?: Maybe<SectionVideoCarousel>;
  /** Unpublish one sectionsAccordion from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSectionsAccordion?: Maybe<SectionsAccordion>;
  /** Unpublish one socialMediaCtaLarge from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishSocialMediaCtaLarge?: Maybe<SocialMediaCtaLarge>;
  /** Unpublish one websiteConfig from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishWebsiteConfig?: Maybe<WebsiteConfig>;
  /** Update one asset */
  updateAsset?: Maybe<Asset>;
  /** Update one blogArticle */
  updateBlogArticle?: Maybe<BlogArticle>;
  /** Update one blogAuthor */
  updateBlogAuthor?: Maybe<BlogAuthor>;
  /** Update one brandLogoGrid */
  updateBrandLogoGrid?: Maybe<BrandLogoGrid>;
  /** Update one brandsBrandLogo */
  updateBrandsBrandLogo?: Maybe<BrandsBrandLogo>;
  /** Update one cMSPage */
  updateCMSPage?: Maybe<CmsPage>;
  /** Update one collectionPage */
  updateCollectionPage?: Maybe<CollectionPage>;
  /** Update one configCareer */
  updateConfigCareer?: Maybe<ConfigCareer>;
  /** Update one configSalonBooking */
  updateConfigSalonBooking?: Maybe<ConfigSalonBooking>;
  /** Update one configSalonMenu */
  updateConfigSalonMenu?: Maybe<ConfigSalonMenu>;
  /** Update one configSearch */
  updateConfigSearch?: Maybe<ConfigSearch>;
  /** Update one editorialText */
  updateEditorialText?: Maybe<EditorialText>;
  /** Update one featureProductCarouselTabbed */
  updateFeatureProductCarouselTabbed?: Maybe<FeatureProductCarouselTabbed>;
  /** Update one footerConfig */
  updateFooterConfig?: Maybe<FooterConfig>;
  /** Update one headerConfig */
  updateHeaderConfig?: Maybe<HeaderConfig>;
  /** Update one heroBanner */
  updateHeroBanner?: Maybe<HeroBanner>;
  /** Update one joinCTApanel */
  updateJoinCTApanel?: Maybe<JoinCtApanel>;
  /**
   * Update many assets
   * @deprecated Please use the new paginated many mutation (updateManyAssetsConnection)
   */
  updateManyAssets: BatchPayload;
  /** Update many Asset documents */
  updateManyAssetsConnection: AssetConnection;
  /**
   * Update many blogAuthors
   * @deprecated Please use the new paginated many mutation (updateManyBlogAuthorsConnection)
   */
  updateManyBlogAuthors: BatchPayload;
  /** Update many BlogAuthor documents */
  updateManyBlogAuthorsConnection: BlogAuthorConnection;
  /**
   * Update many brandLogoGrids
   * @deprecated Please use the new paginated many mutation (updateManyBrandLogoGridsConnection)
   */
  updateManyBrandLogoGrids: BatchPayload;
  /** Update many BrandLogoGrid documents */
  updateManyBrandLogoGridsConnection: BrandLogoGridConnection;
  /**
   * Update many brandsBrandsLogos
   * @deprecated Please use the new paginated many mutation (updateManyBrandsBrandsLogosConnection)
   */
  updateManyBrandsBrandsLogos: BatchPayload;
  /** Update many BrandsBrandLogo documents */
  updateManyBrandsBrandsLogosConnection: BrandsBrandLogoConnection;
  /**
   * Update many cMSPages
   * @deprecated Please use the new paginated many mutation (updateManyCMSPagesConnection)
   */
  updateManyCMSPages: BatchPayload;
  /** Update many CMSPage documents */
  updateManyCMSPagesConnection: CmsPageConnection;
  /**
   * Update many collectionPages
   * @deprecated Please use the new paginated many mutation (updateManyCollectionPagesConnection)
   */
  updateManyCollectionPages: BatchPayload;
  /** Update many CollectionPage documents */
  updateManyCollectionPagesConnection: CollectionPageConnection;
  /**
   * Update many configCareers
   * @deprecated Please use the new paginated many mutation (updateManyConfigCareersConnection)
   */
  updateManyConfigCareers: BatchPayload;
  /** Update many ConfigCareer documents */
  updateManyConfigCareersConnection: ConfigCareerConnection;
  /**
   * Update many configSalonBookings
   * @deprecated Please use the new paginated many mutation (updateManyConfigSalonBookingsConnection)
   */
  updateManyConfigSalonBookings: BatchPayload;
  /** Update many ConfigSalonBooking documents */
  updateManyConfigSalonBookingsConnection: ConfigSalonBookingConnection;
  /**
   * Update many configSalonMenus
   * @deprecated Please use the new paginated many mutation (updateManyConfigSalonMenusConnection)
   */
  updateManyConfigSalonMenus: BatchPayload;
  /** Update many ConfigSalonMenu documents */
  updateManyConfigSalonMenusConnection: ConfigSalonMenuConnection;
  /**
   * Update many configSearches
   * @deprecated Please use the new paginated many mutation (updateManyConfigSearchesConnection)
   */
  updateManyConfigSearches: BatchPayload;
  /** Update many ConfigSearch documents */
  updateManyConfigSearchesConnection: ConfigSearchConnection;
  /**
   * Update many editorialTexts
   * @deprecated Please use the new paginated many mutation (updateManyEditorialTextsConnection)
   */
  updateManyEditorialTexts: BatchPayload;
  /** Update many EditorialText documents */
  updateManyEditorialTextsConnection: EditorialTextConnection;
  /**
   * Update many featureProductCarouselTabs
   * @deprecated Please use the new paginated many mutation (updateManyFeatureProductCarouselTabsConnection)
   */
  updateManyFeatureProductCarouselTabs: BatchPayload;
  /** Update many FeatureProductCarouselTabbed documents */
  updateManyFeatureProductCarouselTabsConnection: FeatureProductCarouselTabbedConnection;
  /**
   * Update many footerConfigs
   * @deprecated Please use the new paginated many mutation (updateManyFooterConfigsConnection)
   */
  updateManyFooterConfigs: BatchPayload;
  /** Update many FooterConfig documents */
  updateManyFooterConfigsConnection: FooterConfigConnection;
  /**
   * Update many headerConfigs
   * @deprecated Please use the new paginated many mutation (updateManyHeaderConfigsConnection)
   */
  updateManyHeaderConfigs: BatchPayload;
  /** Update many HeaderConfig documents */
  updateManyHeaderConfigsConnection: HeaderConfigConnection;
  /**
   * Update many heroBanners
   * @deprecated Please use the new paginated many mutation (updateManyHeroBannersConnection)
   */
  updateManyHeroBanners: BatchPayload;
  /** Update many HeroBanner documents */
  updateManyHeroBannersConnection: HeroBannerConnection;
  /**
   * Update many jointCTApanels
   * @deprecated Please use the new paginated many mutation (updateManyJointCTApanelsConnection)
   */
  updateManyJointCTApanels: BatchPayload;
  /** Update many JoinCTApanel documents */
  updateManyJointCTApanelsConnection: JoinCtApanelConnection;
  /**
   * Update many modulePromoBanners
   * @deprecated Please use the new paginated many mutation (updateManyModulePromoBannersConnection)
   */
  updateManyModulePromoBanners: BatchPayload;
  /** Update many ModulePromoBanner documents */
  updateManyModulePromoBannersConnection: ModulePromoBannerConnection;
  /**
   * Update many multiCollectionSliders
   * @deprecated Please use the new paginated many mutation (updateManyMultiCollectionSlidersConnection)
   */
  updateManyMultiCollectionSliders: BatchPayload;
  /** Update many MultiCollectionSlider documents */
  updateManyMultiCollectionSlidersConnection: MultiCollectionSliderConnection;
  /**
   * Update many offerTiless
   * @deprecated Please use the new paginated many mutation (updateManyOfferTilessConnection)
   */
  updateManyOfferTiless: BatchPayload;
  /** Update many OfferTiles documents */
  updateManyOfferTilessConnection: OfferTilesConnection;
  /**
   * Update many pageBlogArticles
   * @deprecated Please use the new paginated many mutation (updateManyPageBlogArticlesConnection)
   */
  updateManyPageBlogArticles: BatchPayload;
  /** Update many BlogArticle documents */
  updateManyPageBlogArticlesConnection: BlogArticleConnection;
  /**
   * Update many pageBuyingGuides
   * @deprecated Please use the new paginated many mutation (updateManyPageBuyingGuidesConnection)
   */
  updateManyPageBuyingGuides: BatchPayload;
  /** Update many PageBuyingGuide documents */
  updateManyPageBuyingGuidesConnection: PageBuyingGuideConnection;
  /**
   * Update many productBenefitsGrids
   * @deprecated Please use the new paginated many mutation (updateManyProductBenefitsGridsConnection)
   */
  updateManyProductBenefitsGrids: BatchPayload;
  /** Update many ProductBenefitsGrid documents */
  updateManyProductBenefitsGridsConnection: ProductBenefitsGridConnection;
  /**
   * Update many productHowTos
   * @deprecated Please use the new paginated many mutation (updateManyProductHowTosConnection)
   */
  updateManyProductHowTos: BatchPayload;
  /** Update many ProductHowTo documents */
  updateManyProductHowTosConnection: ProductHowToConnection;
  /**
   * Update many productPages
   * @deprecated Please use the new paginated many mutation (updateManyProductPagesConnection)
   */
  updateManyProductPages: BatchPayload;
  /** Update many ProductPage documents */
  updateManyProductPagesConnection: ProductPageConnection;
  /**
   * Update many propositions
   * @deprecated Please use the new paginated many mutation (updateManyPropositionsConnection)
   */
  updateManyPropositions: BatchPayload;
  /** Update many Proposition documents */
  updateManyPropositionsConnection: PropositionConnection;
  /**
   * Update many sectionAccountSignupCtas
   * @deprecated Please use the new paginated many mutation (updateManySectionAccountSignupCtasConnection)
   */
  updateManySectionAccountSignupCtas: BatchPayload;
  /** Update many SectionAccountSignupCta documents */
  updateManySectionAccountSignupCtasConnection: SectionAccountSignupCtaConnection;
  /**
   * Update many sectionBlogListings
   * @deprecated Please use the new paginated many mutation (updateManySectionBlogListingsConnection)
   */
  updateManySectionBlogListings: BatchPayload;
  /** Update many SectionBlogListing documents */
  updateManySectionBlogListingsConnection: SectionBlogListingConnection;
  /**
   * Update many sectionCollectionCarousels
   * @deprecated Please use the new paginated many mutation (updateManySectionCollectionCarouselsConnection)
   */
  updateManySectionCollectionCarousels: BatchPayload;
  /** Update many SectionCollectionCarousel documents */
  updateManySectionCollectionCarouselsConnection: SectionCollectionCarouselConnection;
  /**
   * Update many sectionCollectionDropDowns
   * @deprecated Please use the new paginated many mutation (updateManySectionCollectionDropDownsConnection)
   */
  updateManySectionCollectionDropDowns: BatchPayload;
  /** Update many SectionCollectionDropDown documents */
  updateManySectionCollectionDropDownsConnection: SectionCollectionDropDownConnection;
  /**
   * Update many sectionCollectionFeatureLarges
   * @deprecated Please use the new paginated many mutation (updateManySectionCollectionFeatureLargesConnection)
   */
  updateManySectionCollectionFeatureLarges: BatchPayload;
  /** Update many SectionCollectionFeatureLarge documents */
  updateManySectionCollectionFeatureLargesConnection: SectionCollectionFeatureLargeConnection;
  /**
   * Update many sectionCollectionMains
   * @deprecated Please use the new paginated many mutation (updateManySectionCollectionMainsConnection)
   */
  updateManySectionCollectionMains: BatchPayload;
  /** Update many SectionCollectionMain documents */
  updateManySectionCollectionMainsConnection: SectionCollectionMainConnection;
  /**
   * Update many sectionCollectionSubcategoryLinks
   * @deprecated Please use the new paginated many mutation (updateManySectionCollectionSubcategoryLinksConnection)
   */
  updateManySectionCollectionSubcategoryLinks: BatchPayload;
  /** Update many SectionCollectionSubcategoryLink documents */
  updateManySectionCollectionSubcategoryLinksConnection: SectionCollectionSubcategoryLinkConnection;
  /**
   * Update many sectionCtaButtons
   * @deprecated Please use the new paginated many mutation (updateManySectionCtaButtonsConnection)
   */
  updateManySectionCtaButtons: BatchPayload;
  /** Update many SectionCtaButton documents */
  updateManySectionCtaButtonsConnection: SectionCtaButtonConnection;
  /**
   * Update many sectionFullWidthImages
   * @deprecated Please use the new paginated many mutation (updateManySectionFullWidthImagesConnection)
   */
  updateManySectionFullWidthImages: BatchPayload;
  /** Update many SectionFullWidthImage documents */
  updateManySectionFullWidthImagesConnection: SectionFullWidthImageConnection;
  /**
   * Update many sectionImageAndTextGrids
   * @deprecated Please use the new paginated many mutation (updateManySectionImageAndTextGridsConnection)
   */
  updateManySectionImageAndTextGrids: BatchPayload;
  /** Update many SectionImageAndTextGrid documents */
  updateManySectionImageAndTextGridsConnection: SectionImageAndTextGridConnection;
  /**
   * Update many sectionImageTextOverlays
   * @deprecated Please use the new paginated many mutation (updateManySectionImageTextOverlaysConnection)
   */
  updateManySectionImageTextOverlays: BatchPayload;
  /** Update many SectionImageTextOverlay documents */
  updateManySectionImageTextOverlaysConnection: SectionImageTextOverlayConnection;
  /**
   * Update many sectionPreezieProductFinders
   * @deprecated Please use the new paginated many mutation (updateManySectionPreezieProductFindersConnection)
   */
  updateManySectionPreezieProductFinders: BatchPayload;
  /** Update many SectionPreezieProductFinder documents */
  updateManySectionPreezieProductFindersConnection: SectionPreezieProductFinderConnection;
  /**
   * Update many sectionProductMains
   * @deprecated Please use the new paginated many mutation (updateManySectionProductMainsConnection)
   */
  updateManySectionProductMains: BatchPayload;
  /** Update many SectionProductMain documents */
  updateManySectionProductMainsConnection: SectionProductMainConnection;
  /**
   * Update many sectionProductReviews
   * @deprecated Please use the new paginated many mutation (updateManySectionProductReviewsConnection)
   */
  updateManySectionProductReviews: BatchPayload;
  /** Update many SectionProductReview documents */
  updateManySectionProductReviewsConnection: SectionProductReviewConnection;
  /**
   * Update many sectionProductSpotlightGrids
   * @deprecated Please use the new paginated many mutation (updateManySectionProductSpotlightGridsConnection)
   */
  updateManySectionProductSpotlightGrids: BatchPayload;
  /** Update many SectionProductSpotlightGrid documents */
  updateManySectionProductSpotlightGridsConnection: SectionProductSpotlightGridConnection;
  /**
   * Update many sectionProductSpotlightLarges
   * @deprecated Please use the new paginated many mutation (updateManySectionProductSpotlightLargesConnection)
   */
  updateManySectionProductSpotlightLarges: BatchPayload;
  /** Update many SectionProductSpotlightLarge documents */
  updateManySectionProductSpotlightLargesConnection: SectionProductSpotlightLargeConnection;
  /**
   * Update many sectionRelatedProducts
   * @deprecated Please use the new paginated many mutation (updateManySectionRelatedProductsConnection)
   */
  updateManySectionRelatedProducts: BatchPayload;
  /** Update many SectionRelatedProduct documents */
  updateManySectionRelatedProductsConnection: SectionRelatedProductConnection;
  /**
   * Update many sectionSalonServiceBlocks
   * @deprecated Please use the new paginated many mutation (updateManySectionSalonServiceBlocksConnection)
   */
  updateManySectionSalonServiceBlocks: BatchPayload;
  /** Update many SectionSalonServiceBlock documents */
  updateManySectionSalonServiceBlocksConnection: SectionSalonServiceBlockConnection;
  /**
   * Update many sectionSearchTermLists
   * @deprecated Please use the new paginated many mutation (updateManySectionSearchTermListsConnection)
   */
  updateManySectionSearchTermLists: BatchPayload;
  /** Update many SectionSearchTermList documents */
  updateManySectionSearchTermListsConnection: SectionSearchTermListConnection;
  /**
   * Update many sectionSeoTexts
   * @deprecated Please use the new paginated many mutation (updateManySectionSeoTextsConnection)
   */
  updateManySectionSeoTexts: BatchPayload;
  /** Update many SectionSeoText documents */
  updateManySectionSeoTextsConnection: SectionSeoTextConnection;
  /**
   * Update many sectionSocialMediaCtaSmalls
   * @deprecated Please use the new paginated many mutation (updateManySectionSocialMediaCtaSmallsConnection)
   */
  updateManySectionSocialMediaCtaSmalls: BatchPayload;
  /** Update many SectionSocialMediaCtaSmall documents */
  updateManySectionSocialMediaCtaSmallsConnection: SectionSocialMediaCtaSmallConnection;
  /**
   * Update many sectionTextBlocks
   * @deprecated Please use the new paginated many mutation (updateManySectionTextBlocksConnection)
   */
  updateManySectionTextBlocks: BatchPayload;
  /** Update many SectionTextBlock documents */
  updateManySectionTextBlocksConnection: SectionTextBlockConnection;
  /**
   * Update many sectionVideoCarousels
   * @deprecated Please use the new paginated many mutation (updateManySectionVideoCarouselsConnection)
   */
  updateManySectionVideoCarousels: BatchPayload;
  /** Update many SectionVideoCarousel documents */
  updateManySectionVideoCarouselsConnection: SectionVideoCarouselConnection;
  /**
   * Update many sectionsAccordions
   * @deprecated Please use the new paginated many mutation (updateManySectionsAccordionsConnection)
   */
  updateManySectionsAccordions: BatchPayload;
  /** Update many SectionsAccordion documents */
  updateManySectionsAccordionsConnection: SectionsAccordionConnection;
  /**
   * Update many socialMediaCtaLarges
   * @deprecated Please use the new paginated many mutation (updateManySocialMediaCtaLargesConnection)
   */
  updateManySocialMediaCtaLarges: BatchPayload;
  /** Update many SocialMediaCtaLarge documents */
  updateManySocialMediaCtaLargesConnection: SocialMediaCtaLargeConnection;
  /**
   * Update many websiteConfigs
   * @deprecated Please use the new paginated many mutation (updateManyWebsiteConfigsConnection)
   */
  updateManyWebsiteConfigs: BatchPayload;
  /** Update many WebsiteConfig documents */
  updateManyWebsiteConfigsConnection: WebsiteConfigConnection;
  /** Update one modulePromoBanner */
  updateModulePromoBanner?: Maybe<ModulePromoBanner>;
  /** Update one multiCollectionSlider */
  updateMultiCollectionSlider?: Maybe<MultiCollectionSlider>;
  /** Update one offerTiles */
  updateOfferTiles?: Maybe<OfferTiles>;
  /** Update one pageBuyingGuide */
  updatePageBuyingGuide?: Maybe<PageBuyingGuide>;
  /** Update one productBenefitsGrid */
  updateProductBenefitsGrid?: Maybe<ProductBenefitsGrid>;
  /** Update one productHowTo */
  updateProductHowTo?: Maybe<ProductHowTo>;
  /** Update one productPage */
  updateProductPage?: Maybe<ProductPage>;
  /** Update one proposition */
  updateProposition?: Maybe<Proposition>;
  /** Update one scheduledRelease */
  updateScheduledRelease?: Maybe<ScheduledRelease>;
  /** Update one sectionAccountSignupCta */
  updateSectionAccountSignupCta?: Maybe<SectionAccountSignupCta>;
  /** Update one sectionBlogListing */
  updateSectionBlogListing?: Maybe<SectionBlogListing>;
  /** Update one sectionCollectionCarousel */
  updateSectionCollectionCarousel?: Maybe<SectionCollectionCarousel>;
  /** Update one sectionCollectionDropDown */
  updateSectionCollectionDropDown?: Maybe<SectionCollectionDropDown>;
  /** Update one sectionCollectionFeatureLarge */
  updateSectionCollectionFeatureLarge?: Maybe<SectionCollectionFeatureLarge>;
  /** Update one sectionCollectionMain */
  updateSectionCollectionMain?: Maybe<SectionCollectionMain>;
  /** Update one sectionCollectionSubcategoryLink */
  updateSectionCollectionSubcategoryLink?: Maybe<SectionCollectionSubcategoryLink>;
  /** Update one sectionCtaButton */
  updateSectionCtaButton?: Maybe<SectionCtaButton>;
  /** Update one sectionFullWidthImage */
  updateSectionFullWidthImage?: Maybe<SectionFullWidthImage>;
  /** Update one sectionImageAndTextGrid */
  updateSectionImageAndTextGrid?: Maybe<SectionImageAndTextGrid>;
  /** Update one sectionImageTextOverlay */
  updateSectionImageTextOverlay?: Maybe<SectionImageTextOverlay>;
  /** Update one sectionPreezieProductFinder */
  updateSectionPreezieProductFinder?: Maybe<SectionPreezieProductFinder>;
  /** Update one sectionProductMain */
  updateSectionProductMain?: Maybe<SectionProductMain>;
  /** Update one sectionProductReview */
  updateSectionProductReview?: Maybe<SectionProductReview>;
  /** Update one sectionProductSpotlightGrid */
  updateSectionProductSpotlightGrid?: Maybe<SectionProductSpotlightGrid>;
  /** Update one sectionProductSpotlightLarge */
  updateSectionProductSpotlightLarge?: Maybe<SectionProductSpotlightLarge>;
  /** Update one sectionRelatedProduct */
  updateSectionRelatedProduct?: Maybe<SectionRelatedProduct>;
  /** Update one sectionSalonServiceBlock */
  updateSectionSalonServiceBlock?: Maybe<SectionSalonServiceBlock>;
  /** Update one sectionSearchTermList */
  updateSectionSearchTermList?: Maybe<SectionSearchTermList>;
  /** Update one sectionSeoText */
  updateSectionSeoText?: Maybe<SectionSeoText>;
  /** Update one sectionSocialMediaCtaSmall */
  updateSectionSocialMediaCtaSmall?: Maybe<SectionSocialMediaCtaSmall>;
  /** Update one sectionTextBlock */
  updateSectionTextBlock?: Maybe<SectionTextBlock>;
  /** Update one sectionVideoCarousel */
  updateSectionVideoCarousel?: Maybe<SectionVideoCarousel>;
  /** Update one sectionsAccordion */
  updateSectionsAccordion?: Maybe<SectionsAccordion>;
  /** Update one socialMediaCtaLarge */
  updateSocialMediaCtaLarge?: Maybe<SocialMediaCtaLarge>;
  /** Update one websiteConfig */
  updateWebsiteConfig?: Maybe<WebsiteConfig>;
  /** Upsert one asset */
  upsertAsset?: Maybe<Asset>;
  /** Upsert one blogArticle */
  upsertBlogArticle?: Maybe<BlogArticle>;
  /** Upsert one blogAuthor */
  upsertBlogAuthor?: Maybe<BlogAuthor>;
  /** Upsert one brandLogoGrid */
  upsertBrandLogoGrid?: Maybe<BrandLogoGrid>;
  /** Upsert one brandsBrandLogo */
  upsertBrandsBrandLogo?: Maybe<BrandsBrandLogo>;
  /** Upsert one cMSPage */
  upsertCMSPage?: Maybe<CmsPage>;
  /** Upsert one collectionPage */
  upsertCollectionPage?: Maybe<CollectionPage>;
  /** Upsert one configCareer */
  upsertConfigCareer?: Maybe<ConfigCareer>;
  /** Upsert one configSalonBooking */
  upsertConfigSalonBooking?: Maybe<ConfigSalonBooking>;
  /** Upsert one configSalonMenu */
  upsertConfigSalonMenu?: Maybe<ConfigSalonMenu>;
  /** Upsert one configSearch */
  upsertConfigSearch?: Maybe<ConfigSearch>;
  /** Upsert one editorialText */
  upsertEditorialText?: Maybe<EditorialText>;
  /** Upsert one featureProductCarouselTabbed */
  upsertFeatureProductCarouselTabbed?: Maybe<FeatureProductCarouselTabbed>;
  /** Upsert one footerConfig */
  upsertFooterConfig?: Maybe<FooterConfig>;
  /** Upsert one headerConfig */
  upsertHeaderConfig?: Maybe<HeaderConfig>;
  /** Upsert one heroBanner */
  upsertHeroBanner?: Maybe<HeroBanner>;
  /** Upsert one joinCTApanel */
  upsertJoinCTApanel?: Maybe<JoinCtApanel>;
  /** Upsert one modulePromoBanner */
  upsertModulePromoBanner?: Maybe<ModulePromoBanner>;
  /** Upsert one multiCollectionSlider */
  upsertMultiCollectionSlider?: Maybe<MultiCollectionSlider>;
  /** Upsert one offerTiles */
  upsertOfferTiles?: Maybe<OfferTiles>;
  /** Upsert one pageBuyingGuide */
  upsertPageBuyingGuide?: Maybe<PageBuyingGuide>;
  /** Upsert one productBenefitsGrid */
  upsertProductBenefitsGrid?: Maybe<ProductBenefitsGrid>;
  /** Upsert one productHowTo */
  upsertProductHowTo?: Maybe<ProductHowTo>;
  /** Upsert one productPage */
  upsertProductPage?: Maybe<ProductPage>;
  /** Upsert one proposition */
  upsertProposition?: Maybe<Proposition>;
  /** Upsert one sectionAccountSignupCta */
  upsertSectionAccountSignupCta?: Maybe<SectionAccountSignupCta>;
  /** Upsert one sectionBlogListing */
  upsertSectionBlogListing?: Maybe<SectionBlogListing>;
  /** Upsert one sectionCollectionCarousel */
  upsertSectionCollectionCarousel?: Maybe<SectionCollectionCarousel>;
  /** Upsert one sectionCollectionDropDown */
  upsertSectionCollectionDropDown?: Maybe<SectionCollectionDropDown>;
  /** Upsert one sectionCollectionFeatureLarge */
  upsertSectionCollectionFeatureLarge?: Maybe<SectionCollectionFeatureLarge>;
  /** Upsert one sectionCollectionMain */
  upsertSectionCollectionMain?: Maybe<SectionCollectionMain>;
  /** Upsert one sectionCollectionSubcategoryLink */
  upsertSectionCollectionSubcategoryLink?: Maybe<SectionCollectionSubcategoryLink>;
  /** Upsert one sectionCtaButton */
  upsertSectionCtaButton?: Maybe<SectionCtaButton>;
  /** Upsert one sectionFullWidthImage */
  upsertSectionFullWidthImage?: Maybe<SectionFullWidthImage>;
  /** Upsert one sectionImageAndTextGrid */
  upsertSectionImageAndTextGrid?: Maybe<SectionImageAndTextGrid>;
  /** Upsert one sectionImageTextOverlay */
  upsertSectionImageTextOverlay?: Maybe<SectionImageTextOverlay>;
  /** Upsert one sectionPreezieProductFinder */
  upsertSectionPreezieProductFinder?: Maybe<SectionPreezieProductFinder>;
  /** Upsert one sectionProductMain */
  upsertSectionProductMain?: Maybe<SectionProductMain>;
  /** Upsert one sectionProductReview */
  upsertSectionProductReview?: Maybe<SectionProductReview>;
  /** Upsert one sectionProductSpotlightGrid */
  upsertSectionProductSpotlightGrid?: Maybe<SectionProductSpotlightGrid>;
  /** Upsert one sectionProductSpotlightLarge */
  upsertSectionProductSpotlightLarge?: Maybe<SectionProductSpotlightLarge>;
  /** Upsert one sectionRelatedProduct */
  upsertSectionRelatedProduct?: Maybe<SectionRelatedProduct>;
  /** Upsert one sectionSalonServiceBlock */
  upsertSectionSalonServiceBlock?: Maybe<SectionSalonServiceBlock>;
  /** Upsert one sectionSearchTermList */
  upsertSectionSearchTermList?: Maybe<SectionSearchTermList>;
  /** Upsert one sectionSeoText */
  upsertSectionSeoText?: Maybe<SectionSeoText>;
  /** Upsert one sectionSocialMediaCtaSmall */
  upsertSectionSocialMediaCtaSmall?: Maybe<SectionSocialMediaCtaSmall>;
  /** Upsert one sectionTextBlock */
  upsertSectionTextBlock?: Maybe<SectionTextBlock>;
  /** Upsert one sectionVideoCarousel */
  upsertSectionVideoCarousel?: Maybe<SectionVideoCarousel>;
  /** Upsert one sectionsAccordion */
  upsertSectionsAccordion?: Maybe<SectionsAccordion>;
  /** Upsert one socialMediaCtaLarge */
  upsertSocialMediaCtaLarge?: Maybe<SocialMediaCtaLarge>;
  /** Upsert one websiteConfig */
  upsertWebsiteConfig?: Maybe<WebsiteConfig>;
};


export type MutationCreateAssetArgs = {
  data: AssetCreateInput;
};


export type MutationCreateBlogArticleArgs = {
  data: BlogArticleCreateInput;
};


export type MutationCreateBlogAuthorArgs = {
  data: BlogAuthorCreateInput;
};


export type MutationCreateBrandLogoGridArgs = {
  data: BrandLogoGridCreateInput;
};


export type MutationCreateBrandsBrandLogoArgs = {
  data: BrandsBrandLogoCreateInput;
};


export type MutationCreateCmsPageArgs = {
  data: CmsPageCreateInput;
};


export type MutationCreateCollectionPageArgs = {
  data: CollectionPageCreateInput;
};


export type MutationCreateConfigCareerArgs = {
  data: ConfigCareerCreateInput;
};


export type MutationCreateConfigSalonBookingArgs = {
  data: ConfigSalonBookingCreateInput;
};


export type MutationCreateConfigSalonMenuArgs = {
  data: ConfigSalonMenuCreateInput;
};


export type MutationCreateConfigSearchArgs = {
  data: ConfigSearchCreateInput;
};


export type MutationCreateEditorialTextArgs = {
  data: EditorialTextCreateInput;
};


export type MutationCreateFeatureProductCarouselTabbedArgs = {
  data: FeatureProductCarouselTabbedCreateInput;
};


export type MutationCreateFooterConfigArgs = {
  data: FooterConfigCreateInput;
};


export type MutationCreateHeaderConfigArgs = {
  data: HeaderConfigCreateInput;
};


export type MutationCreateHeroBannerArgs = {
  data: HeroBannerCreateInput;
};


export type MutationCreateJoinCtApanelArgs = {
  data: JoinCtApanelCreateInput;
};


export type MutationCreateModulePromoBannerArgs = {
  data: ModulePromoBannerCreateInput;
};


export type MutationCreateMultiCollectionSliderArgs = {
  data: MultiCollectionSliderCreateInput;
};


export type MutationCreateOfferTilesArgs = {
  data: OfferTilesCreateInput;
};


export type MutationCreatePageBuyingGuideArgs = {
  data: PageBuyingGuideCreateInput;
};


export type MutationCreateProductBenefitsGridArgs = {
  data: ProductBenefitsGridCreateInput;
};


export type MutationCreateProductHowToArgs = {
  data: ProductHowToCreateInput;
};


export type MutationCreateProductPageArgs = {
  data: ProductPageCreateInput;
};


export type MutationCreatePropositionArgs = {
  data: PropositionCreateInput;
};


export type MutationCreateScheduledReleaseArgs = {
  data: ScheduledReleaseCreateInput;
};


export type MutationCreateSectionAccountSignupCtaArgs = {
  data: SectionAccountSignupCtaCreateInput;
};


export type MutationCreateSectionBlogListingArgs = {
  data: SectionBlogListingCreateInput;
};


export type MutationCreateSectionCollectionCarouselArgs = {
  data: SectionCollectionCarouselCreateInput;
};


export type MutationCreateSectionCollectionDropDownArgs = {
  data: SectionCollectionDropDownCreateInput;
};


export type MutationCreateSectionCollectionFeatureLargeArgs = {
  data: SectionCollectionFeatureLargeCreateInput;
};


export type MutationCreateSectionCollectionMainArgs = {
  data: SectionCollectionMainCreateInput;
};


export type MutationCreateSectionCollectionSubcategoryLinkArgs = {
  data: SectionCollectionSubcategoryLinkCreateInput;
};


export type MutationCreateSectionCtaButtonArgs = {
  data: SectionCtaButtonCreateInput;
};


export type MutationCreateSectionFullWidthImageArgs = {
  data: SectionFullWidthImageCreateInput;
};


export type MutationCreateSectionImageAndTextGridArgs = {
  data: SectionImageAndTextGridCreateInput;
};


export type MutationCreateSectionImageTextOverlayArgs = {
  data: SectionImageTextOverlayCreateInput;
};


export type MutationCreateSectionPreezieProductFinderArgs = {
  data: SectionPreezieProductFinderCreateInput;
};


export type MutationCreateSectionProductMainArgs = {
  data: SectionProductMainCreateInput;
};


export type MutationCreateSectionProductReviewArgs = {
  data: SectionProductReviewCreateInput;
};


export type MutationCreateSectionProductSpotlightGridArgs = {
  data: SectionProductSpotlightGridCreateInput;
};


export type MutationCreateSectionProductSpotlightLargeArgs = {
  data: SectionProductSpotlightLargeCreateInput;
};


export type MutationCreateSectionRelatedProductArgs = {
  data: SectionRelatedProductCreateInput;
};


export type MutationCreateSectionSalonServiceBlockArgs = {
  data: SectionSalonServiceBlockCreateInput;
};


export type MutationCreateSectionSearchTermListArgs = {
  data: SectionSearchTermListCreateInput;
};


export type MutationCreateSectionSeoTextArgs = {
  data: SectionSeoTextCreateInput;
};


export type MutationCreateSectionSocialMediaCtaSmallArgs = {
  data: SectionSocialMediaCtaSmallCreateInput;
};


export type MutationCreateSectionTextBlockArgs = {
  data: SectionTextBlockCreateInput;
};


export type MutationCreateSectionVideoCarouselArgs = {
  data: SectionVideoCarouselCreateInput;
};


export type MutationCreateSectionsAccordionArgs = {
  data: SectionsAccordionCreateInput;
};


export type MutationCreateSocialMediaCtaLargeArgs = {
  data: SocialMediaCtaLargeCreateInput;
};


export type MutationCreateWebsiteConfigArgs = {
  data: WebsiteConfigCreateInput;
};


export type MutationDeleteAssetArgs = {
  where: AssetWhereUniqueInput;
};


export type MutationDeleteBlogArticleArgs = {
  where: BlogArticleWhereUniqueInput;
};


export type MutationDeleteBlogAuthorArgs = {
  where: BlogAuthorWhereUniqueInput;
};


export type MutationDeleteBrandLogoGridArgs = {
  where: BrandLogoGridWhereUniqueInput;
};


export type MutationDeleteBrandsBrandLogoArgs = {
  where: BrandsBrandLogoWhereUniqueInput;
};


export type MutationDeleteCmsPageArgs = {
  where: CmsPageWhereUniqueInput;
};


export type MutationDeleteCollectionPageArgs = {
  where: CollectionPageWhereUniqueInput;
};


export type MutationDeleteConfigCareerArgs = {
  where: ConfigCareerWhereUniqueInput;
};


export type MutationDeleteConfigSalonBookingArgs = {
  where: ConfigSalonBookingWhereUniqueInput;
};


export type MutationDeleteConfigSalonMenuArgs = {
  where: ConfigSalonMenuWhereUniqueInput;
};


export type MutationDeleteConfigSearchArgs = {
  where: ConfigSearchWhereUniqueInput;
};


export type MutationDeleteEditorialTextArgs = {
  where: EditorialTextWhereUniqueInput;
};


export type MutationDeleteFeatureProductCarouselTabbedArgs = {
  where: FeatureProductCarouselTabbedWhereUniqueInput;
};


export type MutationDeleteFooterConfigArgs = {
  where: FooterConfigWhereUniqueInput;
};


export type MutationDeleteHeaderConfigArgs = {
  where: HeaderConfigWhereUniqueInput;
};


export type MutationDeleteHeroBannerArgs = {
  where: HeroBannerWhereUniqueInput;
};


export type MutationDeleteJoinCtApanelArgs = {
  where: JoinCtApanelWhereUniqueInput;
};


export type MutationDeleteManyAssetsArgs = {
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationDeleteManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationDeleteManyBlogAuthorsArgs = {
  where?: InputMaybe<BlogAuthorManyWhereInput>;
};


export type MutationDeleteManyBlogAuthorsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogAuthorManyWhereInput>;
};


export type MutationDeleteManyBrandLogoGridsArgs = {
  where?: InputMaybe<BrandLogoGridManyWhereInput>;
};


export type MutationDeleteManyBrandLogoGridsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BrandLogoGridManyWhereInput>;
};


export type MutationDeleteManyBrandsBrandsLogosArgs = {
  where?: InputMaybe<BrandsBrandLogoManyWhereInput>;
};


export type MutationDeleteManyBrandsBrandsLogosConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BrandsBrandLogoManyWhereInput>;
};


export type MutationDeleteManyCmsPagesArgs = {
  where?: InputMaybe<CmsPageManyWhereInput>;
};


export type MutationDeleteManyCmsPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsPageManyWhereInput>;
};


export type MutationDeleteManyCollectionPagesArgs = {
  where?: InputMaybe<CollectionPageManyWhereInput>;
};


export type MutationDeleteManyCollectionPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CollectionPageManyWhereInput>;
};


export type MutationDeleteManyConfigCareersArgs = {
  where?: InputMaybe<ConfigCareerManyWhereInput>;
};


export type MutationDeleteManyConfigCareersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigCareerManyWhereInput>;
};


export type MutationDeleteManyConfigSalonBookingsArgs = {
  where?: InputMaybe<ConfigSalonBookingManyWhereInput>;
};


export type MutationDeleteManyConfigSalonBookingsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigSalonBookingManyWhereInput>;
};


export type MutationDeleteManyConfigSalonMenusArgs = {
  where?: InputMaybe<ConfigSalonMenuManyWhereInput>;
};


export type MutationDeleteManyConfigSalonMenusConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigSalonMenuManyWhereInput>;
};


export type MutationDeleteManyConfigSearchesArgs = {
  where?: InputMaybe<ConfigSearchManyWhereInput>;
};


export type MutationDeleteManyConfigSearchesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigSearchManyWhereInput>;
};


export type MutationDeleteManyEditorialTextsArgs = {
  where?: InputMaybe<EditorialTextManyWhereInput>;
};


export type MutationDeleteManyEditorialTextsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<EditorialTextManyWhereInput>;
};


export type MutationDeleteManyFeatureProductCarouselTabsArgs = {
  where?: InputMaybe<FeatureProductCarouselTabbedManyWhereInput>;
};


export type MutationDeleteManyFeatureProductCarouselTabsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<FeatureProductCarouselTabbedManyWhereInput>;
};


export type MutationDeleteManyFooterConfigsArgs = {
  where?: InputMaybe<FooterConfigManyWhereInput>;
};


export type MutationDeleteManyFooterConfigsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<FooterConfigManyWhereInput>;
};


export type MutationDeleteManyHeaderConfigsArgs = {
  where?: InputMaybe<HeaderConfigManyWhereInput>;
};


export type MutationDeleteManyHeaderConfigsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<HeaderConfigManyWhereInput>;
};


export type MutationDeleteManyHeroBannersArgs = {
  where?: InputMaybe<HeroBannerManyWhereInput>;
};


export type MutationDeleteManyHeroBannersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<HeroBannerManyWhereInput>;
};


export type MutationDeleteManyJointCtApanelsArgs = {
  where?: InputMaybe<JoinCtApanelManyWhereInput>;
};


export type MutationDeleteManyJointCtApanelsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<JoinCtApanelManyWhereInput>;
};


export type MutationDeleteManyModulePromoBannersArgs = {
  where?: InputMaybe<ModulePromoBannerManyWhereInput>;
};


export type MutationDeleteManyModulePromoBannersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ModulePromoBannerManyWhereInput>;
};


export type MutationDeleteManyMultiCollectionSlidersArgs = {
  where?: InputMaybe<MultiCollectionSliderManyWhereInput>;
};


export type MutationDeleteManyMultiCollectionSlidersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<MultiCollectionSliderManyWhereInput>;
};


export type MutationDeleteManyOfferTilessArgs = {
  where?: InputMaybe<OfferTilesManyWhereInput>;
};


export type MutationDeleteManyOfferTilessConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OfferTilesManyWhereInput>;
};


export type MutationDeleteManyPageBlogArticlesArgs = {
  where?: InputMaybe<BlogArticleManyWhereInput>;
};


export type MutationDeleteManyPageBlogArticlesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogArticleManyWhereInput>;
};


export type MutationDeleteManyPageBuyingGuidesArgs = {
  where?: InputMaybe<PageBuyingGuideManyWhereInput>;
};


export type MutationDeleteManyPageBuyingGuidesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PageBuyingGuideManyWhereInput>;
};


export type MutationDeleteManyProductBenefitsGridsArgs = {
  where?: InputMaybe<ProductBenefitsGridManyWhereInput>;
};


export type MutationDeleteManyProductBenefitsGridsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProductBenefitsGridManyWhereInput>;
};


export type MutationDeleteManyProductHowTosArgs = {
  where?: InputMaybe<ProductHowToManyWhereInput>;
};


export type MutationDeleteManyProductHowTosConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProductHowToManyWhereInput>;
};


export type MutationDeleteManyProductPagesArgs = {
  where?: InputMaybe<ProductPageManyWhereInput>;
};


export type MutationDeleteManyProductPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProductPageManyWhereInput>;
};


export type MutationDeleteManyPropositionsArgs = {
  where?: InputMaybe<PropositionManyWhereInput>;
};


export type MutationDeleteManyPropositionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PropositionManyWhereInput>;
};


export type MutationDeleteManySectionAccountSignupCtasArgs = {
  where?: InputMaybe<SectionAccountSignupCtaManyWhereInput>;
};


export type MutationDeleteManySectionAccountSignupCtasConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionAccountSignupCtaManyWhereInput>;
};


export type MutationDeleteManySectionBlogListingsArgs = {
  where?: InputMaybe<SectionBlogListingManyWhereInput>;
};


export type MutationDeleteManySectionBlogListingsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionBlogListingManyWhereInput>;
};


export type MutationDeleteManySectionCollectionCarouselsArgs = {
  where?: InputMaybe<SectionCollectionCarouselManyWhereInput>;
};


export type MutationDeleteManySectionCollectionCarouselsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionCollectionCarouselManyWhereInput>;
};


export type MutationDeleteManySectionCollectionDropDownsArgs = {
  where?: InputMaybe<SectionCollectionDropDownManyWhereInput>;
};


export type MutationDeleteManySectionCollectionDropDownsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionCollectionDropDownManyWhereInput>;
};


export type MutationDeleteManySectionCollectionFeatureLargesArgs = {
  where?: InputMaybe<SectionCollectionFeatureLargeManyWhereInput>;
};


export type MutationDeleteManySectionCollectionFeatureLargesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionCollectionFeatureLargeManyWhereInput>;
};


export type MutationDeleteManySectionCollectionMainsArgs = {
  where?: InputMaybe<SectionCollectionMainManyWhereInput>;
};


export type MutationDeleteManySectionCollectionMainsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionCollectionMainManyWhereInput>;
};


export type MutationDeleteManySectionCollectionSubcategoryLinksArgs = {
  where?: InputMaybe<SectionCollectionSubcategoryLinkManyWhereInput>;
};


export type MutationDeleteManySectionCollectionSubcategoryLinksConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionCollectionSubcategoryLinkManyWhereInput>;
};


export type MutationDeleteManySectionCtaButtonsArgs = {
  where?: InputMaybe<SectionCtaButtonManyWhereInput>;
};


export type MutationDeleteManySectionCtaButtonsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionCtaButtonManyWhereInput>;
};


export type MutationDeleteManySectionFullWidthImagesArgs = {
  where?: InputMaybe<SectionFullWidthImageManyWhereInput>;
};


export type MutationDeleteManySectionFullWidthImagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionFullWidthImageManyWhereInput>;
};


export type MutationDeleteManySectionImageAndTextGridsArgs = {
  where?: InputMaybe<SectionImageAndTextGridManyWhereInput>;
};


export type MutationDeleteManySectionImageAndTextGridsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionImageAndTextGridManyWhereInput>;
};


export type MutationDeleteManySectionImageTextOverlaysArgs = {
  where?: InputMaybe<SectionImageTextOverlayManyWhereInput>;
};


export type MutationDeleteManySectionImageTextOverlaysConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionImageTextOverlayManyWhereInput>;
};


export type MutationDeleteManySectionPreezieProductFindersArgs = {
  where?: InputMaybe<SectionPreezieProductFinderManyWhereInput>;
};


export type MutationDeleteManySectionPreezieProductFindersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionPreezieProductFinderManyWhereInput>;
};


export type MutationDeleteManySectionProductMainsArgs = {
  where?: InputMaybe<SectionProductMainManyWhereInput>;
};


export type MutationDeleteManySectionProductMainsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionProductMainManyWhereInput>;
};


export type MutationDeleteManySectionProductReviewsArgs = {
  where?: InputMaybe<SectionProductReviewManyWhereInput>;
};


export type MutationDeleteManySectionProductReviewsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionProductReviewManyWhereInput>;
};


export type MutationDeleteManySectionProductSpotlightGridsArgs = {
  where?: InputMaybe<SectionProductSpotlightGridManyWhereInput>;
};


export type MutationDeleteManySectionProductSpotlightGridsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionProductSpotlightGridManyWhereInput>;
};


export type MutationDeleteManySectionProductSpotlightLargesArgs = {
  where?: InputMaybe<SectionProductSpotlightLargeManyWhereInput>;
};


export type MutationDeleteManySectionProductSpotlightLargesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionProductSpotlightLargeManyWhereInput>;
};


export type MutationDeleteManySectionRelatedProductsArgs = {
  where?: InputMaybe<SectionRelatedProductManyWhereInput>;
};


export type MutationDeleteManySectionRelatedProductsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionRelatedProductManyWhereInput>;
};


export type MutationDeleteManySectionSalonServiceBlocksArgs = {
  where?: InputMaybe<SectionSalonServiceBlockManyWhereInput>;
};


export type MutationDeleteManySectionSalonServiceBlocksConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionSalonServiceBlockManyWhereInput>;
};


export type MutationDeleteManySectionSearchTermListsArgs = {
  where?: InputMaybe<SectionSearchTermListManyWhereInput>;
};


export type MutationDeleteManySectionSearchTermListsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionSearchTermListManyWhereInput>;
};


export type MutationDeleteManySectionSeoTextsArgs = {
  where?: InputMaybe<SectionSeoTextManyWhereInput>;
};


export type MutationDeleteManySectionSeoTextsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionSeoTextManyWhereInput>;
};


export type MutationDeleteManySectionSocialMediaCtaSmallsArgs = {
  where?: InputMaybe<SectionSocialMediaCtaSmallManyWhereInput>;
};


export type MutationDeleteManySectionSocialMediaCtaSmallsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionSocialMediaCtaSmallManyWhereInput>;
};


export type MutationDeleteManySectionTextBlocksArgs = {
  where?: InputMaybe<SectionTextBlockManyWhereInput>;
};


export type MutationDeleteManySectionTextBlocksConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionTextBlockManyWhereInput>;
};


export type MutationDeleteManySectionVideoCarouselsArgs = {
  where?: InputMaybe<SectionVideoCarouselManyWhereInput>;
};


export type MutationDeleteManySectionVideoCarouselsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionVideoCarouselManyWhereInput>;
};


export type MutationDeleteManySectionsAccordionsArgs = {
  where?: InputMaybe<SectionsAccordionManyWhereInput>;
};


export type MutationDeleteManySectionsAccordionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionsAccordionManyWhereInput>;
};


export type MutationDeleteManySocialMediaCtaLargesArgs = {
  where?: InputMaybe<SocialMediaCtaLargeManyWhereInput>;
};


export type MutationDeleteManySocialMediaCtaLargesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SocialMediaCtaLargeManyWhereInput>;
};


export type MutationDeleteManyWebsiteConfigsArgs = {
  where?: InputMaybe<WebsiteConfigManyWhereInput>;
};


export type MutationDeleteManyWebsiteConfigsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WebsiteConfigManyWhereInput>;
};


export type MutationDeleteModulePromoBannerArgs = {
  where: ModulePromoBannerWhereUniqueInput;
};


export type MutationDeleteMultiCollectionSliderArgs = {
  where: MultiCollectionSliderWhereUniqueInput;
};


export type MutationDeleteOfferTilesArgs = {
  where: OfferTilesWhereUniqueInput;
};


export type MutationDeletePageBuyingGuideArgs = {
  where: PageBuyingGuideWhereUniqueInput;
};


export type MutationDeleteProductBenefitsGridArgs = {
  where: ProductBenefitsGridWhereUniqueInput;
};


export type MutationDeleteProductHowToArgs = {
  where: ProductHowToWhereUniqueInput;
};


export type MutationDeleteProductPageArgs = {
  where: ProductPageWhereUniqueInput;
};


export type MutationDeletePropositionArgs = {
  where: PropositionWhereUniqueInput;
};


export type MutationDeleteScheduledOperationArgs = {
  where: ScheduledOperationWhereUniqueInput;
};


export type MutationDeleteScheduledReleaseArgs = {
  where: ScheduledReleaseWhereUniqueInput;
};


export type MutationDeleteSectionAccountSignupCtaArgs = {
  where: SectionAccountSignupCtaWhereUniqueInput;
};


export type MutationDeleteSectionBlogListingArgs = {
  where: SectionBlogListingWhereUniqueInput;
};


export type MutationDeleteSectionCollectionCarouselArgs = {
  where: SectionCollectionCarouselWhereUniqueInput;
};


export type MutationDeleteSectionCollectionDropDownArgs = {
  where: SectionCollectionDropDownWhereUniqueInput;
};


export type MutationDeleteSectionCollectionFeatureLargeArgs = {
  where: SectionCollectionFeatureLargeWhereUniqueInput;
};


export type MutationDeleteSectionCollectionMainArgs = {
  where: SectionCollectionMainWhereUniqueInput;
};


export type MutationDeleteSectionCollectionSubcategoryLinkArgs = {
  where: SectionCollectionSubcategoryLinkWhereUniqueInput;
};


export type MutationDeleteSectionCtaButtonArgs = {
  where: SectionCtaButtonWhereUniqueInput;
};


export type MutationDeleteSectionFullWidthImageArgs = {
  where: SectionFullWidthImageWhereUniqueInput;
};


export type MutationDeleteSectionImageAndTextGridArgs = {
  where: SectionImageAndTextGridWhereUniqueInput;
};


export type MutationDeleteSectionImageTextOverlayArgs = {
  where: SectionImageTextOverlayWhereUniqueInput;
};


export type MutationDeleteSectionPreezieProductFinderArgs = {
  where: SectionPreezieProductFinderWhereUniqueInput;
};


export type MutationDeleteSectionProductMainArgs = {
  where: SectionProductMainWhereUniqueInput;
};


export type MutationDeleteSectionProductReviewArgs = {
  where: SectionProductReviewWhereUniqueInput;
};


export type MutationDeleteSectionProductSpotlightGridArgs = {
  where: SectionProductSpotlightGridWhereUniqueInput;
};


export type MutationDeleteSectionProductSpotlightLargeArgs = {
  where: SectionProductSpotlightLargeWhereUniqueInput;
};


export type MutationDeleteSectionRelatedProductArgs = {
  where: SectionRelatedProductWhereUniqueInput;
};


export type MutationDeleteSectionSalonServiceBlockArgs = {
  where: SectionSalonServiceBlockWhereUniqueInput;
};


export type MutationDeleteSectionSearchTermListArgs = {
  where: SectionSearchTermListWhereUniqueInput;
};


export type MutationDeleteSectionSeoTextArgs = {
  where: SectionSeoTextWhereUniqueInput;
};


export type MutationDeleteSectionSocialMediaCtaSmallArgs = {
  where: SectionSocialMediaCtaSmallWhereUniqueInput;
};


export type MutationDeleteSectionTextBlockArgs = {
  where: SectionTextBlockWhereUniqueInput;
};


export type MutationDeleteSectionVideoCarouselArgs = {
  where: SectionVideoCarouselWhereUniqueInput;
};


export type MutationDeleteSectionsAccordionArgs = {
  where: SectionsAccordionWhereUniqueInput;
};


export type MutationDeleteSocialMediaCtaLargeArgs = {
  where: SocialMediaCtaLargeWhereUniqueInput;
};


export type MutationDeleteWebsiteConfigArgs = {
  where: WebsiteConfigWhereUniqueInput;
};


export type MutationPublishAssetArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where: AssetWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishBlogArticleArgs = {
  to?: Array<Stage>;
  where: BlogArticleWhereUniqueInput;
};


export type MutationPublishBlogAuthorArgs = {
  to?: Array<Stage>;
  where: BlogAuthorWhereUniqueInput;
};


export type MutationPublishBrandLogoGridArgs = {
  to?: Array<Stage>;
  where: BrandLogoGridWhereUniqueInput;
};


export type MutationPublishBrandsBrandLogoArgs = {
  to?: Array<Stage>;
  where: BrandsBrandLogoWhereUniqueInput;
};


export type MutationPublishCmsPageArgs = {
  to?: Array<Stage>;
  where: CmsPageWhereUniqueInput;
};


export type MutationPublishCollectionPageArgs = {
  to?: Array<Stage>;
  where: CollectionPageWhereUniqueInput;
};


export type MutationPublishConfigCareerArgs = {
  to?: Array<Stage>;
  where: ConfigCareerWhereUniqueInput;
};


export type MutationPublishConfigSalonBookingArgs = {
  to?: Array<Stage>;
  where: ConfigSalonBookingWhereUniqueInput;
};


export type MutationPublishConfigSalonMenuArgs = {
  to?: Array<Stage>;
  where: ConfigSalonMenuWhereUniqueInput;
};


export type MutationPublishConfigSearchArgs = {
  to?: Array<Stage>;
  where: ConfigSearchWhereUniqueInput;
};


export type MutationPublishEditorialTextArgs = {
  to?: Array<Stage>;
  where: EditorialTextWhereUniqueInput;
};


export type MutationPublishFeatureProductCarouselTabbedArgs = {
  to?: Array<Stage>;
  where: FeatureProductCarouselTabbedWhereUniqueInput;
};


export type MutationPublishFooterConfigArgs = {
  to?: Array<Stage>;
  where: FooterConfigWhereUniqueInput;
};


export type MutationPublishHeaderConfigArgs = {
  to?: Array<Stage>;
  where: HeaderConfigWhereUniqueInput;
};


export type MutationPublishHeroBannerArgs = {
  to?: Array<Stage>;
  where: HeroBannerWhereUniqueInput;
};


export type MutationPublishJoinCtApanelArgs = {
  to?: Array<Stage>;
  where: JoinCtApanelWhereUniqueInput;
};


export type MutationPublishManyAssetsArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where?: InputMaybe<AssetManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<AssetManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationPublishManyBlogAuthorsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<BlogAuthorManyWhereInput>;
};


export type MutationPublishManyBlogAuthorsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<BlogAuthorManyWhereInput>;
};


export type MutationPublishManyBrandLogoGridsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<BrandLogoGridManyWhereInput>;
};


export type MutationPublishManyBrandLogoGridsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<BrandLogoGridManyWhereInput>;
};


export type MutationPublishManyBrandsBrandsLogosArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<BrandsBrandLogoManyWhereInput>;
};


export type MutationPublishManyBrandsBrandsLogosConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<BrandsBrandLogoManyWhereInput>;
};


export type MutationPublishManyCmsPagesArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<CmsPageManyWhereInput>;
};


export type MutationPublishManyCmsPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<CmsPageManyWhereInput>;
};


export type MutationPublishManyCollectionPagesArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<CollectionPageManyWhereInput>;
};


export type MutationPublishManyCollectionPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<CollectionPageManyWhereInput>;
};


export type MutationPublishManyConfigCareersArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<ConfigCareerManyWhereInput>;
};


export type MutationPublishManyConfigCareersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<ConfigCareerManyWhereInput>;
};


export type MutationPublishManyConfigSalonBookingsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<ConfigSalonBookingManyWhereInput>;
};


export type MutationPublishManyConfigSalonBookingsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<ConfigSalonBookingManyWhereInput>;
};


export type MutationPublishManyConfigSalonMenusArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<ConfigSalonMenuManyWhereInput>;
};


export type MutationPublishManyConfigSalonMenusConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<ConfigSalonMenuManyWhereInput>;
};


export type MutationPublishManyConfigSearchesArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<ConfigSearchManyWhereInput>;
};


export type MutationPublishManyConfigSearchesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<ConfigSearchManyWhereInput>;
};


export type MutationPublishManyEditorialTextsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<EditorialTextManyWhereInput>;
};


export type MutationPublishManyEditorialTextsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<EditorialTextManyWhereInput>;
};


export type MutationPublishManyFeatureProductCarouselTabsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<FeatureProductCarouselTabbedManyWhereInput>;
};


export type MutationPublishManyFeatureProductCarouselTabsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<FeatureProductCarouselTabbedManyWhereInput>;
};


export type MutationPublishManyFooterConfigsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<FooterConfigManyWhereInput>;
};


export type MutationPublishManyFooterConfigsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<FooterConfigManyWhereInput>;
};


export type MutationPublishManyHeaderConfigsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<HeaderConfigManyWhereInput>;
};


export type MutationPublishManyHeaderConfigsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<HeaderConfigManyWhereInput>;
};


export type MutationPublishManyHeroBannersArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<HeroBannerManyWhereInput>;
};


export type MutationPublishManyHeroBannersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<HeroBannerManyWhereInput>;
};


export type MutationPublishManyJointCtApanelsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<JoinCtApanelManyWhereInput>;
};


export type MutationPublishManyJointCtApanelsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<JoinCtApanelManyWhereInput>;
};


export type MutationPublishManyModulePromoBannersArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<ModulePromoBannerManyWhereInput>;
};


export type MutationPublishManyModulePromoBannersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<ModulePromoBannerManyWhereInput>;
};


export type MutationPublishManyMultiCollectionSlidersArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<MultiCollectionSliderManyWhereInput>;
};


export type MutationPublishManyMultiCollectionSlidersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<MultiCollectionSliderManyWhereInput>;
};


export type MutationPublishManyOfferTilessArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<OfferTilesManyWhereInput>;
};


export type MutationPublishManyOfferTilessConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<OfferTilesManyWhereInput>;
};


export type MutationPublishManyPageBlogArticlesArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<BlogArticleManyWhereInput>;
};


export type MutationPublishManyPageBlogArticlesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<BlogArticleManyWhereInput>;
};


export type MutationPublishManyPageBuyingGuidesArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<PageBuyingGuideManyWhereInput>;
};


export type MutationPublishManyPageBuyingGuidesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<PageBuyingGuideManyWhereInput>;
};


export type MutationPublishManyProductBenefitsGridsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<ProductBenefitsGridManyWhereInput>;
};


export type MutationPublishManyProductBenefitsGridsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<ProductBenefitsGridManyWhereInput>;
};


export type MutationPublishManyProductHowTosArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<ProductHowToManyWhereInput>;
};


export type MutationPublishManyProductHowTosConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<ProductHowToManyWhereInput>;
};


export type MutationPublishManyProductPagesArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<ProductPageManyWhereInput>;
};


export type MutationPublishManyProductPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<ProductPageManyWhereInput>;
};


export type MutationPublishManyPropositionsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<PropositionManyWhereInput>;
};


export type MutationPublishManyPropositionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<PropositionManyWhereInput>;
};


export type MutationPublishManySectionAccountSignupCtasArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<SectionAccountSignupCtaManyWhereInput>;
};


export type MutationPublishManySectionAccountSignupCtasConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<SectionAccountSignupCtaManyWhereInput>;
};


export type MutationPublishManySectionBlogListingsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<SectionBlogListingManyWhereInput>;
};


export type MutationPublishManySectionBlogListingsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<SectionBlogListingManyWhereInput>;
};


export type MutationPublishManySectionCollectionCarouselsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<SectionCollectionCarouselManyWhereInput>;
};


export type MutationPublishManySectionCollectionCarouselsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<SectionCollectionCarouselManyWhereInput>;
};


export type MutationPublishManySectionCollectionDropDownsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<SectionCollectionDropDownManyWhereInput>;
};


export type MutationPublishManySectionCollectionDropDownsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<SectionCollectionDropDownManyWhereInput>;
};


export type MutationPublishManySectionCollectionFeatureLargesArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<SectionCollectionFeatureLargeManyWhereInput>;
};


export type MutationPublishManySectionCollectionFeatureLargesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<SectionCollectionFeatureLargeManyWhereInput>;
};


export type MutationPublishManySectionCollectionMainsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<SectionCollectionMainManyWhereInput>;
};


export type MutationPublishManySectionCollectionMainsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<SectionCollectionMainManyWhereInput>;
};


export type MutationPublishManySectionCollectionSubcategoryLinksArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<SectionCollectionSubcategoryLinkManyWhereInput>;
};


export type MutationPublishManySectionCollectionSubcategoryLinksConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<SectionCollectionSubcategoryLinkManyWhereInput>;
};


export type MutationPublishManySectionCtaButtonsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<SectionCtaButtonManyWhereInput>;
};


export type MutationPublishManySectionCtaButtonsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<SectionCtaButtonManyWhereInput>;
};


export type MutationPublishManySectionFullWidthImagesArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<SectionFullWidthImageManyWhereInput>;
};


export type MutationPublishManySectionFullWidthImagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<SectionFullWidthImageManyWhereInput>;
};


export type MutationPublishManySectionImageAndTextGridsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<SectionImageAndTextGridManyWhereInput>;
};


export type MutationPublishManySectionImageAndTextGridsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<SectionImageAndTextGridManyWhereInput>;
};


export type MutationPublishManySectionImageTextOverlaysArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<SectionImageTextOverlayManyWhereInput>;
};


export type MutationPublishManySectionImageTextOverlaysConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<SectionImageTextOverlayManyWhereInput>;
};


export type MutationPublishManySectionPreezieProductFindersArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<SectionPreezieProductFinderManyWhereInput>;
};


export type MutationPublishManySectionPreezieProductFindersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<SectionPreezieProductFinderManyWhereInput>;
};


export type MutationPublishManySectionProductMainsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<SectionProductMainManyWhereInput>;
};


export type MutationPublishManySectionProductMainsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<SectionProductMainManyWhereInput>;
};


export type MutationPublishManySectionProductReviewsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<SectionProductReviewManyWhereInput>;
};


export type MutationPublishManySectionProductReviewsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<SectionProductReviewManyWhereInput>;
};


export type MutationPublishManySectionProductSpotlightGridsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<SectionProductSpotlightGridManyWhereInput>;
};


export type MutationPublishManySectionProductSpotlightGridsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<SectionProductSpotlightGridManyWhereInput>;
};


export type MutationPublishManySectionProductSpotlightLargesArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<SectionProductSpotlightLargeManyWhereInput>;
};


export type MutationPublishManySectionProductSpotlightLargesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<SectionProductSpotlightLargeManyWhereInput>;
};


export type MutationPublishManySectionRelatedProductsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<SectionRelatedProductManyWhereInput>;
};


export type MutationPublishManySectionRelatedProductsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<SectionRelatedProductManyWhereInput>;
};


export type MutationPublishManySectionSalonServiceBlocksArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<SectionSalonServiceBlockManyWhereInput>;
};


export type MutationPublishManySectionSalonServiceBlocksConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<SectionSalonServiceBlockManyWhereInput>;
};


export type MutationPublishManySectionSearchTermListsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<SectionSearchTermListManyWhereInput>;
};


export type MutationPublishManySectionSearchTermListsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<SectionSearchTermListManyWhereInput>;
};


export type MutationPublishManySectionSeoTextsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<SectionSeoTextManyWhereInput>;
};


export type MutationPublishManySectionSeoTextsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<SectionSeoTextManyWhereInput>;
};


export type MutationPublishManySectionSocialMediaCtaSmallsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<SectionSocialMediaCtaSmallManyWhereInput>;
};


export type MutationPublishManySectionSocialMediaCtaSmallsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<SectionSocialMediaCtaSmallManyWhereInput>;
};


export type MutationPublishManySectionTextBlocksArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<SectionTextBlockManyWhereInput>;
};


export type MutationPublishManySectionTextBlocksConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<SectionTextBlockManyWhereInput>;
};


export type MutationPublishManySectionVideoCarouselsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<SectionVideoCarouselManyWhereInput>;
};


export type MutationPublishManySectionVideoCarouselsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<SectionVideoCarouselManyWhereInput>;
};


export type MutationPublishManySectionsAccordionsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<SectionsAccordionManyWhereInput>;
};


export type MutationPublishManySectionsAccordionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<SectionsAccordionManyWhereInput>;
};


export type MutationPublishManySocialMediaCtaLargesArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<SocialMediaCtaLargeManyWhereInput>;
};


export type MutationPublishManySocialMediaCtaLargesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<SocialMediaCtaLargeManyWhereInput>;
};


export type MutationPublishManyWebsiteConfigsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<WebsiteConfigManyWhereInput>;
};


export type MutationPublishManyWebsiteConfigsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<WebsiteConfigManyWhereInput>;
};


export type MutationPublishModulePromoBannerArgs = {
  to?: Array<Stage>;
  where: ModulePromoBannerWhereUniqueInput;
};


export type MutationPublishMultiCollectionSliderArgs = {
  to?: Array<Stage>;
  where: MultiCollectionSliderWhereUniqueInput;
};


export type MutationPublishOfferTilesArgs = {
  to?: Array<Stage>;
  where: OfferTilesWhereUniqueInput;
};


export type MutationPublishPageBuyingGuideArgs = {
  to?: Array<Stage>;
  where: PageBuyingGuideWhereUniqueInput;
};


export type MutationPublishProductBenefitsGridArgs = {
  to?: Array<Stage>;
  where: ProductBenefitsGridWhereUniqueInput;
};


export type MutationPublishProductHowToArgs = {
  to?: Array<Stage>;
  where: ProductHowToWhereUniqueInput;
};


export type MutationPublishProductPageArgs = {
  to?: Array<Stage>;
  where: ProductPageWhereUniqueInput;
};


export type MutationPublishPropositionArgs = {
  to?: Array<Stage>;
  where: PropositionWhereUniqueInput;
};


export type MutationPublishSectionAccountSignupCtaArgs = {
  to?: Array<Stage>;
  where: SectionAccountSignupCtaWhereUniqueInput;
};


export type MutationPublishSectionBlogListingArgs = {
  to?: Array<Stage>;
  where: SectionBlogListingWhereUniqueInput;
};


export type MutationPublishSectionCollectionCarouselArgs = {
  to?: Array<Stage>;
  where: SectionCollectionCarouselWhereUniqueInput;
};


export type MutationPublishSectionCollectionDropDownArgs = {
  to?: Array<Stage>;
  where: SectionCollectionDropDownWhereUniqueInput;
};


export type MutationPublishSectionCollectionFeatureLargeArgs = {
  to?: Array<Stage>;
  where: SectionCollectionFeatureLargeWhereUniqueInput;
};


export type MutationPublishSectionCollectionMainArgs = {
  to?: Array<Stage>;
  where: SectionCollectionMainWhereUniqueInput;
};


export type MutationPublishSectionCollectionSubcategoryLinkArgs = {
  to?: Array<Stage>;
  where: SectionCollectionSubcategoryLinkWhereUniqueInput;
};


export type MutationPublishSectionCtaButtonArgs = {
  to?: Array<Stage>;
  where: SectionCtaButtonWhereUniqueInput;
};


export type MutationPublishSectionFullWidthImageArgs = {
  to?: Array<Stage>;
  where: SectionFullWidthImageWhereUniqueInput;
};


export type MutationPublishSectionImageAndTextGridArgs = {
  to?: Array<Stage>;
  where: SectionImageAndTextGridWhereUniqueInput;
};


export type MutationPublishSectionImageTextOverlayArgs = {
  to?: Array<Stage>;
  where: SectionImageTextOverlayWhereUniqueInput;
};


export type MutationPublishSectionPreezieProductFinderArgs = {
  to?: Array<Stage>;
  where: SectionPreezieProductFinderWhereUniqueInput;
};


export type MutationPublishSectionProductMainArgs = {
  to?: Array<Stage>;
  where: SectionProductMainWhereUniqueInput;
};


export type MutationPublishSectionProductReviewArgs = {
  to?: Array<Stage>;
  where: SectionProductReviewWhereUniqueInput;
};


export type MutationPublishSectionProductSpotlightGridArgs = {
  to?: Array<Stage>;
  where: SectionProductSpotlightGridWhereUniqueInput;
};


export type MutationPublishSectionProductSpotlightLargeArgs = {
  to?: Array<Stage>;
  where: SectionProductSpotlightLargeWhereUniqueInput;
};


export type MutationPublishSectionRelatedProductArgs = {
  to?: Array<Stage>;
  where: SectionRelatedProductWhereUniqueInput;
};


export type MutationPublishSectionSalonServiceBlockArgs = {
  to?: Array<Stage>;
  where: SectionSalonServiceBlockWhereUniqueInput;
};


export type MutationPublishSectionSearchTermListArgs = {
  to?: Array<Stage>;
  where: SectionSearchTermListWhereUniqueInput;
};


export type MutationPublishSectionSeoTextArgs = {
  to?: Array<Stage>;
  where: SectionSeoTextWhereUniqueInput;
};


export type MutationPublishSectionSocialMediaCtaSmallArgs = {
  to?: Array<Stage>;
  where: SectionSocialMediaCtaSmallWhereUniqueInput;
};


export type MutationPublishSectionTextBlockArgs = {
  to?: Array<Stage>;
  where: SectionTextBlockWhereUniqueInput;
};


export type MutationPublishSectionVideoCarouselArgs = {
  to?: Array<Stage>;
  where: SectionVideoCarouselWhereUniqueInput;
};


export type MutationPublishSectionsAccordionArgs = {
  to?: Array<Stage>;
  where: SectionsAccordionWhereUniqueInput;
};


export type MutationPublishSocialMediaCtaLargeArgs = {
  to?: Array<Stage>;
  where: SocialMediaCtaLargeWhereUniqueInput;
};


export type MutationPublishWebsiteConfigArgs = {
  to?: Array<Stage>;
  where: WebsiteConfigWhereUniqueInput;
};


export type MutationSchedulePublishAssetArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: AssetWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};


export type MutationSchedulePublishBlogArticleArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: BlogArticleWhereUniqueInput;
};


export type MutationSchedulePublishBlogAuthorArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: BlogAuthorWhereUniqueInput;
};


export type MutationSchedulePublishBrandLogoGridArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: BrandLogoGridWhereUniqueInput;
};


export type MutationSchedulePublishBrandsBrandLogoArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: BrandsBrandLogoWhereUniqueInput;
};


export type MutationSchedulePublishCmsPageArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: CmsPageWhereUniqueInput;
};


export type MutationSchedulePublishCollectionPageArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: CollectionPageWhereUniqueInput;
};


export type MutationSchedulePublishConfigCareerArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: ConfigCareerWhereUniqueInput;
};


export type MutationSchedulePublishConfigSalonBookingArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: ConfigSalonBookingWhereUniqueInput;
};


export type MutationSchedulePublishConfigSalonMenuArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: ConfigSalonMenuWhereUniqueInput;
};


export type MutationSchedulePublishConfigSearchArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: ConfigSearchWhereUniqueInput;
};


export type MutationSchedulePublishEditorialTextArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: EditorialTextWhereUniqueInput;
};


export type MutationSchedulePublishFeatureProductCarouselTabbedArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: FeatureProductCarouselTabbedWhereUniqueInput;
};


export type MutationSchedulePublishFooterConfigArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: FooterConfigWhereUniqueInput;
};


export type MutationSchedulePublishHeaderConfigArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: HeaderConfigWhereUniqueInput;
};


export type MutationSchedulePublishHeroBannerArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: HeroBannerWhereUniqueInput;
};


export type MutationSchedulePublishJoinCtApanelArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: JoinCtApanelWhereUniqueInput;
};


export type MutationSchedulePublishModulePromoBannerArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: ModulePromoBannerWhereUniqueInput;
};


export type MutationSchedulePublishMultiCollectionSliderArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: MultiCollectionSliderWhereUniqueInput;
};


export type MutationSchedulePublishOfferTilesArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: OfferTilesWhereUniqueInput;
};


export type MutationSchedulePublishPageBuyingGuideArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: PageBuyingGuideWhereUniqueInput;
};


export type MutationSchedulePublishProductBenefitsGridArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: ProductBenefitsGridWhereUniqueInput;
};


export type MutationSchedulePublishProductHowToArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: ProductHowToWhereUniqueInput;
};


export type MutationSchedulePublishProductPageArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: ProductPageWhereUniqueInput;
};


export type MutationSchedulePublishPropositionArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: PropositionWhereUniqueInput;
};


export type MutationSchedulePublishSectionAccountSignupCtaArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: SectionAccountSignupCtaWhereUniqueInput;
};


export type MutationSchedulePublishSectionBlogListingArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: SectionBlogListingWhereUniqueInput;
};


export type MutationSchedulePublishSectionCollectionCarouselArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: SectionCollectionCarouselWhereUniqueInput;
};


export type MutationSchedulePublishSectionCollectionDropDownArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: SectionCollectionDropDownWhereUniqueInput;
};


export type MutationSchedulePublishSectionCollectionFeatureLargeArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: SectionCollectionFeatureLargeWhereUniqueInput;
};


export type MutationSchedulePublishSectionCollectionMainArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: SectionCollectionMainWhereUniqueInput;
};


export type MutationSchedulePublishSectionCollectionSubcategoryLinkArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: SectionCollectionSubcategoryLinkWhereUniqueInput;
};


export type MutationSchedulePublishSectionCtaButtonArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: SectionCtaButtonWhereUniqueInput;
};


export type MutationSchedulePublishSectionFullWidthImageArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: SectionFullWidthImageWhereUniqueInput;
};


export type MutationSchedulePublishSectionImageAndTextGridArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: SectionImageAndTextGridWhereUniqueInput;
};


export type MutationSchedulePublishSectionImageTextOverlayArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: SectionImageTextOverlayWhereUniqueInput;
};


export type MutationSchedulePublishSectionPreezieProductFinderArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: SectionPreezieProductFinderWhereUniqueInput;
};


export type MutationSchedulePublishSectionProductMainArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: SectionProductMainWhereUniqueInput;
};


export type MutationSchedulePublishSectionProductReviewArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: SectionProductReviewWhereUniqueInput;
};


export type MutationSchedulePublishSectionProductSpotlightGridArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: SectionProductSpotlightGridWhereUniqueInput;
};


export type MutationSchedulePublishSectionProductSpotlightLargeArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: SectionProductSpotlightLargeWhereUniqueInput;
};


export type MutationSchedulePublishSectionRelatedProductArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: SectionRelatedProductWhereUniqueInput;
};


export type MutationSchedulePublishSectionSalonServiceBlockArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: SectionSalonServiceBlockWhereUniqueInput;
};


export type MutationSchedulePublishSectionSearchTermListArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: SectionSearchTermListWhereUniqueInput;
};


export type MutationSchedulePublishSectionSeoTextArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: SectionSeoTextWhereUniqueInput;
};


export type MutationSchedulePublishSectionSocialMediaCtaSmallArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: SectionSocialMediaCtaSmallWhereUniqueInput;
};


export type MutationSchedulePublishSectionTextBlockArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: SectionTextBlockWhereUniqueInput;
};


export type MutationSchedulePublishSectionVideoCarouselArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: SectionVideoCarouselWhereUniqueInput;
};


export type MutationSchedulePublishSectionsAccordionArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: SectionsAccordionWhereUniqueInput;
};


export type MutationSchedulePublishSocialMediaCtaLargeArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: SocialMediaCtaLargeWhereUniqueInput;
};


export type MutationSchedulePublishWebsiteConfigArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: WebsiteConfigWhereUniqueInput;
};


export type MutationScheduleUnpublishAssetArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: AssetWhereUniqueInput;
};


export type MutationScheduleUnpublishBlogArticleArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: BlogArticleWhereUniqueInput;
};


export type MutationScheduleUnpublishBlogAuthorArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: BlogAuthorWhereUniqueInput;
};


export type MutationScheduleUnpublishBrandLogoGridArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: BrandLogoGridWhereUniqueInput;
};


export type MutationScheduleUnpublishBrandsBrandLogoArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: BrandsBrandLogoWhereUniqueInput;
};


export type MutationScheduleUnpublishCmsPageArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: CmsPageWhereUniqueInput;
};


export type MutationScheduleUnpublishCollectionPageArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: CollectionPageWhereUniqueInput;
};


export type MutationScheduleUnpublishConfigCareerArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: ConfigCareerWhereUniqueInput;
};


export type MutationScheduleUnpublishConfigSalonBookingArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: ConfigSalonBookingWhereUniqueInput;
};


export type MutationScheduleUnpublishConfigSalonMenuArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: ConfigSalonMenuWhereUniqueInput;
};


export type MutationScheduleUnpublishConfigSearchArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: ConfigSearchWhereUniqueInput;
};


export type MutationScheduleUnpublishEditorialTextArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: EditorialTextWhereUniqueInput;
};


export type MutationScheduleUnpublishFeatureProductCarouselTabbedArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: FeatureProductCarouselTabbedWhereUniqueInput;
};


export type MutationScheduleUnpublishFooterConfigArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: FooterConfigWhereUniqueInput;
};


export type MutationScheduleUnpublishHeaderConfigArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: HeaderConfigWhereUniqueInput;
};


export type MutationScheduleUnpublishHeroBannerArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: HeroBannerWhereUniqueInput;
};


export type MutationScheduleUnpublishJoinCtApanelArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: JoinCtApanelWhereUniqueInput;
};


export type MutationScheduleUnpublishModulePromoBannerArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: ModulePromoBannerWhereUniqueInput;
};


export type MutationScheduleUnpublishMultiCollectionSliderArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: MultiCollectionSliderWhereUniqueInput;
};


export type MutationScheduleUnpublishOfferTilesArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: OfferTilesWhereUniqueInput;
};


export type MutationScheduleUnpublishPageBuyingGuideArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: PageBuyingGuideWhereUniqueInput;
};


export type MutationScheduleUnpublishProductBenefitsGridArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: ProductBenefitsGridWhereUniqueInput;
};


export type MutationScheduleUnpublishProductHowToArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: ProductHowToWhereUniqueInput;
};


export type MutationScheduleUnpublishProductPageArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: ProductPageWhereUniqueInput;
};


export type MutationScheduleUnpublishPropositionArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: PropositionWhereUniqueInput;
};


export type MutationScheduleUnpublishSectionAccountSignupCtaArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: SectionAccountSignupCtaWhereUniqueInput;
};


export type MutationScheduleUnpublishSectionBlogListingArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: SectionBlogListingWhereUniqueInput;
};


export type MutationScheduleUnpublishSectionCollectionCarouselArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: SectionCollectionCarouselWhereUniqueInput;
};


export type MutationScheduleUnpublishSectionCollectionDropDownArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: SectionCollectionDropDownWhereUniqueInput;
};


export type MutationScheduleUnpublishSectionCollectionFeatureLargeArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: SectionCollectionFeatureLargeWhereUniqueInput;
};


export type MutationScheduleUnpublishSectionCollectionMainArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: SectionCollectionMainWhereUniqueInput;
};


export type MutationScheduleUnpublishSectionCollectionSubcategoryLinkArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: SectionCollectionSubcategoryLinkWhereUniqueInput;
};


export type MutationScheduleUnpublishSectionCtaButtonArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: SectionCtaButtonWhereUniqueInput;
};


export type MutationScheduleUnpublishSectionFullWidthImageArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: SectionFullWidthImageWhereUniqueInput;
};


export type MutationScheduleUnpublishSectionImageAndTextGridArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: SectionImageAndTextGridWhereUniqueInput;
};


export type MutationScheduleUnpublishSectionImageTextOverlayArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: SectionImageTextOverlayWhereUniqueInput;
};


export type MutationScheduleUnpublishSectionPreezieProductFinderArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: SectionPreezieProductFinderWhereUniqueInput;
};


export type MutationScheduleUnpublishSectionProductMainArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: SectionProductMainWhereUniqueInput;
};


export type MutationScheduleUnpublishSectionProductReviewArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: SectionProductReviewWhereUniqueInput;
};


export type MutationScheduleUnpublishSectionProductSpotlightGridArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: SectionProductSpotlightGridWhereUniqueInput;
};


export type MutationScheduleUnpublishSectionProductSpotlightLargeArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: SectionProductSpotlightLargeWhereUniqueInput;
};


export type MutationScheduleUnpublishSectionRelatedProductArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: SectionRelatedProductWhereUniqueInput;
};


export type MutationScheduleUnpublishSectionSalonServiceBlockArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: SectionSalonServiceBlockWhereUniqueInput;
};


export type MutationScheduleUnpublishSectionSearchTermListArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: SectionSearchTermListWhereUniqueInput;
};


export type MutationScheduleUnpublishSectionSeoTextArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: SectionSeoTextWhereUniqueInput;
};


export type MutationScheduleUnpublishSectionSocialMediaCtaSmallArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: SectionSocialMediaCtaSmallWhereUniqueInput;
};


export type MutationScheduleUnpublishSectionTextBlockArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: SectionTextBlockWhereUniqueInput;
};


export type MutationScheduleUnpublishSectionVideoCarouselArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: SectionVideoCarouselWhereUniqueInput;
};


export type MutationScheduleUnpublishSectionsAccordionArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: SectionsAccordionWhereUniqueInput;
};


export type MutationScheduleUnpublishSocialMediaCtaLargeArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: SocialMediaCtaLargeWhereUniqueInput;
};


export type MutationScheduleUnpublishWebsiteConfigArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: WebsiteConfigWhereUniqueInput;
};


export type MutationUnpublishAssetArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: AssetWhereUniqueInput;
};


export type MutationUnpublishBlogArticleArgs = {
  from?: Array<Stage>;
  where: BlogArticleWhereUniqueInput;
};


export type MutationUnpublishBlogAuthorArgs = {
  from?: Array<Stage>;
  where: BlogAuthorWhereUniqueInput;
};


export type MutationUnpublishBrandLogoGridArgs = {
  from?: Array<Stage>;
  where: BrandLogoGridWhereUniqueInput;
};


export type MutationUnpublishBrandsBrandLogoArgs = {
  from?: Array<Stage>;
  where: BrandsBrandLogoWhereUniqueInput;
};


export type MutationUnpublishCmsPageArgs = {
  from?: Array<Stage>;
  where: CmsPageWhereUniqueInput;
};


export type MutationUnpublishCollectionPageArgs = {
  from?: Array<Stage>;
  where: CollectionPageWhereUniqueInput;
};


export type MutationUnpublishConfigCareerArgs = {
  from?: Array<Stage>;
  where: ConfigCareerWhereUniqueInput;
};


export type MutationUnpublishConfigSalonBookingArgs = {
  from?: Array<Stage>;
  where: ConfigSalonBookingWhereUniqueInput;
};


export type MutationUnpublishConfigSalonMenuArgs = {
  from?: Array<Stage>;
  where: ConfigSalonMenuWhereUniqueInput;
};


export type MutationUnpublishConfigSearchArgs = {
  from?: Array<Stage>;
  where: ConfigSearchWhereUniqueInput;
};


export type MutationUnpublishEditorialTextArgs = {
  from?: Array<Stage>;
  where: EditorialTextWhereUniqueInput;
};


export type MutationUnpublishFeatureProductCarouselTabbedArgs = {
  from?: Array<Stage>;
  where: FeatureProductCarouselTabbedWhereUniqueInput;
};


export type MutationUnpublishFooterConfigArgs = {
  from?: Array<Stage>;
  where: FooterConfigWhereUniqueInput;
};


export type MutationUnpublishHeaderConfigArgs = {
  from?: Array<Stage>;
  where: HeaderConfigWhereUniqueInput;
};


export type MutationUnpublishHeroBannerArgs = {
  from?: Array<Stage>;
  where: HeroBannerWhereUniqueInput;
};


export type MutationUnpublishJoinCtApanelArgs = {
  from?: Array<Stage>;
  where: JoinCtApanelWhereUniqueInput;
};


export type MutationUnpublishManyAssetsArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationUnpublishManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationUnpublishManyBlogAuthorsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<BlogAuthorManyWhereInput>;
};


export type MutationUnpublishManyBlogAuthorsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<BlogAuthorManyWhereInput>;
};


export type MutationUnpublishManyBrandLogoGridsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<BrandLogoGridManyWhereInput>;
};


export type MutationUnpublishManyBrandLogoGridsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<BrandLogoGridManyWhereInput>;
};


export type MutationUnpublishManyBrandsBrandsLogosArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<BrandsBrandLogoManyWhereInput>;
};


export type MutationUnpublishManyBrandsBrandsLogosConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<BrandsBrandLogoManyWhereInput>;
};


export type MutationUnpublishManyCmsPagesArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<CmsPageManyWhereInput>;
};


export type MutationUnpublishManyCmsPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<CmsPageManyWhereInput>;
};


export type MutationUnpublishManyCollectionPagesArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<CollectionPageManyWhereInput>;
};


export type MutationUnpublishManyCollectionPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<CollectionPageManyWhereInput>;
};


export type MutationUnpublishManyConfigCareersArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<ConfigCareerManyWhereInput>;
};


export type MutationUnpublishManyConfigCareersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<ConfigCareerManyWhereInput>;
};


export type MutationUnpublishManyConfigSalonBookingsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<ConfigSalonBookingManyWhereInput>;
};


export type MutationUnpublishManyConfigSalonBookingsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<ConfigSalonBookingManyWhereInput>;
};


export type MutationUnpublishManyConfigSalonMenusArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<ConfigSalonMenuManyWhereInput>;
};


export type MutationUnpublishManyConfigSalonMenusConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<ConfigSalonMenuManyWhereInput>;
};


export type MutationUnpublishManyConfigSearchesArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<ConfigSearchManyWhereInput>;
};


export type MutationUnpublishManyConfigSearchesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<ConfigSearchManyWhereInput>;
};


export type MutationUnpublishManyEditorialTextsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<EditorialTextManyWhereInput>;
};


export type MutationUnpublishManyEditorialTextsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<EditorialTextManyWhereInput>;
};


export type MutationUnpublishManyFeatureProductCarouselTabsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<FeatureProductCarouselTabbedManyWhereInput>;
};


export type MutationUnpublishManyFeatureProductCarouselTabsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<FeatureProductCarouselTabbedManyWhereInput>;
};


export type MutationUnpublishManyFooterConfigsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<FooterConfigManyWhereInput>;
};


export type MutationUnpublishManyFooterConfigsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<FooterConfigManyWhereInput>;
};


export type MutationUnpublishManyHeaderConfigsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<HeaderConfigManyWhereInput>;
};


export type MutationUnpublishManyHeaderConfigsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<HeaderConfigManyWhereInput>;
};


export type MutationUnpublishManyHeroBannersArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<HeroBannerManyWhereInput>;
};


export type MutationUnpublishManyHeroBannersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<HeroBannerManyWhereInput>;
};


export type MutationUnpublishManyJointCtApanelsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<JoinCtApanelManyWhereInput>;
};


export type MutationUnpublishManyJointCtApanelsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<JoinCtApanelManyWhereInput>;
};


export type MutationUnpublishManyModulePromoBannersArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<ModulePromoBannerManyWhereInput>;
};


export type MutationUnpublishManyModulePromoBannersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<ModulePromoBannerManyWhereInput>;
};


export type MutationUnpublishManyMultiCollectionSlidersArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<MultiCollectionSliderManyWhereInput>;
};


export type MutationUnpublishManyMultiCollectionSlidersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<MultiCollectionSliderManyWhereInput>;
};


export type MutationUnpublishManyOfferTilessArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<OfferTilesManyWhereInput>;
};


export type MutationUnpublishManyOfferTilessConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<OfferTilesManyWhereInput>;
};


export type MutationUnpublishManyPageBlogArticlesArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<BlogArticleManyWhereInput>;
};


export type MutationUnpublishManyPageBlogArticlesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<BlogArticleManyWhereInput>;
};


export type MutationUnpublishManyPageBuyingGuidesArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<PageBuyingGuideManyWhereInput>;
};


export type MutationUnpublishManyPageBuyingGuidesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<PageBuyingGuideManyWhereInput>;
};


export type MutationUnpublishManyProductBenefitsGridsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<ProductBenefitsGridManyWhereInput>;
};


export type MutationUnpublishManyProductBenefitsGridsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<ProductBenefitsGridManyWhereInput>;
};


export type MutationUnpublishManyProductHowTosArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<ProductHowToManyWhereInput>;
};


export type MutationUnpublishManyProductHowTosConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<ProductHowToManyWhereInput>;
};


export type MutationUnpublishManyProductPagesArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<ProductPageManyWhereInput>;
};


export type MutationUnpublishManyProductPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<ProductPageManyWhereInput>;
};


export type MutationUnpublishManyPropositionsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<PropositionManyWhereInput>;
};


export type MutationUnpublishManyPropositionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<PropositionManyWhereInput>;
};


export type MutationUnpublishManySectionAccountSignupCtasArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<SectionAccountSignupCtaManyWhereInput>;
};


export type MutationUnpublishManySectionAccountSignupCtasConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<SectionAccountSignupCtaManyWhereInput>;
};


export type MutationUnpublishManySectionBlogListingsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<SectionBlogListingManyWhereInput>;
};


export type MutationUnpublishManySectionBlogListingsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<SectionBlogListingManyWhereInput>;
};


export type MutationUnpublishManySectionCollectionCarouselsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<SectionCollectionCarouselManyWhereInput>;
};


export type MutationUnpublishManySectionCollectionCarouselsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<SectionCollectionCarouselManyWhereInput>;
};


export type MutationUnpublishManySectionCollectionDropDownsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<SectionCollectionDropDownManyWhereInput>;
};


export type MutationUnpublishManySectionCollectionDropDownsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<SectionCollectionDropDownManyWhereInput>;
};


export type MutationUnpublishManySectionCollectionFeatureLargesArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<SectionCollectionFeatureLargeManyWhereInput>;
};


export type MutationUnpublishManySectionCollectionFeatureLargesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<SectionCollectionFeatureLargeManyWhereInput>;
};


export type MutationUnpublishManySectionCollectionMainsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<SectionCollectionMainManyWhereInput>;
};


export type MutationUnpublishManySectionCollectionMainsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<SectionCollectionMainManyWhereInput>;
};


export type MutationUnpublishManySectionCollectionSubcategoryLinksArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<SectionCollectionSubcategoryLinkManyWhereInput>;
};


export type MutationUnpublishManySectionCollectionSubcategoryLinksConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<SectionCollectionSubcategoryLinkManyWhereInput>;
};


export type MutationUnpublishManySectionCtaButtonsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<SectionCtaButtonManyWhereInput>;
};


export type MutationUnpublishManySectionCtaButtonsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<SectionCtaButtonManyWhereInput>;
};


export type MutationUnpublishManySectionFullWidthImagesArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<SectionFullWidthImageManyWhereInput>;
};


export type MutationUnpublishManySectionFullWidthImagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<SectionFullWidthImageManyWhereInput>;
};


export type MutationUnpublishManySectionImageAndTextGridsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<SectionImageAndTextGridManyWhereInput>;
};


export type MutationUnpublishManySectionImageAndTextGridsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<SectionImageAndTextGridManyWhereInput>;
};


export type MutationUnpublishManySectionImageTextOverlaysArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<SectionImageTextOverlayManyWhereInput>;
};


export type MutationUnpublishManySectionImageTextOverlaysConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<SectionImageTextOverlayManyWhereInput>;
};


export type MutationUnpublishManySectionPreezieProductFindersArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<SectionPreezieProductFinderManyWhereInput>;
};


export type MutationUnpublishManySectionPreezieProductFindersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<SectionPreezieProductFinderManyWhereInput>;
};


export type MutationUnpublishManySectionProductMainsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<SectionProductMainManyWhereInput>;
};


export type MutationUnpublishManySectionProductMainsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<SectionProductMainManyWhereInput>;
};


export type MutationUnpublishManySectionProductReviewsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<SectionProductReviewManyWhereInput>;
};


export type MutationUnpublishManySectionProductReviewsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<SectionProductReviewManyWhereInput>;
};


export type MutationUnpublishManySectionProductSpotlightGridsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<SectionProductSpotlightGridManyWhereInput>;
};


export type MutationUnpublishManySectionProductSpotlightGridsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<SectionProductSpotlightGridManyWhereInput>;
};


export type MutationUnpublishManySectionProductSpotlightLargesArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<SectionProductSpotlightLargeManyWhereInput>;
};


export type MutationUnpublishManySectionProductSpotlightLargesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<SectionProductSpotlightLargeManyWhereInput>;
};


export type MutationUnpublishManySectionRelatedProductsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<SectionRelatedProductManyWhereInput>;
};


export type MutationUnpublishManySectionRelatedProductsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<SectionRelatedProductManyWhereInput>;
};


export type MutationUnpublishManySectionSalonServiceBlocksArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<SectionSalonServiceBlockManyWhereInput>;
};


export type MutationUnpublishManySectionSalonServiceBlocksConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<SectionSalonServiceBlockManyWhereInput>;
};


export type MutationUnpublishManySectionSearchTermListsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<SectionSearchTermListManyWhereInput>;
};


export type MutationUnpublishManySectionSearchTermListsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<SectionSearchTermListManyWhereInput>;
};


export type MutationUnpublishManySectionSeoTextsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<SectionSeoTextManyWhereInput>;
};


export type MutationUnpublishManySectionSeoTextsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<SectionSeoTextManyWhereInput>;
};


export type MutationUnpublishManySectionSocialMediaCtaSmallsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<SectionSocialMediaCtaSmallManyWhereInput>;
};


export type MutationUnpublishManySectionSocialMediaCtaSmallsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<SectionSocialMediaCtaSmallManyWhereInput>;
};


export type MutationUnpublishManySectionTextBlocksArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<SectionTextBlockManyWhereInput>;
};


export type MutationUnpublishManySectionTextBlocksConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<SectionTextBlockManyWhereInput>;
};


export type MutationUnpublishManySectionVideoCarouselsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<SectionVideoCarouselManyWhereInput>;
};


export type MutationUnpublishManySectionVideoCarouselsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<SectionVideoCarouselManyWhereInput>;
};


export type MutationUnpublishManySectionsAccordionsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<SectionsAccordionManyWhereInput>;
};


export type MutationUnpublishManySectionsAccordionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<SectionsAccordionManyWhereInput>;
};


export type MutationUnpublishManySocialMediaCtaLargesArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<SocialMediaCtaLargeManyWhereInput>;
};


export type MutationUnpublishManySocialMediaCtaLargesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<SocialMediaCtaLargeManyWhereInput>;
};


export type MutationUnpublishManyWebsiteConfigsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<WebsiteConfigManyWhereInput>;
};


export type MutationUnpublishManyWebsiteConfigsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<WebsiteConfigManyWhereInput>;
};


export type MutationUnpublishModulePromoBannerArgs = {
  from?: Array<Stage>;
  where: ModulePromoBannerWhereUniqueInput;
};


export type MutationUnpublishMultiCollectionSliderArgs = {
  from?: Array<Stage>;
  where: MultiCollectionSliderWhereUniqueInput;
};


export type MutationUnpublishOfferTilesArgs = {
  from?: Array<Stage>;
  where: OfferTilesWhereUniqueInput;
};


export type MutationUnpublishPageBuyingGuideArgs = {
  from?: Array<Stage>;
  where: PageBuyingGuideWhereUniqueInput;
};


export type MutationUnpublishProductBenefitsGridArgs = {
  from?: Array<Stage>;
  where: ProductBenefitsGridWhereUniqueInput;
};


export type MutationUnpublishProductHowToArgs = {
  from?: Array<Stage>;
  where: ProductHowToWhereUniqueInput;
};


export type MutationUnpublishProductPageArgs = {
  from?: Array<Stage>;
  where: ProductPageWhereUniqueInput;
};


export type MutationUnpublishPropositionArgs = {
  from?: Array<Stage>;
  where: PropositionWhereUniqueInput;
};


export type MutationUnpublishSectionAccountSignupCtaArgs = {
  from?: Array<Stage>;
  where: SectionAccountSignupCtaWhereUniqueInput;
};


export type MutationUnpublishSectionBlogListingArgs = {
  from?: Array<Stage>;
  where: SectionBlogListingWhereUniqueInput;
};


export type MutationUnpublishSectionCollectionCarouselArgs = {
  from?: Array<Stage>;
  where: SectionCollectionCarouselWhereUniqueInput;
};


export type MutationUnpublishSectionCollectionDropDownArgs = {
  from?: Array<Stage>;
  where: SectionCollectionDropDownWhereUniqueInput;
};


export type MutationUnpublishSectionCollectionFeatureLargeArgs = {
  from?: Array<Stage>;
  where: SectionCollectionFeatureLargeWhereUniqueInput;
};


export type MutationUnpublishSectionCollectionMainArgs = {
  from?: Array<Stage>;
  where: SectionCollectionMainWhereUniqueInput;
};


export type MutationUnpublishSectionCollectionSubcategoryLinkArgs = {
  from?: Array<Stage>;
  where: SectionCollectionSubcategoryLinkWhereUniqueInput;
};


export type MutationUnpublishSectionCtaButtonArgs = {
  from?: Array<Stage>;
  where: SectionCtaButtonWhereUniqueInput;
};


export type MutationUnpublishSectionFullWidthImageArgs = {
  from?: Array<Stage>;
  where: SectionFullWidthImageWhereUniqueInput;
};


export type MutationUnpublishSectionImageAndTextGridArgs = {
  from?: Array<Stage>;
  where: SectionImageAndTextGridWhereUniqueInput;
};


export type MutationUnpublishSectionImageTextOverlayArgs = {
  from?: Array<Stage>;
  where: SectionImageTextOverlayWhereUniqueInput;
};


export type MutationUnpublishSectionPreezieProductFinderArgs = {
  from?: Array<Stage>;
  where: SectionPreezieProductFinderWhereUniqueInput;
};


export type MutationUnpublishSectionProductMainArgs = {
  from?: Array<Stage>;
  where: SectionProductMainWhereUniqueInput;
};


export type MutationUnpublishSectionProductReviewArgs = {
  from?: Array<Stage>;
  where: SectionProductReviewWhereUniqueInput;
};


export type MutationUnpublishSectionProductSpotlightGridArgs = {
  from?: Array<Stage>;
  where: SectionProductSpotlightGridWhereUniqueInput;
};


export type MutationUnpublishSectionProductSpotlightLargeArgs = {
  from?: Array<Stage>;
  where: SectionProductSpotlightLargeWhereUniqueInput;
};


export type MutationUnpublishSectionRelatedProductArgs = {
  from?: Array<Stage>;
  where: SectionRelatedProductWhereUniqueInput;
};


export type MutationUnpublishSectionSalonServiceBlockArgs = {
  from?: Array<Stage>;
  where: SectionSalonServiceBlockWhereUniqueInput;
};


export type MutationUnpublishSectionSearchTermListArgs = {
  from?: Array<Stage>;
  where: SectionSearchTermListWhereUniqueInput;
};


export type MutationUnpublishSectionSeoTextArgs = {
  from?: Array<Stage>;
  where: SectionSeoTextWhereUniqueInput;
};


export type MutationUnpublishSectionSocialMediaCtaSmallArgs = {
  from?: Array<Stage>;
  where: SectionSocialMediaCtaSmallWhereUniqueInput;
};


export type MutationUnpublishSectionTextBlockArgs = {
  from?: Array<Stage>;
  where: SectionTextBlockWhereUniqueInput;
};


export type MutationUnpublishSectionVideoCarouselArgs = {
  from?: Array<Stage>;
  where: SectionVideoCarouselWhereUniqueInput;
};


export type MutationUnpublishSectionsAccordionArgs = {
  from?: Array<Stage>;
  where: SectionsAccordionWhereUniqueInput;
};


export type MutationUnpublishSocialMediaCtaLargeArgs = {
  from?: Array<Stage>;
  where: SocialMediaCtaLargeWhereUniqueInput;
};


export type MutationUnpublishWebsiteConfigArgs = {
  from?: Array<Stage>;
  where: WebsiteConfigWhereUniqueInput;
};


export type MutationUpdateAssetArgs = {
  data: AssetUpdateInput;
  where: AssetWhereUniqueInput;
};


export type MutationUpdateBlogArticleArgs = {
  data: BlogArticleUpdateInput;
  where: BlogArticleWhereUniqueInput;
};


export type MutationUpdateBlogAuthorArgs = {
  data: BlogAuthorUpdateInput;
  where: BlogAuthorWhereUniqueInput;
};


export type MutationUpdateBrandLogoGridArgs = {
  data: BrandLogoGridUpdateInput;
  where: BrandLogoGridWhereUniqueInput;
};


export type MutationUpdateBrandsBrandLogoArgs = {
  data: BrandsBrandLogoUpdateInput;
  where: BrandsBrandLogoWhereUniqueInput;
};


export type MutationUpdateCmsPageArgs = {
  data: CmsPageUpdateInput;
  where: CmsPageWhereUniqueInput;
};


export type MutationUpdateCollectionPageArgs = {
  data: CollectionPageUpdateInput;
  where: CollectionPageWhereUniqueInput;
};


export type MutationUpdateConfigCareerArgs = {
  data: ConfigCareerUpdateInput;
  where: ConfigCareerWhereUniqueInput;
};


export type MutationUpdateConfigSalonBookingArgs = {
  data: ConfigSalonBookingUpdateInput;
  where: ConfigSalonBookingWhereUniqueInput;
};


export type MutationUpdateConfigSalonMenuArgs = {
  data: ConfigSalonMenuUpdateInput;
  where: ConfigSalonMenuWhereUniqueInput;
};


export type MutationUpdateConfigSearchArgs = {
  data: ConfigSearchUpdateInput;
  where: ConfigSearchWhereUniqueInput;
};


export type MutationUpdateEditorialTextArgs = {
  data: EditorialTextUpdateInput;
  where: EditorialTextWhereUniqueInput;
};


export type MutationUpdateFeatureProductCarouselTabbedArgs = {
  data: FeatureProductCarouselTabbedUpdateInput;
  where: FeatureProductCarouselTabbedWhereUniqueInput;
};


export type MutationUpdateFooterConfigArgs = {
  data: FooterConfigUpdateInput;
  where: FooterConfigWhereUniqueInput;
};


export type MutationUpdateHeaderConfigArgs = {
  data: HeaderConfigUpdateInput;
  where: HeaderConfigWhereUniqueInput;
};


export type MutationUpdateHeroBannerArgs = {
  data: HeroBannerUpdateInput;
  where: HeroBannerWhereUniqueInput;
};


export type MutationUpdateJoinCtApanelArgs = {
  data: JoinCtApanelUpdateInput;
  where: JoinCtApanelWhereUniqueInput;
};


export type MutationUpdateManyAssetsArgs = {
  data: AssetUpdateManyInput;
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationUpdateManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: AssetUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetManyWhereInput>;
};


export type MutationUpdateManyBlogAuthorsArgs = {
  data: BlogAuthorUpdateManyInput;
  where?: InputMaybe<BlogAuthorManyWhereInput>;
};


export type MutationUpdateManyBlogAuthorsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: BlogAuthorUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogAuthorManyWhereInput>;
};


export type MutationUpdateManyBrandLogoGridsArgs = {
  data: BrandLogoGridUpdateManyInput;
  where?: InputMaybe<BrandLogoGridManyWhereInput>;
};


export type MutationUpdateManyBrandLogoGridsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: BrandLogoGridUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BrandLogoGridManyWhereInput>;
};


export type MutationUpdateManyBrandsBrandsLogosArgs = {
  data: BrandsBrandLogoUpdateManyInput;
  where?: InputMaybe<BrandsBrandLogoManyWhereInput>;
};


export type MutationUpdateManyBrandsBrandsLogosConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: BrandsBrandLogoUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BrandsBrandLogoManyWhereInput>;
};


export type MutationUpdateManyCmsPagesArgs = {
  data: CmsPageUpdateManyInput;
  where?: InputMaybe<CmsPageManyWhereInput>;
};


export type MutationUpdateManyCmsPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: CmsPageUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsPageManyWhereInput>;
};


export type MutationUpdateManyCollectionPagesArgs = {
  data: CollectionPageUpdateManyInput;
  where?: InputMaybe<CollectionPageManyWhereInput>;
};


export type MutationUpdateManyCollectionPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: CollectionPageUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CollectionPageManyWhereInput>;
};


export type MutationUpdateManyConfigCareersArgs = {
  data: ConfigCareerUpdateManyInput;
  where?: InputMaybe<ConfigCareerManyWhereInput>;
};


export type MutationUpdateManyConfigCareersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: ConfigCareerUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigCareerManyWhereInput>;
};


export type MutationUpdateManyConfigSalonBookingsArgs = {
  data: ConfigSalonBookingUpdateManyInput;
  where?: InputMaybe<ConfigSalonBookingManyWhereInput>;
};


export type MutationUpdateManyConfigSalonBookingsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: ConfigSalonBookingUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigSalonBookingManyWhereInput>;
};


export type MutationUpdateManyConfigSalonMenusArgs = {
  data: ConfigSalonMenuUpdateManyInput;
  where?: InputMaybe<ConfigSalonMenuManyWhereInput>;
};


export type MutationUpdateManyConfigSalonMenusConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: ConfigSalonMenuUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigSalonMenuManyWhereInput>;
};


export type MutationUpdateManyConfigSearchesArgs = {
  data: ConfigSearchUpdateManyInput;
  where?: InputMaybe<ConfigSearchManyWhereInput>;
};


export type MutationUpdateManyConfigSearchesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: ConfigSearchUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigSearchManyWhereInput>;
};


export type MutationUpdateManyEditorialTextsArgs = {
  data: EditorialTextUpdateManyInput;
  where?: InputMaybe<EditorialTextManyWhereInput>;
};


export type MutationUpdateManyEditorialTextsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: EditorialTextUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<EditorialTextManyWhereInput>;
};


export type MutationUpdateManyFeatureProductCarouselTabsArgs = {
  data: FeatureProductCarouselTabbedUpdateManyInput;
  where?: InputMaybe<FeatureProductCarouselTabbedManyWhereInput>;
};


export type MutationUpdateManyFeatureProductCarouselTabsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: FeatureProductCarouselTabbedUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<FeatureProductCarouselTabbedManyWhereInput>;
};


export type MutationUpdateManyFooterConfigsArgs = {
  data: FooterConfigUpdateManyInput;
  where?: InputMaybe<FooterConfigManyWhereInput>;
};


export type MutationUpdateManyFooterConfigsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: FooterConfigUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<FooterConfigManyWhereInput>;
};


export type MutationUpdateManyHeaderConfigsArgs = {
  data: HeaderConfigUpdateManyInput;
  where?: InputMaybe<HeaderConfigManyWhereInput>;
};


export type MutationUpdateManyHeaderConfigsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: HeaderConfigUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<HeaderConfigManyWhereInput>;
};


export type MutationUpdateManyHeroBannersArgs = {
  data: HeroBannerUpdateManyInput;
  where?: InputMaybe<HeroBannerManyWhereInput>;
};


export type MutationUpdateManyHeroBannersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: HeroBannerUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<HeroBannerManyWhereInput>;
};


export type MutationUpdateManyJointCtApanelsArgs = {
  data: JoinCtApanelUpdateManyInput;
  where?: InputMaybe<JoinCtApanelManyWhereInput>;
};


export type MutationUpdateManyJointCtApanelsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: JoinCtApanelUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<JoinCtApanelManyWhereInput>;
};


export type MutationUpdateManyModulePromoBannersArgs = {
  data: ModulePromoBannerUpdateManyInput;
  where?: InputMaybe<ModulePromoBannerManyWhereInput>;
};


export type MutationUpdateManyModulePromoBannersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: ModulePromoBannerUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ModulePromoBannerManyWhereInput>;
};


export type MutationUpdateManyMultiCollectionSlidersArgs = {
  data: MultiCollectionSliderUpdateManyInput;
  where?: InputMaybe<MultiCollectionSliderManyWhereInput>;
};


export type MutationUpdateManyMultiCollectionSlidersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: MultiCollectionSliderUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<MultiCollectionSliderManyWhereInput>;
};


export type MutationUpdateManyOfferTilessArgs = {
  data: OfferTilesUpdateManyInput;
  where?: InputMaybe<OfferTilesManyWhereInput>;
};


export type MutationUpdateManyOfferTilessConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: OfferTilesUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OfferTilesManyWhereInput>;
};


export type MutationUpdateManyPageBlogArticlesArgs = {
  data: BlogArticleUpdateManyInput;
  where?: InputMaybe<BlogArticleManyWhereInput>;
};


export type MutationUpdateManyPageBlogArticlesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: BlogArticleUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogArticleManyWhereInput>;
};


export type MutationUpdateManyPageBuyingGuidesArgs = {
  data: PageBuyingGuideUpdateManyInput;
  where?: InputMaybe<PageBuyingGuideManyWhereInput>;
};


export type MutationUpdateManyPageBuyingGuidesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: PageBuyingGuideUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PageBuyingGuideManyWhereInput>;
};


export type MutationUpdateManyProductBenefitsGridsArgs = {
  data: ProductBenefitsGridUpdateManyInput;
  where?: InputMaybe<ProductBenefitsGridManyWhereInput>;
};


export type MutationUpdateManyProductBenefitsGridsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: ProductBenefitsGridUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProductBenefitsGridManyWhereInput>;
};


export type MutationUpdateManyProductHowTosArgs = {
  data: ProductHowToUpdateManyInput;
  where?: InputMaybe<ProductHowToManyWhereInput>;
};


export type MutationUpdateManyProductHowTosConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: ProductHowToUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProductHowToManyWhereInput>;
};


export type MutationUpdateManyProductPagesArgs = {
  data: ProductPageUpdateManyInput;
  where?: InputMaybe<ProductPageManyWhereInput>;
};


export type MutationUpdateManyProductPagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: ProductPageUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProductPageManyWhereInput>;
};


export type MutationUpdateManyPropositionsArgs = {
  data: PropositionUpdateManyInput;
  where?: InputMaybe<PropositionManyWhereInput>;
};


export type MutationUpdateManyPropositionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: PropositionUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PropositionManyWhereInput>;
};


export type MutationUpdateManySectionAccountSignupCtasArgs = {
  data: SectionAccountSignupCtaUpdateManyInput;
  where?: InputMaybe<SectionAccountSignupCtaManyWhereInput>;
};


export type MutationUpdateManySectionAccountSignupCtasConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: SectionAccountSignupCtaUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionAccountSignupCtaManyWhereInput>;
};


export type MutationUpdateManySectionBlogListingsArgs = {
  data: SectionBlogListingUpdateManyInput;
  where?: InputMaybe<SectionBlogListingManyWhereInput>;
};


export type MutationUpdateManySectionBlogListingsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: SectionBlogListingUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionBlogListingManyWhereInput>;
};


export type MutationUpdateManySectionCollectionCarouselsArgs = {
  data: SectionCollectionCarouselUpdateManyInput;
  where?: InputMaybe<SectionCollectionCarouselManyWhereInput>;
};


export type MutationUpdateManySectionCollectionCarouselsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: SectionCollectionCarouselUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionCollectionCarouselManyWhereInput>;
};


export type MutationUpdateManySectionCollectionDropDownsArgs = {
  data: SectionCollectionDropDownUpdateManyInput;
  where?: InputMaybe<SectionCollectionDropDownManyWhereInput>;
};


export type MutationUpdateManySectionCollectionDropDownsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: SectionCollectionDropDownUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionCollectionDropDownManyWhereInput>;
};


export type MutationUpdateManySectionCollectionFeatureLargesArgs = {
  data: SectionCollectionFeatureLargeUpdateManyInput;
  where?: InputMaybe<SectionCollectionFeatureLargeManyWhereInput>;
};


export type MutationUpdateManySectionCollectionFeatureLargesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: SectionCollectionFeatureLargeUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionCollectionFeatureLargeManyWhereInput>;
};


export type MutationUpdateManySectionCollectionMainsArgs = {
  data: SectionCollectionMainUpdateManyInput;
  where?: InputMaybe<SectionCollectionMainManyWhereInput>;
};


export type MutationUpdateManySectionCollectionMainsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: SectionCollectionMainUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionCollectionMainManyWhereInput>;
};


export type MutationUpdateManySectionCollectionSubcategoryLinksArgs = {
  data: SectionCollectionSubcategoryLinkUpdateManyInput;
  where?: InputMaybe<SectionCollectionSubcategoryLinkManyWhereInput>;
};


export type MutationUpdateManySectionCollectionSubcategoryLinksConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: SectionCollectionSubcategoryLinkUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionCollectionSubcategoryLinkManyWhereInput>;
};


export type MutationUpdateManySectionCtaButtonsArgs = {
  data: SectionCtaButtonUpdateManyInput;
  where?: InputMaybe<SectionCtaButtonManyWhereInput>;
};


export type MutationUpdateManySectionCtaButtonsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: SectionCtaButtonUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionCtaButtonManyWhereInput>;
};


export type MutationUpdateManySectionFullWidthImagesArgs = {
  data: SectionFullWidthImageUpdateManyInput;
  where?: InputMaybe<SectionFullWidthImageManyWhereInput>;
};


export type MutationUpdateManySectionFullWidthImagesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: SectionFullWidthImageUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionFullWidthImageManyWhereInput>;
};


export type MutationUpdateManySectionImageAndTextGridsArgs = {
  data: SectionImageAndTextGridUpdateManyInput;
  where?: InputMaybe<SectionImageAndTextGridManyWhereInput>;
};


export type MutationUpdateManySectionImageAndTextGridsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: SectionImageAndTextGridUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionImageAndTextGridManyWhereInput>;
};


export type MutationUpdateManySectionImageTextOverlaysArgs = {
  data: SectionImageTextOverlayUpdateManyInput;
  where?: InputMaybe<SectionImageTextOverlayManyWhereInput>;
};


export type MutationUpdateManySectionImageTextOverlaysConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: SectionImageTextOverlayUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionImageTextOverlayManyWhereInput>;
};


export type MutationUpdateManySectionPreezieProductFindersArgs = {
  data: SectionPreezieProductFinderUpdateManyInput;
  where?: InputMaybe<SectionPreezieProductFinderManyWhereInput>;
};


export type MutationUpdateManySectionPreezieProductFindersConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: SectionPreezieProductFinderUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionPreezieProductFinderManyWhereInput>;
};


export type MutationUpdateManySectionProductMainsArgs = {
  data: SectionProductMainUpdateManyInput;
  where?: InputMaybe<SectionProductMainManyWhereInput>;
};


export type MutationUpdateManySectionProductMainsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: SectionProductMainUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionProductMainManyWhereInput>;
};


export type MutationUpdateManySectionProductReviewsArgs = {
  data: SectionProductReviewUpdateManyInput;
  where?: InputMaybe<SectionProductReviewManyWhereInput>;
};


export type MutationUpdateManySectionProductReviewsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: SectionProductReviewUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionProductReviewManyWhereInput>;
};


export type MutationUpdateManySectionProductSpotlightGridsArgs = {
  data: SectionProductSpotlightGridUpdateManyInput;
  where?: InputMaybe<SectionProductSpotlightGridManyWhereInput>;
};


export type MutationUpdateManySectionProductSpotlightGridsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: SectionProductSpotlightGridUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionProductSpotlightGridManyWhereInput>;
};


export type MutationUpdateManySectionProductSpotlightLargesArgs = {
  data: SectionProductSpotlightLargeUpdateManyInput;
  where?: InputMaybe<SectionProductSpotlightLargeManyWhereInput>;
};


export type MutationUpdateManySectionProductSpotlightLargesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: SectionProductSpotlightLargeUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionProductSpotlightLargeManyWhereInput>;
};


export type MutationUpdateManySectionRelatedProductsArgs = {
  data: SectionRelatedProductUpdateManyInput;
  where?: InputMaybe<SectionRelatedProductManyWhereInput>;
};


export type MutationUpdateManySectionRelatedProductsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: SectionRelatedProductUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionRelatedProductManyWhereInput>;
};


export type MutationUpdateManySectionSalonServiceBlocksArgs = {
  data: SectionSalonServiceBlockUpdateManyInput;
  where?: InputMaybe<SectionSalonServiceBlockManyWhereInput>;
};


export type MutationUpdateManySectionSalonServiceBlocksConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: SectionSalonServiceBlockUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionSalonServiceBlockManyWhereInput>;
};


export type MutationUpdateManySectionSearchTermListsArgs = {
  data: SectionSearchTermListUpdateManyInput;
  where?: InputMaybe<SectionSearchTermListManyWhereInput>;
};


export type MutationUpdateManySectionSearchTermListsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: SectionSearchTermListUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionSearchTermListManyWhereInput>;
};


export type MutationUpdateManySectionSeoTextsArgs = {
  data: SectionSeoTextUpdateManyInput;
  where?: InputMaybe<SectionSeoTextManyWhereInput>;
};


export type MutationUpdateManySectionSeoTextsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: SectionSeoTextUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionSeoTextManyWhereInput>;
};


export type MutationUpdateManySectionSocialMediaCtaSmallsArgs = {
  data: SectionSocialMediaCtaSmallUpdateManyInput;
  where?: InputMaybe<SectionSocialMediaCtaSmallManyWhereInput>;
};


export type MutationUpdateManySectionSocialMediaCtaSmallsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: SectionSocialMediaCtaSmallUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionSocialMediaCtaSmallManyWhereInput>;
};


export type MutationUpdateManySectionTextBlocksArgs = {
  data: SectionTextBlockUpdateManyInput;
  where?: InputMaybe<SectionTextBlockManyWhereInput>;
};


export type MutationUpdateManySectionTextBlocksConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: SectionTextBlockUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionTextBlockManyWhereInput>;
};


export type MutationUpdateManySectionVideoCarouselsArgs = {
  data: SectionVideoCarouselUpdateManyInput;
  where?: InputMaybe<SectionVideoCarouselManyWhereInput>;
};


export type MutationUpdateManySectionVideoCarouselsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: SectionVideoCarouselUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionVideoCarouselManyWhereInput>;
};


export type MutationUpdateManySectionsAccordionsArgs = {
  data: SectionsAccordionUpdateManyInput;
  where?: InputMaybe<SectionsAccordionManyWhereInput>;
};


export type MutationUpdateManySectionsAccordionsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: SectionsAccordionUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SectionsAccordionManyWhereInput>;
};


export type MutationUpdateManySocialMediaCtaLargesArgs = {
  data: SocialMediaCtaLargeUpdateManyInput;
  where?: InputMaybe<SocialMediaCtaLargeManyWhereInput>;
};


export type MutationUpdateManySocialMediaCtaLargesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: SocialMediaCtaLargeUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SocialMediaCtaLargeManyWhereInput>;
};


export type MutationUpdateManyWebsiteConfigsArgs = {
  data: WebsiteConfigUpdateManyInput;
  where?: InputMaybe<WebsiteConfigManyWhereInput>;
};


export type MutationUpdateManyWebsiteConfigsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: WebsiteConfigUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WebsiteConfigManyWhereInput>;
};


export type MutationUpdateModulePromoBannerArgs = {
  data: ModulePromoBannerUpdateInput;
  where: ModulePromoBannerWhereUniqueInput;
};


export type MutationUpdateMultiCollectionSliderArgs = {
  data: MultiCollectionSliderUpdateInput;
  where: MultiCollectionSliderWhereUniqueInput;
};


export type MutationUpdateOfferTilesArgs = {
  data: OfferTilesUpdateInput;
  where: OfferTilesWhereUniqueInput;
};


export type MutationUpdatePageBuyingGuideArgs = {
  data: PageBuyingGuideUpdateInput;
  where: PageBuyingGuideWhereUniqueInput;
};


export type MutationUpdateProductBenefitsGridArgs = {
  data: ProductBenefitsGridUpdateInput;
  where: ProductBenefitsGridWhereUniqueInput;
};


export type MutationUpdateProductHowToArgs = {
  data: ProductHowToUpdateInput;
  where: ProductHowToWhereUniqueInput;
};


export type MutationUpdateProductPageArgs = {
  data: ProductPageUpdateInput;
  where: ProductPageWhereUniqueInput;
};


export type MutationUpdatePropositionArgs = {
  data: PropositionUpdateInput;
  where: PropositionWhereUniqueInput;
};


export type MutationUpdateScheduledReleaseArgs = {
  data: ScheduledReleaseUpdateInput;
  where: ScheduledReleaseWhereUniqueInput;
};


export type MutationUpdateSectionAccountSignupCtaArgs = {
  data: SectionAccountSignupCtaUpdateInput;
  where: SectionAccountSignupCtaWhereUniqueInput;
};


export type MutationUpdateSectionBlogListingArgs = {
  data: SectionBlogListingUpdateInput;
  where: SectionBlogListingWhereUniqueInput;
};


export type MutationUpdateSectionCollectionCarouselArgs = {
  data: SectionCollectionCarouselUpdateInput;
  where: SectionCollectionCarouselWhereUniqueInput;
};


export type MutationUpdateSectionCollectionDropDownArgs = {
  data: SectionCollectionDropDownUpdateInput;
  where: SectionCollectionDropDownWhereUniqueInput;
};


export type MutationUpdateSectionCollectionFeatureLargeArgs = {
  data: SectionCollectionFeatureLargeUpdateInput;
  where: SectionCollectionFeatureLargeWhereUniqueInput;
};


export type MutationUpdateSectionCollectionMainArgs = {
  data: SectionCollectionMainUpdateInput;
  where: SectionCollectionMainWhereUniqueInput;
};


export type MutationUpdateSectionCollectionSubcategoryLinkArgs = {
  data: SectionCollectionSubcategoryLinkUpdateInput;
  where: SectionCollectionSubcategoryLinkWhereUniqueInput;
};


export type MutationUpdateSectionCtaButtonArgs = {
  data: SectionCtaButtonUpdateInput;
  where: SectionCtaButtonWhereUniqueInput;
};


export type MutationUpdateSectionFullWidthImageArgs = {
  data: SectionFullWidthImageUpdateInput;
  where: SectionFullWidthImageWhereUniqueInput;
};


export type MutationUpdateSectionImageAndTextGridArgs = {
  data: SectionImageAndTextGridUpdateInput;
  where: SectionImageAndTextGridWhereUniqueInput;
};


export type MutationUpdateSectionImageTextOverlayArgs = {
  data: SectionImageTextOverlayUpdateInput;
  where: SectionImageTextOverlayWhereUniqueInput;
};


export type MutationUpdateSectionPreezieProductFinderArgs = {
  data: SectionPreezieProductFinderUpdateInput;
  where: SectionPreezieProductFinderWhereUniqueInput;
};


export type MutationUpdateSectionProductMainArgs = {
  data: SectionProductMainUpdateInput;
  where: SectionProductMainWhereUniqueInput;
};


export type MutationUpdateSectionProductReviewArgs = {
  data: SectionProductReviewUpdateInput;
  where: SectionProductReviewWhereUniqueInput;
};


export type MutationUpdateSectionProductSpotlightGridArgs = {
  data: SectionProductSpotlightGridUpdateInput;
  where: SectionProductSpotlightGridWhereUniqueInput;
};


export type MutationUpdateSectionProductSpotlightLargeArgs = {
  data: SectionProductSpotlightLargeUpdateInput;
  where: SectionProductSpotlightLargeWhereUniqueInput;
};


export type MutationUpdateSectionRelatedProductArgs = {
  data: SectionRelatedProductUpdateInput;
  where: SectionRelatedProductWhereUniqueInput;
};


export type MutationUpdateSectionSalonServiceBlockArgs = {
  data: SectionSalonServiceBlockUpdateInput;
  where: SectionSalonServiceBlockWhereUniqueInput;
};


export type MutationUpdateSectionSearchTermListArgs = {
  data: SectionSearchTermListUpdateInput;
  where: SectionSearchTermListWhereUniqueInput;
};


export type MutationUpdateSectionSeoTextArgs = {
  data: SectionSeoTextUpdateInput;
  where: SectionSeoTextWhereUniqueInput;
};


export type MutationUpdateSectionSocialMediaCtaSmallArgs = {
  data: SectionSocialMediaCtaSmallUpdateInput;
  where: SectionSocialMediaCtaSmallWhereUniqueInput;
};


export type MutationUpdateSectionTextBlockArgs = {
  data: SectionTextBlockUpdateInput;
  where: SectionTextBlockWhereUniqueInput;
};


export type MutationUpdateSectionVideoCarouselArgs = {
  data: SectionVideoCarouselUpdateInput;
  where: SectionVideoCarouselWhereUniqueInput;
};


export type MutationUpdateSectionsAccordionArgs = {
  data: SectionsAccordionUpdateInput;
  where: SectionsAccordionWhereUniqueInput;
};


export type MutationUpdateSocialMediaCtaLargeArgs = {
  data: SocialMediaCtaLargeUpdateInput;
  where: SocialMediaCtaLargeWhereUniqueInput;
};


export type MutationUpdateWebsiteConfigArgs = {
  data: WebsiteConfigUpdateInput;
  where: WebsiteConfigWhereUniqueInput;
};


export type MutationUpsertAssetArgs = {
  upsert: AssetUpsertInput;
  where: AssetWhereUniqueInput;
};


export type MutationUpsertBlogArticleArgs = {
  upsert: BlogArticleUpsertInput;
  where: BlogArticleWhereUniqueInput;
};


export type MutationUpsertBlogAuthorArgs = {
  upsert: BlogAuthorUpsertInput;
  where: BlogAuthorWhereUniqueInput;
};


export type MutationUpsertBrandLogoGridArgs = {
  upsert: BrandLogoGridUpsertInput;
  where: BrandLogoGridWhereUniqueInput;
};


export type MutationUpsertBrandsBrandLogoArgs = {
  upsert: BrandsBrandLogoUpsertInput;
  where: BrandsBrandLogoWhereUniqueInput;
};


export type MutationUpsertCmsPageArgs = {
  upsert: CmsPageUpsertInput;
  where: CmsPageWhereUniqueInput;
};


export type MutationUpsertCollectionPageArgs = {
  upsert: CollectionPageUpsertInput;
  where: CollectionPageWhereUniqueInput;
};


export type MutationUpsertConfigCareerArgs = {
  upsert: ConfigCareerUpsertInput;
  where: ConfigCareerWhereUniqueInput;
};


export type MutationUpsertConfigSalonBookingArgs = {
  upsert: ConfigSalonBookingUpsertInput;
  where: ConfigSalonBookingWhereUniqueInput;
};


export type MutationUpsertConfigSalonMenuArgs = {
  upsert: ConfigSalonMenuUpsertInput;
  where: ConfigSalonMenuWhereUniqueInput;
};


export type MutationUpsertConfigSearchArgs = {
  upsert: ConfigSearchUpsertInput;
  where: ConfigSearchWhereUniqueInput;
};


export type MutationUpsertEditorialTextArgs = {
  upsert: EditorialTextUpsertInput;
  where: EditorialTextWhereUniqueInput;
};


export type MutationUpsertFeatureProductCarouselTabbedArgs = {
  upsert: FeatureProductCarouselTabbedUpsertInput;
  where: FeatureProductCarouselTabbedWhereUniqueInput;
};


export type MutationUpsertFooterConfigArgs = {
  upsert: FooterConfigUpsertInput;
  where: FooterConfigWhereUniqueInput;
};


export type MutationUpsertHeaderConfigArgs = {
  upsert: HeaderConfigUpsertInput;
  where: HeaderConfigWhereUniqueInput;
};


export type MutationUpsertHeroBannerArgs = {
  upsert: HeroBannerUpsertInput;
  where: HeroBannerWhereUniqueInput;
};


export type MutationUpsertJoinCtApanelArgs = {
  upsert: JoinCtApanelUpsertInput;
  where: JoinCtApanelWhereUniqueInput;
};


export type MutationUpsertModulePromoBannerArgs = {
  upsert: ModulePromoBannerUpsertInput;
  where: ModulePromoBannerWhereUniqueInput;
};


export type MutationUpsertMultiCollectionSliderArgs = {
  upsert: MultiCollectionSliderUpsertInput;
  where: MultiCollectionSliderWhereUniqueInput;
};


export type MutationUpsertOfferTilesArgs = {
  upsert: OfferTilesUpsertInput;
  where: OfferTilesWhereUniqueInput;
};


export type MutationUpsertPageBuyingGuideArgs = {
  upsert: PageBuyingGuideUpsertInput;
  where: PageBuyingGuideWhereUniqueInput;
};


export type MutationUpsertProductBenefitsGridArgs = {
  upsert: ProductBenefitsGridUpsertInput;
  where: ProductBenefitsGridWhereUniqueInput;
};


export type MutationUpsertProductHowToArgs = {
  upsert: ProductHowToUpsertInput;
  where: ProductHowToWhereUniqueInput;
};


export type MutationUpsertProductPageArgs = {
  upsert: ProductPageUpsertInput;
  where: ProductPageWhereUniqueInput;
};


export type MutationUpsertPropositionArgs = {
  upsert: PropositionUpsertInput;
  where: PropositionWhereUniqueInput;
};


export type MutationUpsertSectionAccountSignupCtaArgs = {
  upsert: SectionAccountSignupCtaUpsertInput;
  where: SectionAccountSignupCtaWhereUniqueInput;
};


export type MutationUpsertSectionBlogListingArgs = {
  upsert: SectionBlogListingUpsertInput;
  where: SectionBlogListingWhereUniqueInput;
};


export type MutationUpsertSectionCollectionCarouselArgs = {
  upsert: SectionCollectionCarouselUpsertInput;
  where: SectionCollectionCarouselWhereUniqueInput;
};


export type MutationUpsertSectionCollectionDropDownArgs = {
  upsert: SectionCollectionDropDownUpsertInput;
  where: SectionCollectionDropDownWhereUniqueInput;
};


export type MutationUpsertSectionCollectionFeatureLargeArgs = {
  upsert: SectionCollectionFeatureLargeUpsertInput;
  where: SectionCollectionFeatureLargeWhereUniqueInput;
};


export type MutationUpsertSectionCollectionMainArgs = {
  upsert: SectionCollectionMainUpsertInput;
  where: SectionCollectionMainWhereUniqueInput;
};


export type MutationUpsertSectionCollectionSubcategoryLinkArgs = {
  upsert: SectionCollectionSubcategoryLinkUpsertInput;
  where: SectionCollectionSubcategoryLinkWhereUniqueInput;
};


export type MutationUpsertSectionCtaButtonArgs = {
  upsert: SectionCtaButtonUpsertInput;
  where: SectionCtaButtonWhereUniqueInput;
};


export type MutationUpsertSectionFullWidthImageArgs = {
  upsert: SectionFullWidthImageUpsertInput;
  where: SectionFullWidthImageWhereUniqueInput;
};


export type MutationUpsertSectionImageAndTextGridArgs = {
  upsert: SectionImageAndTextGridUpsertInput;
  where: SectionImageAndTextGridWhereUniqueInput;
};


export type MutationUpsertSectionImageTextOverlayArgs = {
  upsert: SectionImageTextOverlayUpsertInput;
  where: SectionImageTextOverlayWhereUniqueInput;
};


export type MutationUpsertSectionPreezieProductFinderArgs = {
  upsert: SectionPreezieProductFinderUpsertInput;
  where: SectionPreezieProductFinderWhereUniqueInput;
};


export type MutationUpsertSectionProductMainArgs = {
  upsert: SectionProductMainUpsertInput;
  where: SectionProductMainWhereUniqueInput;
};


export type MutationUpsertSectionProductReviewArgs = {
  upsert: SectionProductReviewUpsertInput;
  where: SectionProductReviewWhereUniqueInput;
};


export type MutationUpsertSectionProductSpotlightGridArgs = {
  upsert: SectionProductSpotlightGridUpsertInput;
  where: SectionProductSpotlightGridWhereUniqueInput;
};


export type MutationUpsertSectionProductSpotlightLargeArgs = {
  upsert: SectionProductSpotlightLargeUpsertInput;
  where: SectionProductSpotlightLargeWhereUniqueInput;
};


export type MutationUpsertSectionRelatedProductArgs = {
  upsert: SectionRelatedProductUpsertInput;
  where: SectionRelatedProductWhereUniqueInput;
};


export type MutationUpsertSectionSalonServiceBlockArgs = {
  upsert: SectionSalonServiceBlockUpsertInput;
  where: SectionSalonServiceBlockWhereUniqueInput;
};


export type MutationUpsertSectionSearchTermListArgs = {
  upsert: SectionSearchTermListUpsertInput;
  where: SectionSearchTermListWhereUniqueInput;
};


export type MutationUpsertSectionSeoTextArgs = {
  upsert: SectionSeoTextUpsertInput;
  where: SectionSeoTextWhereUniqueInput;
};


export type MutationUpsertSectionSocialMediaCtaSmallArgs = {
  upsert: SectionSocialMediaCtaSmallUpsertInput;
  where: SectionSocialMediaCtaSmallWhereUniqueInput;
};


export type MutationUpsertSectionTextBlockArgs = {
  upsert: SectionTextBlockUpsertInput;
  where: SectionTextBlockWhereUniqueInput;
};


export type MutationUpsertSectionVideoCarouselArgs = {
  upsert: SectionVideoCarouselUpsertInput;
  where: SectionVideoCarouselWhereUniqueInput;
};


export type MutationUpsertSectionsAccordionArgs = {
  upsert: SectionsAccordionUpsertInput;
  where: SectionsAccordionWhereUniqueInput;
};


export type MutationUpsertSocialMediaCtaLargeArgs = {
  upsert: SocialMediaCtaLargeUpsertInput;
  where: SocialMediaCtaLargeWhereUniqueInput;
};


export type MutationUpsertWebsiteConfigArgs = {
  upsert: WebsiteConfigUpsertInput;
  where: WebsiteConfigWhereUniqueInput;
};

/** An object with an ID */
export type Node = {
  /** The id of the object. */
  id: Scalars['ID'];
  /** The Stage of an object */
  stage: Stage;
};

export type OfferItem = {
  __typename?: 'OfferItem';
  buttonText?: Maybe<Scalars['String']>;
  heading?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  image?: Maybe<Asset>;
  /** System stage field */
  stage: Stage;
  topLeftBoxText?: Maybe<Scalars['String']>;
  url: Scalars['String'];
};


export type OfferItemImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type OfferItemConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: OfferItemWhereUniqueInput;
};

/** A connection to a list of items. */
export type OfferItemConnection = {
  __typename?: 'OfferItemConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<OfferItemEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type OfferItemCreateInput = {
  buttonText?: InputMaybe<Scalars['String']>;
  heading?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<AssetCreateOneInlineInput>;
  topLeftBoxText?: InputMaybe<Scalars['String']>;
  url: Scalars['String'];
};

export type OfferItemCreateManyInlineInput = {
  /** Create and connect multiple existing OfferItem documents */
  create?: InputMaybe<Array<OfferItemCreateInput>>;
};

export type OfferItemCreateOneInlineInput = {
  /** Create and connect one OfferItem document */
  create?: InputMaybe<OfferItemCreateInput>;
};

export type OfferItemCreateWithPositionInput = {
  /** Document to create */
  data: OfferItemCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type OfferItemEdge = {
  __typename?: 'OfferItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: OfferItem;
};

/** Identifies documents */
export type OfferItemManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<OfferItemWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<OfferItemWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<OfferItemWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  buttonText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  buttonText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  buttonText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  buttonText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  buttonText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  buttonText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  buttonText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  buttonText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  buttonText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  buttonText_starts_with?: InputMaybe<Scalars['String']>;
  heading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  heading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  heading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  heading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  heading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  heading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  heading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  heading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  heading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  heading_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
  topLeftBoxText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  topLeftBoxText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  topLeftBoxText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  topLeftBoxText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  topLeftBoxText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  topLeftBoxText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  topLeftBoxText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  topLeftBoxText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  topLeftBoxText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  topLeftBoxText_starts_with?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  url_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  url_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  url_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  url_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  url_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  url_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  url_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  url_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  url_starts_with?: InputMaybe<Scalars['String']>;
};

export enum OfferItemOrderByInput {
  ButtonTextAsc = 'buttonText_ASC',
  ButtonTextDesc = 'buttonText_DESC',
  HeadingAsc = 'heading_ASC',
  HeadingDesc = 'heading_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  TopLeftBoxTextAsc = 'topLeftBoxText_ASC',
  TopLeftBoxTextDesc = 'topLeftBoxText_DESC',
  UrlAsc = 'url_ASC',
  UrlDesc = 'url_DESC'
}

export type OfferItemParent = OfferTiles;

export type OfferItemParentConnectInput = {
  OfferTiles?: InputMaybe<OfferTilesConnectInput>;
};

export type OfferItemParentCreateInput = {
  OfferTiles?: InputMaybe<OfferTilesCreateInput>;
};

export type OfferItemParentCreateManyInlineInput = {
  /** Connect multiple existing OfferItemParent documents */
  connect?: InputMaybe<Array<OfferItemParentWhereUniqueInput>>;
  /** Create and connect multiple existing OfferItemParent documents */
  create?: InputMaybe<Array<OfferItemParentCreateInput>>;
};

export type OfferItemParentCreateOneInlineInput = {
  /** Connect one existing OfferItemParent document */
  connect?: InputMaybe<OfferItemParentWhereUniqueInput>;
  /** Create and connect one OfferItemParent document */
  create?: InputMaybe<OfferItemParentCreateInput>;
};

export type OfferItemParentUpdateInput = {
  OfferTiles?: InputMaybe<OfferTilesUpdateInput>;
};

export type OfferItemParentUpdateManyInlineInput = {
  /** Connect multiple existing OfferItemParent documents */
  connect?: InputMaybe<Array<OfferItemParentConnectInput>>;
  /** Create and connect multiple OfferItemParent documents */
  create?: InputMaybe<Array<OfferItemParentCreateInput>>;
  /** Delete multiple OfferItemParent documents */
  delete?: InputMaybe<Array<OfferItemParentWhereUniqueInput>>;
  /** Disconnect multiple OfferItemParent documents */
  disconnect?: InputMaybe<Array<OfferItemParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing OfferItemParent documents */
  set?: InputMaybe<Array<OfferItemParentWhereUniqueInput>>;
  /** Update multiple OfferItemParent documents */
  update?: InputMaybe<Array<OfferItemParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple OfferItemParent documents */
  upsert?: InputMaybe<Array<OfferItemParentUpsertWithNestedWhereUniqueInput>>;
};

export type OfferItemParentUpdateManyWithNestedWhereInput = {
  OfferTiles?: InputMaybe<OfferTilesUpdateManyWithNestedWhereInput>;
};

export type OfferItemParentUpdateOneInlineInput = {
  /** Connect existing OfferItemParent document */
  connect?: InputMaybe<OfferItemParentWhereUniqueInput>;
  /** Create and connect one OfferItemParent document */
  create?: InputMaybe<OfferItemParentCreateInput>;
  /** Delete currently connected OfferItemParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected OfferItemParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single OfferItemParent document */
  update?: InputMaybe<OfferItemParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single OfferItemParent document */
  upsert?: InputMaybe<OfferItemParentUpsertWithNestedWhereUniqueInput>;
};

export type OfferItemParentUpdateWithNestedWhereUniqueInput = {
  OfferTiles?: InputMaybe<OfferTilesUpdateWithNestedWhereUniqueInput>;
};

export type OfferItemParentUpsertWithNestedWhereUniqueInput = {
  OfferTiles?: InputMaybe<OfferTilesUpsertWithNestedWhereUniqueInput>;
};

export type OfferItemParentWhereInput = {
  OfferTiles?: InputMaybe<OfferTilesWhereInput>;
};

export type OfferItemParentWhereUniqueInput = {
  OfferTiles?: InputMaybe<OfferTilesWhereUniqueInput>;
};

export type OfferItemUpdateInput = {
  buttonText?: InputMaybe<Scalars['String']>;
  heading?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<AssetUpdateOneInlineInput>;
  topLeftBoxText?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
};

export type OfferItemUpdateManyInlineInput = {
  /** Create and connect multiple OfferItem component instances */
  create?: InputMaybe<Array<OfferItemCreateWithPositionInput>>;
  /** Delete multiple OfferItem documents */
  delete?: InputMaybe<Array<OfferItemWhereUniqueInput>>;
  /** Update multiple OfferItem component instances */
  update?: InputMaybe<Array<OfferItemUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple OfferItem component instances */
  upsert?: InputMaybe<Array<OfferItemUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type OfferItemUpdateManyInput = {
  buttonText?: InputMaybe<Scalars['String']>;
  heading?: InputMaybe<Scalars['String']>;
  topLeftBoxText?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
};

export type OfferItemUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: OfferItemUpdateManyInput;
  /** Document search */
  where: OfferItemWhereInput;
};

export type OfferItemUpdateOneInlineInput = {
  /** Create and connect one OfferItem document */
  create?: InputMaybe<OfferItemCreateInput>;
  /** Delete currently connected OfferItem document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single OfferItem document */
  update?: InputMaybe<OfferItemUpdateWithNestedWhereUniqueInput>;
  /** Upsert single OfferItem document */
  upsert?: InputMaybe<OfferItemUpsertWithNestedWhereUniqueInput>;
};

export type OfferItemUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<OfferItemUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: OfferItemWhereUniqueInput;
};

export type OfferItemUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: OfferItemUpdateInput;
  /** Unique document search */
  where: OfferItemWhereUniqueInput;
};

export type OfferItemUpsertInput = {
  /** Create document if it didn't exist */
  create: OfferItemCreateInput;
  /** Update document if it exists */
  update: OfferItemUpdateInput;
};

export type OfferItemUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<OfferItemUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: OfferItemWhereUniqueInput;
};

export type OfferItemUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: OfferItemUpsertInput;
  /** Unique document search */
  where: OfferItemWhereUniqueInput;
};

/** Identifies documents */
export type OfferItemWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<OfferItemWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<OfferItemWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<OfferItemWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  buttonText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  buttonText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  buttonText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  buttonText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  buttonText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  buttonText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  buttonText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  buttonText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  buttonText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  buttonText_starts_with?: InputMaybe<Scalars['String']>;
  heading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  heading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  heading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  heading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  heading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  heading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  heading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  heading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  heading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  heading_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
  topLeftBoxText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  topLeftBoxText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  topLeftBoxText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  topLeftBoxText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  topLeftBoxText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  topLeftBoxText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  topLeftBoxText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  topLeftBoxText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  topLeftBoxText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  topLeftBoxText_starts_with?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  url_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  url_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  url_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  url_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  url_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  url_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  url_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  url_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  url_starts_with?: InputMaybe<Scalars['String']>;
};

/** References OfferItem record uniquely */
export type OfferItemWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type OfferTiles = Node & {
  __typename?: 'OfferTiles';
  collectionPages: Array<CollectionPage>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  cta?: Maybe<Cta>;
  /** Get the document in other stages */
  documentInStages: Array<OfferTiles>;
  fullWidthTemplates: Array<CmsPage>;
  /** List of OfferTiles versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  offerItems: Array<OfferItem>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type OfferTilesCollectionPagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CollectionPageWhereInput>;
};


export type OfferTilesCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type OfferTilesCtaArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type OfferTilesDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type OfferTilesFullWidthTemplatesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsPageWhereInput>;
};


export type OfferTilesHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type OfferTilesOfferItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<OfferItemOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<OfferItemWhereInput>;
};


export type OfferTilesPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type OfferTilesScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type OfferTilesUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type OfferTilesConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: OfferTilesWhereUniqueInput;
};

/** A connection to a list of items. */
export type OfferTilesConnection = {
  __typename?: 'OfferTilesConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<OfferTilesEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type OfferTilesCreateInput = {
  collectionPages?: InputMaybe<CollectionPageCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  cta?: InputMaybe<CtaCreateOneInlineInput>;
  fullWidthTemplates?: InputMaybe<CmsPageCreateManyInlineInput>;
  name?: InputMaybe<Scalars['String']>;
  offerItems?: InputMaybe<OfferItemCreateManyInlineInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type OfferTilesCreateManyInlineInput = {
  /** Connect multiple existing OfferTiles documents */
  connect?: InputMaybe<Array<OfferTilesWhereUniqueInput>>;
  /** Create and connect multiple existing OfferTiles documents */
  create?: InputMaybe<Array<OfferTilesCreateInput>>;
};

export type OfferTilesCreateOneInlineInput = {
  /** Connect one existing OfferTiles document */
  connect?: InputMaybe<OfferTilesWhereUniqueInput>;
  /** Create and connect one OfferTiles document */
  create?: InputMaybe<OfferTilesCreateInput>;
};

/** An edge in a connection. */
export type OfferTilesEdge = {
  __typename?: 'OfferTilesEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: OfferTiles;
};

/** Identifies documents */
export type OfferTilesManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<OfferTilesWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<OfferTilesWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<OfferTilesWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  collectionPages_every?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_none?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_some?: InputMaybe<CollectionPageWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  cta?: InputMaybe<CtaWhereInput>;
  documentInStages_every?: InputMaybe<OfferTilesWhereStageInput>;
  documentInStages_none?: InputMaybe<OfferTilesWhereStageInput>;
  documentInStages_some?: InputMaybe<OfferTilesWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  offerItems_every?: InputMaybe<OfferItemWhereInput>;
  offerItems_none?: InputMaybe<OfferItemWhereInput>;
  offerItems_some?: InputMaybe<OfferItemWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum OfferTilesOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type OfferTilesUpdateInput = {
  collectionPages?: InputMaybe<CollectionPageUpdateManyInlineInput>;
  cta?: InputMaybe<CtaUpdateOneInlineInput>;
  fullWidthTemplates?: InputMaybe<CmsPageUpdateManyInlineInput>;
  name?: InputMaybe<Scalars['String']>;
  offerItems?: InputMaybe<OfferItemUpdateManyInlineInput>;
};

export type OfferTilesUpdateManyInlineInput = {
  /** Connect multiple existing OfferTiles documents */
  connect?: InputMaybe<Array<OfferTilesConnectInput>>;
  /** Create and connect multiple OfferTiles documents */
  create?: InputMaybe<Array<OfferTilesCreateInput>>;
  /** Delete multiple OfferTiles documents */
  delete?: InputMaybe<Array<OfferTilesWhereUniqueInput>>;
  /** Disconnect multiple OfferTiles documents */
  disconnect?: InputMaybe<Array<OfferTilesWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing OfferTiles documents */
  set?: InputMaybe<Array<OfferTilesWhereUniqueInput>>;
  /** Update multiple OfferTiles documents */
  update?: InputMaybe<Array<OfferTilesUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple OfferTiles documents */
  upsert?: InputMaybe<Array<OfferTilesUpsertWithNestedWhereUniqueInput>>;
};

export type OfferTilesUpdateManyInput = {
  name?: InputMaybe<Scalars['String']>;
};

export type OfferTilesUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: OfferTilesUpdateManyInput;
  /** Document search */
  where: OfferTilesWhereInput;
};

export type OfferTilesUpdateOneInlineInput = {
  /** Connect existing OfferTiles document */
  connect?: InputMaybe<OfferTilesWhereUniqueInput>;
  /** Create and connect one OfferTiles document */
  create?: InputMaybe<OfferTilesCreateInput>;
  /** Delete currently connected OfferTiles document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected OfferTiles document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single OfferTiles document */
  update?: InputMaybe<OfferTilesUpdateWithNestedWhereUniqueInput>;
  /** Upsert single OfferTiles document */
  upsert?: InputMaybe<OfferTilesUpsertWithNestedWhereUniqueInput>;
};

export type OfferTilesUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: OfferTilesUpdateInput;
  /** Unique document search */
  where: OfferTilesWhereUniqueInput;
};

export type OfferTilesUpsertInput = {
  /** Create document if it didn't exist */
  create: OfferTilesCreateInput;
  /** Update document if it exists */
  update: OfferTilesUpdateInput;
};

export type OfferTilesUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: OfferTilesUpsertInput;
  /** Unique document search */
  where: OfferTilesWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type OfferTilesWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type OfferTilesWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<OfferTilesWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<OfferTilesWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<OfferTilesWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  collectionPages_every?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_none?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_some?: InputMaybe<CollectionPageWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  cta?: InputMaybe<CtaWhereInput>;
  documentInStages_every?: InputMaybe<OfferTilesWhereStageInput>;
  documentInStages_none?: InputMaybe<OfferTilesWhereStageInput>;
  documentInStages_some?: InputMaybe<OfferTilesWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  offerItems_every?: InputMaybe<OfferItemWhereInput>;
  offerItems_none?: InputMaybe<OfferItemWhereInput>;
  offerItems_some?: InputMaybe<OfferItemWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type OfferTilesWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<OfferTilesWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<OfferTilesWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<OfferTilesWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<OfferTilesWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References OfferTiles record uniquely */
export type OfferTilesWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type PageBuyingGuide = Node & {
  __typename?: 'PageBuyingGuide';
  adminTitle?: Maybe<Scalars['String']>;
  blogAuthor?: Maybe<BlogAuthor>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<PageBuyingGuide>;
  headline?: Maybe<Scalars['String']>;
  /** List of PageBuyingGuide versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  mainImageDesktop?: Maybe<Asset>;
  mainImageMobile?: Maybe<Asset>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  sections: Array<PageBuyingGuideSections>;
  /** System stage field */
  stage: Stage;
  subHeadline?: Maybe<Scalars['String']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type PageBuyingGuideBlogAuthorArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageBuyingGuideCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageBuyingGuideDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type PageBuyingGuideHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type PageBuyingGuideMainImageDesktopArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageBuyingGuideMainImageMobileArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageBuyingGuidePublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageBuyingGuideScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type PageBuyingGuideSectionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type PageBuyingGuideUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type PageBuyingGuideConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: PageBuyingGuideWhereUniqueInput;
};

/** A connection to a list of items. */
export type PageBuyingGuideConnection = {
  __typename?: 'PageBuyingGuideConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<PageBuyingGuideEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type PageBuyingGuideCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  blogAuthor?: InputMaybe<BlogAuthorCreateOneInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  headline?: InputMaybe<Scalars['String']>;
  mainImageDesktop?: InputMaybe<AssetCreateOneInlineInput>;
  mainImageMobile?: InputMaybe<AssetCreateOneInlineInput>;
  sections?: InputMaybe<PageBuyingGuideSectionsCreateManyInlineInput>;
  subHeadline?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type PageBuyingGuideCreateManyInlineInput = {
  /** Connect multiple existing PageBuyingGuide documents */
  connect?: InputMaybe<Array<PageBuyingGuideWhereUniqueInput>>;
  /** Create and connect multiple existing PageBuyingGuide documents */
  create?: InputMaybe<Array<PageBuyingGuideCreateInput>>;
};

export type PageBuyingGuideCreateOneInlineInput = {
  /** Connect one existing PageBuyingGuide document */
  connect?: InputMaybe<PageBuyingGuideWhereUniqueInput>;
  /** Create and connect one PageBuyingGuide document */
  create?: InputMaybe<PageBuyingGuideCreateInput>;
};

/** An edge in a connection. */
export type PageBuyingGuideEdge = {
  __typename?: 'PageBuyingGuideEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: PageBuyingGuide;
};

/** Identifies documents */
export type PageBuyingGuideManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageBuyingGuideWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageBuyingGuideWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageBuyingGuideWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  blogAuthor?: InputMaybe<BlogAuthorWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<PageBuyingGuideWhereStageInput>;
  documentInStages_none?: InputMaybe<PageBuyingGuideWhereStageInput>;
  documentInStages_some?: InputMaybe<PageBuyingGuideWhereStageInput>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  mainImageDesktop?: InputMaybe<AssetWhereInput>;
  mainImageMobile?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  /** All values in which the union is empty */
  sections_empty?: InputMaybe<Scalars['Boolean']>;
  /** Matches if the union contains at least one connection to the provided item to the filter */
  sections_some?: InputMaybe<PageBuyingGuideSectionsWhereInput>;
  subHeadline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subHeadline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subHeadline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subHeadline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subHeadline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subHeadline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subHeadline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subHeadline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subHeadline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subHeadline_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum PageBuyingGuideOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  HeadlineAsc = 'headline_ASC',
  HeadlineDesc = 'headline_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SubHeadlineAsc = 'subHeadline_ASC',
  SubHeadlineDesc = 'subHeadline_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type PageBuyingGuideSections = SectionCollectionFeatureLarge | SectionImageAndTextGrid | SectionProductSpotlightGrid | SectionProductSpotlightLarge | SectionTextBlock;

export type PageBuyingGuideSectionsConnectInput = {
  SectionCollectionFeatureLarge?: InputMaybe<SectionCollectionFeatureLargeConnectInput>;
  SectionImageAndTextGrid?: InputMaybe<SectionImageAndTextGridConnectInput>;
  SectionProductSpotlightGrid?: InputMaybe<SectionProductSpotlightGridConnectInput>;
  SectionProductSpotlightLarge?: InputMaybe<SectionProductSpotlightLargeConnectInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockConnectInput>;
};

export type PageBuyingGuideSectionsCreateInput = {
  SectionCollectionFeatureLarge?: InputMaybe<SectionCollectionFeatureLargeCreateInput>;
  SectionImageAndTextGrid?: InputMaybe<SectionImageAndTextGridCreateInput>;
  SectionProductSpotlightGrid?: InputMaybe<SectionProductSpotlightGridCreateInput>;
  SectionProductSpotlightLarge?: InputMaybe<SectionProductSpotlightLargeCreateInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockCreateInput>;
};

export type PageBuyingGuideSectionsCreateManyInlineInput = {
  /** Connect multiple existing PageBuyingGuideSections documents */
  connect?: InputMaybe<Array<PageBuyingGuideSectionsWhereUniqueInput>>;
  /** Create and connect multiple existing PageBuyingGuideSections documents */
  create?: InputMaybe<Array<PageBuyingGuideSectionsCreateInput>>;
};

export type PageBuyingGuideSectionsCreateOneInlineInput = {
  /** Connect one existing PageBuyingGuideSections document */
  connect?: InputMaybe<PageBuyingGuideSectionsWhereUniqueInput>;
  /** Create and connect one PageBuyingGuideSections document */
  create?: InputMaybe<PageBuyingGuideSectionsCreateInput>;
};

export type PageBuyingGuideSectionsUpdateInput = {
  SectionCollectionFeatureLarge?: InputMaybe<SectionCollectionFeatureLargeUpdateInput>;
  SectionImageAndTextGrid?: InputMaybe<SectionImageAndTextGridUpdateInput>;
  SectionProductSpotlightGrid?: InputMaybe<SectionProductSpotlightGridUpdateInput>;
  SectionProductSpotlightLarge?: InputMaybe<SectionProductSpotlightLargeUpdateInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockUpdateInput>;
};

export type PageBuyingGuideSectionsUpdateManyInlineInput = {
  /** Connect multiple existing PageBuyingGuideSections documents */
  connect?: InputMaybe<Array<PageBuyingGuideSectionsConnectInput>>;
  /** Create and connect multiple PageBuyingGuideSections documents */
  create?: InputMaybe<Array<PageBuyingGuideSectionsCreateInput>>;
  /** Delete multiple PageBuyingGuideSections documents */
  delete?: InputMaybe<Array<PageBuyingGuideSectionsWhereUniqueInput>>;
  /** Disconnect multiple PageBuyingGuideSections documents */
  disconnect?: InputMaybe<Array<PageBuyingGuideSectionsWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing PageBuyingGuideSections documents */
  set?: InputMaybe<Array<PageBuyingGuideSectionsWhereUniqueInput>>;
  /** Update multiple PageBuyingGuideSections documents */
  update?: InputMaybe<Array<PageBuyingGuideSectionsUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple PageBuyingGuideSections documents */
  upsert?: InputMaybe<Array<PageBuyingGuideSectionsUpsertWithNestedWhereUniqueInput>>;
};

export type PageBuyingGuideSectionsUpdateManyWithNestedWhereInput = {
  SectionCollectionFeatureLarge?: InputMaybe<SectionCollectionFeatureLargeUpdateManyWithNestedWhereInput>;
  SectionImageAndTextGrid?: InputMaybe<SectionImageAndTextGridUpdateManyWithNestedWhereInput>;
  SectionProductSpotlightGrid?: InputMaybe<SectionProductSpotlightGridUpdateManyWithNestedWhereInput>;
  SectionProductSpotlightLarge?: InputMaybe<SectionProductSpotlightLargeUpdateManyWithNestedWhereInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockUpdateManyWithNestedWhereInput>;
};

export type PageBuyingGuideSectionsUpdateOneInlineInput = {
  /** Connect existing PageBuyingGuideSections document */
  connect?: InputMaybe<PageBuyingGuideSectionsWhereUniqueInput>;
  /** Create and connect one PageBuyingGuideSections document */
  create?: InputMaybe<PageBuyingGuideSectionsCreateInput>;
  /** Delete currently connected PageBuyingGuideSections document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected PageBuyingGuideSections document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single PageBuyingGuideSections document */
  update?: InputMaybe<PageBuyingGuideSectionsUpdateWithNestedWhereUniqueInput>;
  /** Upsert single PageBuyingGuideSections document */
  upsert?: InputMaybe<PageBuyingGuideSectionsUpsertWithNestedWhereUniqueInput>;
};

export type PageBuyingGuideSectionsUpdateWithNestedWhereUniqueInput = {
  SectionCollectionFeatureLarge?: InputMaybe<SectionCollectionFeatureLargeUpdateWithNestedWhereUniqueInput>;
  SectionImageAndTextGrid?: InputMaybe<SectionImageAndTextGridUpdateWithNestedWhereUniqueInput>;
  SectionProductSpotlightGrid?: InputMaybe<SectionProductSpotlightGridUpdateWithNestedWhereUniqueInput>;
  SectionProductSpotlightLarge?: InputMaybe<SectionProductSpotlightLargeUpdateWithNestedWhereUniqueInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockUpdateWithNestedWhereUniqueInput>;
};

export type PageBuyingGuideSectionsUpsertWithNestedWhereUniqueInput = {
  SectionCollectionFeatureLarge?: InputMaybe<SectionCollectionFeatureLargeUpsertWithNestedWhereUniqueInput>;
  SectionImageAndTextGrid?: InputMaybe<SectionImageAndTextGridUpsertWithNestedWhereUniqueInput>;
  SectionProductSpotlightGrid?: InputMaybe<SectionProductSpotlightGridUpsertWithNestedWhereUniqueInput>;
  SectionProductSpotlightLarge?: InputMaybe<SectionProductSpotlightLargeUpsertWithNestedWhereUniqueInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockUpsertWithNestedWhereUniqueInput>;
};

export type PageBuyingGuideSectionsWhereInput = {
  SectionCollectionFeatureLarge?: InputMaybe<SectionCollectionFeatureLargeWhereInput>;
  SectionImageAndTextGrid?: InputMaybe<SectionImageAndTextGridWhereInput>;
  SectionProductSpotlightGrid?: InputMaybe<SectionProductSpotlightGridWhereInput>;
  SectionProductSpotlightLarge?: InputMaybe<SectionProductSpotlightLargeWhereInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockWhereInput>;
};

export type PageBuyingGuideSectionsWhereUniqueInput = {
  SectionCollectionFeatureLarge?: InputMaybe<SectionCollectionFeatureLargeWhereUniqueInput>;
  SectionImageAndTextGrid?: InputMaybe<SectionImageAndTextGridWhereUniqueInput>;
  SectionProductSpotlightGrid?: InputMaybe<SectionProductSpotlightGridWhereUniqueInput>;
  SectionProductSpotlightLarge?: InputMaybe<SectionProductSpotlightLargeWhereUniqueInput>;
  SectionTextBlock?: InputMaybe<SectionTextBlockWhereUniqueInput>;
};

export type PageBuyingGuideUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  blogAuthor?: InputMaybe<BlogAuthorUpdateOneInlineInput>;
  headline?: InputMaybe<Scalars['String']>;
  mainImageDesktop?: InputMaybe<AssetUpdateOneInlineInput>;
  mainImageMobile?: InputMaybe<AssetUpdateOneInlineInput>;
  sections?: InputMaybe<PageBuyingGuideSectionsUpdateManyInlineInput>;
  subHeadline?: InputMaybe<Scalars['String']>;
};

export type PageBuyingGuideUpdateManyInlineInput = {
  /** Connect multiple existing PageBuyingGuide documents */
  connect?: InputMaybe<Array<PageBuyingGuideConnectInput>>;
  /** Create and connect multiple PageBuyingGuide documents */
  create?: InputMaybe<Array<PageBuyingGuideCreateInput>>;
  /** Delete multiple PageBuyingGuide documents */
  delete?: InputMaybe<Array<PageBuyingGuideWhereUniqueInput>>;
  /** Disconnect multiple PageBuyingGuide documents */
  disconnect?: InputMaybe<Array<PageBuyingGuideWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing PageBuyingGuide documents */
  set?: InputMaybe<Array<PageBuyingGuideWhereUniqueInput>>;
  /** Update multiple PageBuyingGuide documents */
  update?: InputMaybe<Array<PageBuyingGuideUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple PageBuyingGuide documents */
  upsert?: InputMaybe<Array<PageBuyingGuideUpsertWithNestedWhereUniqueInput>>;
};

export type PageBuyingGuideUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  headline?: InputMaybe<Scalars['String']>;
  subHeadline?: InputMaybe<Scalars['String']>;
};

export type PageBuyingGuideUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: PageBuyingGuideUpdateManyInput;
  /** Document search */
  where: PageBuyingGuideWhereInput;
};

export type PageBuyingGuideUpdateOneInlineInput = {
  /** Connect existing PageBuyingGuide document */
  connect?: InputMaybe<PageBuyingGuideWhereUniqueInput>;
  /** Create and connect one PageBuyingGuide document */
  create?: InputMaybe<PageBuyingGuideCreateInput>;
  /** Delete currently connected PageBuyingGuide document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected PageBuyingGuide document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single PageBuyingGuide document */
  update?: InputMaybe<PageBuyingGuideUpdateWithNestedWhereUniqueInput>;
  /** Upsert single PageBuyingGuide document */
  upsert?: InputMaybe<PageBuyingGuideUpsertWithNestedWhereUniqueInput>;
};

export type PageBuyingGuideUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: PageBuyingGuideUpdateInput;
  /** Unique document search */
  where: PageBuyingGuideWhereUniqueInput;
};

export type PageBuyingGuideUpsertInput = {
  /** Create document if it didn't exist */
  create: PageBuyingGuideCreateInput;
  /** Update document if it exists */
  update: PageBuyingGuideUpdateInput;
};

export type PageBuyingGuideUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: PageBuyingGuideUpsertInput;
  /** Unique document search */
  where: PageBuyingGuideWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type PageBuyingGuideWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type PageBuyingGuideWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageBuyingGuideWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageBuyingGuideWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageBuyingGuideWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  blogAuthor?: InputMaybe<BlogAuthorWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<PageBuyingGuideWhereStageInput>;
  documentInStages_none?: InputMaybe<PageBuyingGuideWhereStageInput>;
  documentInStages_some?: InputMaybe<PageBuyingGuideWhereStageInput>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  mainImageDesktop?: InputMaybe<AssetWhereInput>;
  mainImageMobile?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  /** All values in which the union is empty */
  sections_empty?: InputMaybe<Scalars['Boolean']>;
  /** Matches if the union contains at least one connection to the provided item to the filter */
  sections_some?: InputMaybe<PageBuyingGuideSectionsWhereInput>;
  subHeadline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subHeadline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subHeadline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subHeadline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subHeadline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subHeadline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subHeadline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subHeadline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subHeadline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subHeadline_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type PageBuyingGuideWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageBuyingGuideWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageBuyingGuideWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageBuyingGuideWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<PageBuyingGuideWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References PageBuyingGuide record uniquely */
export type PageBuyingGuideWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** Number of items in the current page. */
  pageSize?: Maybe<Scalars['Int']>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

export type PageMeta = {
  __typename?: 'PageMeta';
  /** The unique identifier */
  id: Scalars['ID'];
  metaDescription?: Maybe<Scalars['String']>;
  metaTitle?: Maybe<Scalars['String']>;
  /** System stage field */
  stage: Stage;
};

export type PageMetaConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: PageMetaWhereUniqueInput;
};

/** A connection to a list of items. */
export type PageMetaConnection = {
  __typename?: 'PageMetaConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<PageMetaEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type PageMetaCreateInput = {
  metaDescription?: InputMaybe<Scalars['String']>;
  metaTitle?: InputMaybe<Scalars['String']>;
};

export type PageMetaCreateManyInlineInput = {
  /** Create and connect multiple existing PageMeta documents */
  create?: InputMaybe<Array<PageMetaCreateInput>>;
};

export type PageMetaCreateOneInlineInput = {
  /** Create and connect one PageMeta document */
  create?: InputMaybe<PageMetaCreateInput>;
};

export type PageMetaCreateWithPositionInput = {
  /** Document to create */
  data: PageMetaCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type PageMetaEdge = {
  __typename?: 'PageMetaEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: PageMeta;
};

/** Identifies documents */
export type PageMetaManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageMetaWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageMetaWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageMetaWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  metaDescription?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  metaDescription_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  metaDescription_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  metaDescription_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  metaDescription_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  metaDescription_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  metaDescription_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  metaDescription_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  metaDescription_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  metaDescription_starts_with?: InputMaybe<Scalars['String']>;
  metaTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  metaTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  metaTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  metaTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  metaTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  metaTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  metaTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  metaTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  metaTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  metaTitle_starts_with?: InputMaybe<Scalars['String']>;
};

export enum PageMetaOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  MetaDescriptionAsc = 'metaDescription_ASC',
  MetaDescriptionDesc = 'metaDescription_DESC',
  MetaTitleAsc = 'metaTitle_ASC',
  MetaTitleDesc = 'metaTitle_DESC'
}

export type PageMetaParent = BlogArticle | CmsPage | CollectionPage | ProductPage;

export type PageMetaParentConnectInput = {
  BlogArticle?: InputMaybe<BlogArticleConnectInput>;
  CMSPage?: InputMaybe<CmsPageConnectInput>;
  CollectionPage?: InputMaybe<CollectionPageConnectInput>;
  ProductPage?: InputMaybe<ProductPageConnectInput>;
};

export type PageMetaParentCreateInput = {
  BlogArticle?: InputMaybe<BlogArticleCreateInput>;
  CMSPage?: InputMaybe<CmsPageCreateInput>;
  CollectionPage?: InputMaybe<CollectionPageCreateInput>;
  ProductPage?: InputMaybe<ProductPageCreateInput>;
};

export type PageMetaParentCreateManyInlineInput = {
  /** Connect multiple existing PageMetaParent documents */
  connect?: InputMaybe<Array<PageMetaParentWhereUniqueInput>>;
  /** Create and connect multiple existing PageMetaParent documents */
  create?: InputMaybe<Array<PageMetaParentCreateInput>>;
};

export type PageMetaParentCreateOneInlineInput = {
  /** Connect one existing PageMetaParent document */
  connect?: InputMaybe<PageMetaParentWhereUniqueInput>;
  /** Create and connect one PageMetaParent document */
  create?: InputMaybe<PageMetaParentCreateInput>;
};

export type PageMetaParentUpdateInput = {
  BlogArticle?: InputMaybe<BlogArticleUpdateInput>;
  CMSPage?: InputMaybe<CmsPageUpdateInput>;
  CollectionPage?: InputMaybe<CollectionPageUpdateInput>;
  ProductPage?: InputMaybe<ProductPageUpdateInput>;
};

export type PageMetaParentUpdateManyInlineInput = {
  /** Connect multiple existing PageMetaParent documents */
  connect?: InputMaybe<Array<PageMetaParentConnectInput>>;
  /** Create and connect multiple PageMetaParent documents */
  create?: InputMaybe<Array<PageMetaParentCreateInput>>;
  /** Delete multiple PageMetaParent documents */
  delete?: InputMaybe<Array<PageMetaParentWhereUniqueInput>>;
  /** Disconnect multiple PageMetaParent documents */
  disconnect?: InputMaybe<Array<PageMetaParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing PageMetaParent documents */
  set?: InputMaybe<Array<PageMetaParentWhereUniqueInput>>;
  /** Update multiple PageMetaParent documents */
  update?: InputMaybe<Array<PageMetaParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple PageMetaParent documents */
  upsert?: InputMaybe<Array<PageMetaParentUpsertWithNestedWhereUniqueInput>>;
};

export type PageMetaParentUpdateManyWithNestedWhereInput = {
  BlogArticle?: InputMaybe<BlogArticleUpdateManyWithNestedWhereInput>;
  CMSPage?: InputMaybe<CmsPageUpdateManyWithNestedWhereInput>;
  CollectionPage?: InputMaybe<CollectionPageUpdateManyWithNestedWhereInput>;
  ProductPage?: InputMaybe<ProductPageUpdateManyWithNestedWhereInput>;
};

export type PageMetaParentUpdateOneInlineInput = {
  /** Connect existing PageMetaParent document */
  connect?: InputMaybe<PageMetaParentWhereUniqueInput>;
  /** Create and connect one PageMetaParent document */
  create?: InputMaybe<PageMetaParentCreateInput>;
  /** Delete currently connected PageMetaParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected PageMetaParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single PageMetaParent document */
  update?: InputMaybe<PageMetaParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single PageMetaParent document */
  upsert?: InputMaybe<PageMetaParentUpsertWithNestedWhereUniqueInput>;
};

export type PageMetaParentUpdateWithNestedWhereUniqueInput = {
  BlogArticle?: InputMaybe<BlogArticleUpdateWithNestedWhereUniqueInput>;
  CMSPage?: InputMaybe<CmsPageUpdateWithNestedWhereUniqueInput>;
  CollectionPage?: InputMaybe<CollectionPageUpdateWithNestedWhereUniqueInput>;
  ProductPage?: InputMaybe<ProductPageUpdateWithNestedWhereUniqueInput>;
};

export type PageMetaParentUpsertWithNestedWhereUniqueInput = {
  BlogArticle?: InputMaybe<BlogArticleUpsertWithNestedWhereUniqueInput>;
  CMSPage?: InputMaybe<CmsPageUpsertWithNestedWhereUniqueInput>;
  CollectionPage?: InputMaybe<CollectionPageUpsertWithNestedWhereUniqueInput>;
  ProductPage?: InputMaybe<ProductPageUpsertWithNestedWhereUniqueInput>;
};

export type PageMetaParentWhereInput = {
  BlogArticle?: InputMaybe<BlogArticleWhereInput>;
  CMSPage?: InputMaybe<CmsPageWhereInput>;
  CollectionPage?: InputMaybe<CollectionPageWhereInput>;
  ProductPage?: InputMaybe<ProductPageWhereInput>;
};

export type PageMetaParentWhereUniqueInput = {
  BlogArticle?: InputMaybe<BlogArticleWhereUniqueInput>;
  CMSPage?: InputMaybe<CmsPageWhereUniqueInput>;
  CollectionPage?: InputMaybe<CollectionPageWhereUniqueInput>;
  ProductPage?: InputMaybe<ProductPageWhereUniqueInput>;
};

export type PageMetaUpdateInput = {
  metaDescription?: InputMaybe<Scalars['String']>;
  metaTitle?: InputMaybe<Scalars['String']>;
};

export type PageMetaUpdateManyInlineInput = {
  /** Create and connect multiple PageMeta component instances */
  create?: InputMaybe<Array<PageMetaCreateWithPositionInput>>;
  /** Delete multiple PageMeta documents */
  delete?: InputMaybe<Array<PageMetaWhereUniqueInput>>;
  /** Update multiple PageMeta component instances */
  update?: InputMaybe<Array<PageMetaUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple PageMeta component instances */
  upsert?: InputMaybe<Array<PageMetaUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type PageMetaUpdateManyInput = {
  metaDescription?: InputMaybe<Scalars['String']>;
  metaTitle?: InputMaybe<Scalars['String']>;
};

export type PageMetaUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: PageMetaUpdateManyInput;
  /** Document search */
  where: PageMetaWhereInput;
};

export type PageMetaUpdateOneInlineInput = {
  /** Create and connect one PageMeta document */
  create?: InputMaybe<PageMetaCreateInput>;
  /** Delete currently connected PageMeta document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single PageMeta document */
  update?: InputMaybe<PageMetaUpdateWithNestedWhereUniqueInput>;
  /** Upsert single PageMeta document */
  upsert?: InputMaybe<PageMetaUpsertWithNestedWhereUniqueInput>;
};

export type PageMetaUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<PageMetaUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: PageMetaWhereUniqueInput;
};

export type PageMetaUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: PageMetaUpdateInput;
  /** Unique document search */
  where: PageMetaWhereUniqueInput;
};

export type PageMetaUpsertInput = {
  /** Create document if it didn't exist */
  create: PageMetaCreateInput;
  /** Update document if it exists */
  update: PageMetaUpdateInput;
};

export type PageMetaUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<PageMetaUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: PageMetaWhereUniqueInput;
};

export type PageMetaUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: PageMetaUpsertInput;
  /** Unique document search */
  where: PageMetaWhereUniqueInput;
};

/** Identifies documents */
export type PageMetaWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageMetaWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageMetaWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageMetaWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  metaDescription?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  metaDescription_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  metaDescription_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  metaDescription_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  metaDescription_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  metaDescription_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  metaDescription_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  metaDescription_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  metaDescription_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  metaDescription_starts_with?: InputMaybe<Scalars['String']>;
  metaTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  metaTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  metaTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  metaTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  metaTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  metaTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  metaTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  metaTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  metaTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  metaTitle_starts_with?: InputMaybe<Scalars['String']>;
};

/** References PageMeta record uniquely */
export type PageMetaWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type ProductBenefitsGrid = Node & {
  __typename?: 'ProductBenefitsGrid';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<ProductBenefitsGrid>;
  /** List of ProductBenefitsGrid versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  items?: Maybe<ProductBenefitsGriditemsUnion>;
  products: Array<ProductPage>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  title?: Maybe<Scalars['String']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type ProductBenefitsGridCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ProductBenefitsGridDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type ProductBenefitsGridHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type ProductBenefitsGridItemsArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ProductBenefitsGridProductsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProductPageWhereInput>;
};


export type ProductBenefitsGridPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ProductBenefitsGridScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type ProductBenefitsGridUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ProductBenefitsGridConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ProductBenefitsGridWhereUniqueInput;
};

/** A connection to a list of items. */
export type ProductBenefitsGridConnection = {
  __typename?: 'ProductBenefitsGridConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ProductBenefitsGridEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ProductBenefitsGridCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  items?: InputMaybe<ProductBenefitsGriditemsUnionCreateOneInlineInput>;
  products?: InputMaybe<ProductPageCreateManyInlineInput>;
  title?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type ProductBenefitsGridCreateManyInlineInput = {
  /** Connect multiple existing ProductBenefitsGrid documents */
  connect?: InputMaybe<Array<ProductBenefitsGridWhereUniqueInput>>;
  /** Create and connect multiple existing ProductBenefitsGrid documents */
  create?: InputMaybe<Array<ProductBenefitsGridCreateInput>>;
};

export type ProductBenefitsGridCreateOneInlineInput = {
  /** Connect one existing ProductBenefitsGrid document */
  connect?: InputMaybe<ProductBenefitsGridWhereUniqueInput>;
  /** Create and connect one ProductBenefitsGrid document */
  create?: InputMaybe<ProductBenefitsGridCreateInput>;
};

/** An edge in a connection. */
export type ProductBenefitsGridEdge = {
  __typename?: 'ProductBenefitsGridEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ProductBenefitsGrid;
};

/** Identifies documents */
export type ProductBenefitsGridManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProductBenefitsGridWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProductBenefitsGridWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProductBenefitsGridWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ProductBenefitsGridWhereStageInput>;
  documentInStages_none?: InputMaybe<ProductBenefitsGridWhereStageInput>;
  documentInStages_some?: InputMaybe<ProductBenefitsGridWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values in which the modular component is connected to the given models */
  items?: InputMaybe<ProductBenefitsGriditemsUnionWhereInput>;
  /** All values in which the union is empty. */
  items_empty?: InputMaybe<Scalars['Boolean']>;
  products_every?: InputMaybe<ProductPageWhereInput>;
  products_none?: InputMaybe<ProductPageWhereInput>;
  products_some?: InputMaybe<ProductPageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ProductBenefitsGridOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type ProductBenefitsGridUpdateInput = {
  items?: InputMaybe<ProductBenefitsGriditemsUnionUpdateOneInlineInput>;
  products?: InputMaybe<ProductPageUpdateManyInlineInput>;
  title?: InputMaybe<Scalars['String']>;
};

export type ProductBenefitsGridUpdateManyInlineInput = {
  /** Connect multiple existing ProductBenefitsGrid documents */
  connect?: InputMaybe<Array<ProductBenefitsGridConnectInput>>;
  /** Create and connect multiple ProductBenefitsGrid documents */
  create?: InputMaybe<Array<ProductBenefitsGridCreateInput>>;
  /** Delete multiple ProductBenefitsGrid documents */
  delete?: InputMaybe<Array<ProductBenefitsGridWhereUniqueInput>>;
  /** Disconnect multiple ProductBenefitsGrid documents */
  disconnect?: InputMaybe<Array<ProductBenefitsGridWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ProductBenefitsGrid documents */
  set?: InputMaybe<Array<ProductBenefitsGridWhereUniqueInput>>;
  /** Update multiple ProductBenefitsGrid documents */
  update?: InputMaybe<Array<ProductBenefitsGridUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ProductBenefitsGrid documents */
  upsert?: InputMaybe<Array<ProductBenefitsGridUpsertWithNestedWhereUniqueInput>>;
};

export type ProductBenefitsGridUpdateManyInput = {
  title?: InputMaybe<Scalars['String']>;
};

export type ProductBenefitsGridUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ProductBenefitsGridUpdateManyInput;
  /** Document search */
  where: ProductBenefitsGridWhereInput;
};

export type ProductBenefitsGridUpdateOneInlineInput = {
  /** Connect existing ProductBenefitsGrid document */
  connect?: InputMaybe<ProductBenefitsGridWhereUniqueInput>;
  /** Create and connect one ProductBenefitsGrid document */
  create?: InputMaybe<ProductBenefitsGridCreateInput>;
  /** Delete currently connected ProductBenefitsGrid document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected ProductBenefitsGrid document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single ProductBenefitsGrid document */
  update?: InputMaybe<ProductBenefitsGridUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ProductBenefitsGrid document */
  upsert?: InputMaybe<ProductBenefitsGridUpsertWithNestedWhereUniqueInput>;
};

export type ProductBenefitsGridUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ProductBenefitsGridUpdateInput;
  /** Unique document search */
  where: ProductBenefitsGridWhereUniqueInput;
};

export type ProductBenefitsGridUpsertInput = {
  /** Create document if it didn't exist */
  create: ProductBenefitsGridCreateInput;
  /** Update document if it exists */
  update: ProductBenefitsGridUpdateInput;
};

export type ProductBenefitsGridUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ProductBenefitsGridUpsertInput;
  /** Unique document search */
  where: ProductBenefitsGridWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type ProductBenefitsGridWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type ProductBenefitsGridWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProductBenefitsGridWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProductBenefitsGridWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProductBenefitsGridWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ProductBenefitsGridWhereStageInput>;
  documentInStages_none?: InputMaybe<ProductBenefitsGridWhereStageInput>;
  documentInStages_some?: InputMaybe<ProductBenefitsGridWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values in which the modular component is connected to the given models */
  items?: InputMaybe<ProductBenefitsGriditemsUnionWhereInput>;
  /** All values in which the union is empty. */
  items_empty?: InputMaybe<Scalars['Boolean']>;
  products_every?: InputMaybe<ProductPageWhereInput>;
  products_none?: InputMaybe<ProductPageWhereInput>;
  products_some?: InputMaybe<ProductPageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type ProductBenefitsGridWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProductBenefitsGridWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProductBenefitsGridWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProductBenefitsGridWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<ProductBenefitsGridWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References ProductBenefitsGrid record uniquely */
export type ProductBenefitsGridWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type ProductBenefitsGriditemsUnion = ProductBenefitsItem;

export type ProductBenefitsGriditemsUnionConnectInput = {
  ProductBenefitsItem?: InputMaybe<ProductBenefitsItemConnectInput>;
};

export type ProductBenefitsGriditemsUnionCreateInput = {
  ProductBenefitsItem?: InputMaybe<ProductBenefitsItemCreateInput>;
};

export type ProductBenefitsGriditemsUnionCreateManyInlineInput = {
  /** Create and connect multiple existing ProductBenefitsGriditemsUnion documents */
  create?: InputMaybe<Array<ProductBenefitsGriditemsUnionCreateInput>>;
};

export type ProductBenefitsGriditemsUnionCreateOneInlineInput = {
  /** Create and connect one ProductBenefitsGriditemsUnion document */
  create?: InputMaybe<ProductBenefitsGriditemsUnionCreateInput>;
};

export type ProductBenefitsGriditemsUnionCreateWithPositionInput = {
  ProductBenefitsItem?: InputMaybe<ProductBenefitsItemCreateWithPositionInput>;
};

export type ProductBenefitsGriditemsUnionUpdateInput = {
  ProductBenefitsItem?: InputMaybe<ProductBenefitsItemUpdateInput>;
};

export type ProductBenefitsGriditemsUnionUpdateManyInlineInput = {
  /** Create and connect multiple ProductBenefitsGriditemsUnion component instances */
  create?: InputMaybe<Array<ProductBenefitsGriditemsUnionCreateWithPositionInput>>;
  /** Delete multiple ProductBenefitsGriditemsUnion documents */
  delete?: InputMaybe<Array<ProductBenefitsGriditemsUnionWhereUniqueInput>>;
  /** Update multiple ProductBenefitsGriditemsUnion component instances */
  update?: InputMaybe<Array<ProductBenefitsGriditemsUnionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple ProductBenefitsGriditemsUnion component instances */
  upsert?: InputMaybe<Array<ProductBenefitsGriditemsUnionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ProductBenefitsGriditemsUnionUpdateManyWithNestedWhereInput = {
  ProductBenefitsItem?: InputMaybe<ProductBenefitsItemUpdateManyWithNestedWhereInput>;
};

export type ProductBenefitsGriditemsUnionUpdateOneInlineInput = {
  /** Create and connect one ProductBenefitsGriditemsUnion document */
  create?: InputMaybe<ProductBenefitsGriditemsUnionCreateInput>;
  /** Delete currently connected ProductBenefitsGriditemsUnion document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single ProductBenefitsGriditemsUnion document */
  update?: InputMaybe<ProductBenefitsGriditemsUnionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ProductBenefitsGriditemsUnion document */
  upsert?: InputMaybe<ProductBenefitsGriditemsUnionUpsertWithNestedWhereUniqueInput>;
};

export type ProductBenefitsGriditemsUnionUpdateWithNestedWhereUniqueAndPositionInput = {
  ProductBenefitsItem?: InputMaybe<ProductBenefitsItemUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type ProductBenefitsGriditemsUnionUpdateWithNestedWhereUniqueInput = {
  ProductBenefitsItem?: InputMaybe<ProductBenefitsItemUpdateWithNestedWhereUniqueInput>;
};

export type ProductBenefitsGriditemsUnionUpsertWithNestedWhereUniqueAndPositionInput = {
  ProductBenefitsItem?: InputMaybe<ProductBenefitsItemUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type ProductBenefitsGriditemsUnionUpsertWithNestedWhereUniqueInput = {
  ProductBenefitsItem?: InputMaybe<ProductBenefitsItemUpsertWithNestedWhereUniqueInput>;
};

export type ProductBenefitsGriditemsUnionWhereInput = {
  ProductBenefitsItem?: InputMaybe<ProductBenefitsItemWhereInput>;
};

export type ProductBenefitsGriditemsUnionWhereUniqueInput = {
  ProductBenefitsItem?: InputMaybe<ProductBenefitsItemWhereUniqueInput>;
};

export type ProductBenefitsItem = {
  __typename?: 'ProductBenefitsItem';
  headline?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  image?: Maybe<Asset>;
  /** System stage field */
  stage: Stage;
  subText?: Maybe<Scalars['String']>;
};


export type ProductBenefitsItemImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ProductBenefitsItemConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ProductBenefitsItemWhereUniqueInput;
};

/** A connection to a list of items. */
export type ProductBenefitsItemConnection = {
  __typename?: 'ProductBenefitsItemConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ProductBenefitsItemEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ProductBenefitsItemCreateInput = {
  headline?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<AssetCreateOneInlineInput>;
  subText?: InputMaybe<Scalars['String']>;
};

export type ProductBenefitsItemCreateManyInlineInput = {
  /** Create and connect multiple existing ProductBenefitsItem documents */
  create?: InputMaybe<Array<ProductBenefitsItemCreateInput>>;
};

export type ProductBenefitsItemCreateOneInlineInput = {
  /** Create and connect one ProductBenefitsItem document */
  create?: InputMaybe<ProductBenefitsItemCreateInput>;
};

export type ProductBenefitsItemCreateWithPositionInput = {
  /** Document to create */
  data: ProductBenefitsItemCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type ProductBenefitsItemEdge = {
  __typename?: 'ProductBenefitsItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ProductBenefitsItem;
};

/** Identifies documents */
export type ProductBenefitsItemManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProductBenefitsItemWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProductBenefitsItemWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProductBenefitsItemWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
  subText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subText_starts_with?: InputMaybe<Scalars['String']>;
};

export enum ProductBenefitsItemOrderByInput {
  HeadlineAsc = 'headline_ASC',
  HeadlineDesc = 'headline_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  SubTextAsc = 'subText_ASC',
  SubTextDesc = 'subText_DESC'
}

export type ProductBenefitsItemParent = ProductBenefitsGrid;

export type ProductBenefitsItemParentConnectInput = {
  ProductBenefitsGrid?: InputMaybe<ProductBenefitsGridConnectInput>;
};

export type ProductBenefitsItemParentCreateInput = {
  ProductBenefitsGrid?: InputMaybe<ProductBenefitsGridCreateInput>;
};

export type ProductBenefitsItemParentCreateManyInlineInput = {
  /** Connect multiple existing ProductBenefitsItemParent documents */
  connect?: InputMaybe<Array<ProductBenefitsItemParentWhereUniqueInput>>;
  /** Create and connect multiple existing ProductBenefitsItemParent documents */
  create?: InputMaybe<Array<ProductBenefitsItemParentCreateInput>>;
};

export type ProductBenefitsItemParentCreateOneInlineInput = {
  /** Connect one existing ProductBenefitsItemParent document */
  connect?: InputMaybe<ProductBenefitsItemParentWhereUniqueInput>;
  /** Create and connect one ProductBenefitsItemParent document */
  create?: InputMaybe<ProductBenefitsItemParentCreateInput>;
};

export type ProductBenefitsItemParentUpdateInput = {
  ProductBenefitsGrid?: InputMaybe<ProductBenefitsGridUpdateInput>;
};

export type ProductBenefitsItemParentUpdateManyInlineInput = {
  /** Connect multiple existing ProductBenefitsItemParent documents */
  connect?: InputMaybe<Array<ProductBenefitsItemParentConnectInput>>;
  /** Create and connect multiple ProductBenefitsItemParent documents */
  create?: InputMaybe<Array<ProductBenefitsItemParentCreateInput>>;
  /** Delete multiple ProductBenefitsItemParent documents */
  delete?: InputMaybe<Array<ProductBenefitsItemParentWhereUniqueInput>>;
  /** Disconnect multiple ProductBenefitsItemParent documents */
  disconnect?: InputMaybe<Array<ProductBenefitsItemParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ProductBenefitsItemParent documents */
  set?: InputMaybe<Array<ProductBenefitsItemParentWhereUniqueInput>>;
  /** Update multiple ProductBenefitsItemParent documents */
  update?: InputMaybe<Array<ProductBenefitsItemParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ProductBenefitsItemParent documents */
  upsert?: InputMaybe<Array<ProductBenefitsItemParentUpsertWithNestedWhereUniqueInput>>;
};

export type ProductBenefitsItemParentUpdateManyWithNestedWhereInput = {
  ProductBenefitsGrid?: InputMaybe<ProductBenefitsGridUpdateManyWithNestedWhereInput>;
};

export type ProductBenefitsItemParentUpdateOneInlineInput = {
  /** Connect existing ProductBenefitsItemParent document */
  connect?: InputMaybe<ProductBenefitsItemParentWhereUniqueInput>;
  /** Create and connect one ProductBenefitsItemParent document */
  create?: InputMaybe<ProductBenefitsItemParentCreateInput>;
  /** Delete currently connected ProductBenefitsItemParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected ProductBenefitsItemParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single ProductBenefitsItemParent document */
  update?: InputMaybe<ProductBenefitsItemParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ProductBenefitsItemParent document */
  upsert?: InputMaybe<ProductBenefitsItemParentUpsertWithNestedWhereUniqueInput>;
};

export type ProductBenefitsItemParentUpdateWithNestedWhereUniqueInput = {
  ProductBenefitsGrid?: InputMaybe<ProductBenefitsGridUpdateWithNestedWhereUniqueInput>;
};

export type ProductBenefitsItemParentUpsertWithNestedWhereUniqueInput = {
  ProductBenefitsGrid?: InputMaybe<ProductBenefitsGridUpsertWithNestedWhereUniqueInput>;
};

export type ProductBenefitsItemParentWhereInput = {
  ProductBenefitsGrid?: InputMaybe<ProductBenefitsGridWhereInput>;
};

export type ProductBenefitsItemParentWhereUniqueInput = {
  ProductBenefitsGrid?: InputMaybe<ProductBenefitsGridWhereUniqueInput>;
};

export type ProductBenefitsItemUpdateInput = {
  headline?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<AssetUpdateOneInlineInput>;
  subText?: InputMaybe<Scalars['String']>;
};

export type ProductBenefitsItemUpdateManyInlineInput = {
  /** Create and connect multiple ProductBenefitsItem component instances */
  create?: InputMaybe<Array<ProductBenefitsItemCreateWithPositionInput>>;
  /** Delete multiple ProductBenefitsItem documents */
  delete?: InputMaybe<Array<ProductBenefitsItemWhereUniqueInput>>;
  /** Update multiple ProductBenefitsItem component instances */
  update?: InputMaybe<Array<ProductBenefitsItemUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple ProductBenefitsItem component instances */
  upsert?: InputMaybe<Array<ProductBenefitsItemUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ProductBenefitsItemUpdateManyInput = {
  headline?: InputMaybe<Scalars['String']>;
  subText?: InputMaybe<Scalars['String']>;
};

export type ProductBenefitsItemUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ProductBenefitsItemUpdateManyInput;
  /** Document search */
  where: ProductBenefitsItemWhereInput;
};

export type ProductBenefitsItemUpdateOneInlineInput = {
  /** Create and connect one ProductBenefitsItem document */
  create?: InputMaybe<ProductBenefitsItemCreateInput>;
  /** Delete currently connected ProductBenefitsItem document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single ProductBenefitsItem document */
  update?: InputMaybe<ProductBenefitsItemUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ProductBenefitsItem document */
  upsert?: InputMaybe<ProductBenefitsItemUpsertWithNestedWhereUniqueInput>;
};

export type ProductBenefitsItemUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<ProductBenefitsItemUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ProductBenefitsItemWhereUniqueInput;
};

export type ProductBenefitsItemUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ProductBenefitsItemUpdateInput;
  /** Unique document search */
  where: ProductBenefitsItemWhereUniqueInput;
};

export type ProductBenefitsItemUpsertInput = {
  /** Create document if it didn't exist */
  create: ProductBenefitsItemCreateInput;
  /** Update document if it exists */
  update: ProductBenefitsItemUpdateInput;
};

export type ProductBenefitsItemUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<ProductBenefitsItemUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ProductBenefitsItemWhereUniqueInput;
};

export type ProductBenefitsItemUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ProductBenefitsItemUpsertInput;
  /** Unique document search */
  where: ProductBenefitsItemWhereUniqueInput;
};

/** Identifies documents */
export type ProductBenefitsItemWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProductBenefitsItemWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProductBenefitsItemWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProductBenefitsItemWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<AssetWhereInput>;
  subText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subText_starts_with?: InputMaybe<Scalars['String']>;
};

/** References ProductBenefitsItem record uniquely */
export type ProductBenefitsItemWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type ProductCarouselCollection = {
  __typename?: 'ProductCarouselCollection';
  /** The unique identifier */
  id: Scalars['ID'];
  /** Set the value to a collection ID from within Shopify to populate the carousel with items from the collection. */
  shopifyCollectionId: Scalars['String'];
  /** System stage field */
  stage: Stage;
  /** The entered value is displayed as the tab heading within the carousel (when used in tabbed carousel container) */
  tabName: Scalars['String'];
};

export type ProductCarouselCollectionConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ProductCarouselCollectionWhereUniqueInput;
};

/** A connection to a list of items. */
export type ProductCarouselCollectionConnection = {
  __typename?: 'ProductCarouselCollectionConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ProductCarouselCollectionEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ProductCarouselCollectionCreateInput = {
  shopifyCollectionId: Scalars['String'];
  tabName: Scalars['String'];
};

export type ProductCarouselCollectionCreateManyInlineInput = {
  /** Create and connect multiple existing ProductCarouselCollection documents */
  create?: InputMaybe<Array<ProductCarouselCollectionCreateInput>>;
};

export type ProductCarouselCollectionCreateOneInlineInput = {
  /** Create and connect one ProductCarouselCollection document */
  create?: InputMaybe<ProductCarouselCollectionCreateInput>;
};

export type ProductCarouselCollectionCreateWithPositionInput = {
  /** Document to create */
  data: ProductCarouselCollectionCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type ProductCarouselCollectionEdge = {
  __typename?: 'ProductCarouselCollectionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ProductCarouselCollection;
};

/** Identifies documents */
export type ProductCarouselCollectionManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProductCarouselCollectionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProductCarouselCollectionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProductCarouselCollectionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  shopifyCollectionId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  shopifyCollectionId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  shopifyCollectionId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  shopifyCollectionId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  shopifyCollectionId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  shopifyCollectionId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  shopifyCollectionId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  shopifyCollectionId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  shopifyCollectionId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  shopifyCollectionId_starts_with?: InputMaybe<Scalars['String']>;
  tabName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  tabName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  tabName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  tabName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  tabName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  tabName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  tabName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  tabName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  tabName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  tabName_starts_with?: InputMaybe<Scalars['String']>;
};

export enum ProductCarouselCollectionOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  ShopifyCollectionIdAsc = 'shopifyCollectionId_ASC',
  ShopifyCollectionIdDesc = 'shopifyCollectionId_DESC',
  TabNameAsc = 'tabName_ASC',
  TabNameDesc = 'tabName_DESC'
}

export type ProductCarouselCollectionParent = FeatureProductCarouselTabbed;

export type ProductCarouselCollectionParentConnectInput = {
  FeatureProductCarouselTabbed?: InputMaybe<FeatureProductCarouselTabbedConnectInput>;
};

export type ProductCarouselCollectionParentCreateInput = {
  FeatureProductCarouselTabbed?: InputMaybe<FeatureProductCarouselTabbedCreateInput>;
};

export type ProductCarouselCollectionParentCreateManyInlineInput = {
  /** Connect multiple existing ProductCarouselCollectionParent documents */
  connect?: InputMaybe<Array<ProductCarouselCollectionParentWhereUniqueInput>>;
  /** Create and connect multiple existing ProductCarouselCollectionParent documents */
  create?: InputMaybe<Array<ProductCarouselCollectionParentCreateInput>>;
};

export type ProductCarouselCollectionParentCreateOneInlineInput = {
  /** Connect one existing ProductCarouselCollectionParent document */
  connect?: InputMaybe<ProductCarouselCollectionParentWhereUniqueInput>;
  /** Create and connect one ProductCarouselCollectionParent document */
  create?: InputMaybe<ProductCarouselCollectionParentCreateInput>;
};

export type ProductCarouselCollectionParentUpdateInput = {
  FeatureProductCarouselTabbed?: InputMaybe<FeatureProductCarouselTabbedUpdateInput>;
};

export type ProductCarouselCollectionParentUpdateManyInlineInput = {
  /** Connect multiple existing ProductCarouselCollectionParent documents */
  connect?: InputMaybe<Array<ProductCarouselCollectionParentConnectInput>>;
  /** Create and connect multiple ProductCarouselCollectionParent documents */
  create?: InputMaybe<Array<ProductCarouselCollectionParentCreateInput>>;
  /** Delete multiple ProductCarouselCollectionParent documents */
  delete?: InputMaybe<Array<ProductCarouselCollectionParentWhereUniqueInput>>;
  /** Disconnect multiple ProductCarouselCollectionParent documents */
  disconnect?: InputMaybe<Array<ProductCarouselCollectionParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ProductCarouselCollectionParent documents */
  set?: InputMaybe<Array<ProductCarouselCollectionParentWhereUniqueInput>>;
  /** Update multiple ProductCarouselCollectionParent documents */
  update?: InputMaybe<Array<ProductCarouselCollectionParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ProductCarouselCollectionParent documents */
  upsert?: InputMaybe<Array<ProductCarouselCollectionParentUpsertWithNestedWhereUniqueInput>>;
};

export type ProductCarouselCollectionParentUpdateManyWithNestedWhereInput = {
  FeatureProductCarouselTabbed?: InputMaybe<FeatureProductCarouselTabbedUpdateManyWithNestedWhereInput>;
};

export type ProductCarouselCollectionParentUpdateOneInlineInput = {
  /** Connect existing ProductCarouselCollectionParent document */
  connect?: InputMaybe<ProductCarouselCollectionParentWhereUniqueInput>;
  /** Create and connect one ProductCarouselCollectionParent document */
  create?: InputMaybe<ProductCarouselCollectionParentCreateInput>;
  /** Delete currently connected ProductCarouselCollectionParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected ProductCarouselCollectionParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single ProductCarouselCollectionParent document */
  update?: InputMaybe<ProductCarouselCollectionParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ProductCarouselCollectionParent document */
  upsert?: InputMaybe<ProductCarouselCollectionParentUpsertWithNestedWhereUniqueInput>;
};

export type ProductCarouselCollectionParentUpdateWithNestedWhereUniqueInput = {
  FeatureProductCarouselTabbed?: InputMaybe<FeatureProductCarouselTabbedUpdateWithNestedWhereUniqueInput>;
};

export type ProductCarouselCollectionParentUpsertWithNestedWhereUniqueInput = {
  FeatureProductCarouselTabbed?: InputMaybe<FeatureProductCarouselTabbedUpsertWithNestedWhereUniqueInput>;
};

export type ProductCarouselCollectionParentWhereInput = {
  FeatureProductCarouselTabbed?: InputMaybe<FeatureProductCarouselTabbedWhereInput>;
};

export type ProductCarouselCollectionParentWhereUniqueInput = {
  FeatureProductCarouselTabbed?: InputMaybe<FeatureProductCarouselTabbedWhereUniqueInput>;
};

export type ProductCarouselCollectionUpdateInput = {
  shopifyCollectionId?: InputMaybe<Scalars['String']>;
  tabName?: InputMaybe<Scalars['String']>;
};

export type ProductCarouselCollectionUpdateManyInlineInput = {
  /** Create and connect multiple ProductCarouselCollection component instances */
  create?: InputMaybe<Array<ProductCarouselCollectionCreateWithPositionInput>>;
  /** Delete multiple ProductCarouselCollection documents */
  delete?: InputMaybe<Array<ProductCarouselCollectionWhereUniqueInput>>;
  /** Update multiple ProductCarouselCollection component instances */
  update?: InputMaybe<Array<ProductCarouselCollectionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple ProductCarouselCollection component instances */
  upsert?: InputMaybe<Array<ProductCarouselCollectionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ProductCarouselCollectionUpdateManyInput = {
  shopifyCollectionId?: InputMaybe<Scalars['String']>;
  tabName?: InputMaybe<Scalars['String']>;
};

export type ProductCarouselCollectionUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ProductCarouselCollectionUpdateManyInput;
  /** Document search */
  where: ProductCarouselCollectionWhereInput;
};

export type ProductCarouselCollectionUpdateOneInlineInput = {
  /** Create and connect one ProductCarouselCollection document */
  create?: InputMaybe<ProductCarouselCollectionCreateInput>;
  /** Delete currently connected ProductCarouselCollection document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single ProductCarouselCollection document */
  update?: InputMaybe<ProductCarouselCollectionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ProductCarouselCollection document */
  upsert?: InputMaybe<ProductCarouselCollectionUpsertWithNestedWhereUniqueInput>;
};

export type ProductCarouselCollectionUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<ProductCarouselCollectionUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ProductCarouselCollectionWhereUniqueInput;
};

export type ProductCarouselCollectionUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ProductCarouselCollectionUpdateInput;
  /** Unique document search */
  where: ProductCarouselCollectionWhereUniqueInput;
};

export type ProductCarouselCollectionUpsertInput = {
  /** Create document if it didn't exist */
  create: ProductCarouselCollectionCreateInput;
  /** Update document if it exists */
  update: ProductCarouselCollectionUpdateInput;
};

export type ProductCarouselCollectionUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<ProductCarouselCollectionUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ProductCarouselCollectionWhereUniqueInput;
};

export type ProductCarouselCollectionUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ProductCarouselCollectionUpsertInput;
  /** Unique document search */
  where: ProductCarouselCollectionWhereUniqueInput;
};

/** Identifies documents */
export type ProductCarouselCollectionWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProductCarouselCollectionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProductCarouselCollectionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProductCarouselCollectionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  shopifyCollectionId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  shopifyCollectionId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  shopifyCollectionId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  shopifyCollectionId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  shopifyCollectionId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  shopifyCollectionId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  shopifyCollectionId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  shopifyCollectionId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  shopifyCollectionId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  shopifyCollectionId_starts_with?: InputMaybe<Scalars['String']>;
  tabName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  tabName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  tabName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  tabName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  tabName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  tabName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  tabName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  tabName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  tabName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  tabName_starts_with?: InputMaybe<Scalars['String']>;
};

/** References ProductCarouselCollection record uniquely */
export type ProductCarouselCollectionWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type ProductCarouselCurated = {
  __typename?: 'ProductCarouselCurated';
  /** The unique identifier */
  id: Scalars['ID'];
  products: Array<ProductPage>;
  /** System stage field */
  stage: Stage;
  tabHeading: Scalars['String'];
};


export type ProductCarouselCuratedProductsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ProductPageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProductPageWhereInput>;
};

export type ProductCarouselCuratedConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ProductCarouselCuratedWhereUniqueInput;
};

/** A connection to a list of items. */
export type ProductCarouselCuratedConnection = {
  __typename?: 'ProductCarouselCuratedConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ProductCarouselCuratedEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ProductCarouselCuratedCreateInput = {
  products?: InputMaybe<ProductPageCreateManyInlineInput>;
  tabHeading: Scalars['String'];
};

export type ProductCarouselCuratedCreateManyInlineInput = {
  /** Create and connect multiple existing ProductCarouselCurated documents */
  create?: InputMaybe<Array<ProductCarouselCuratedCreateInput>>;
};

export type ProductCarouselCuratedCreateOneInlineInput = {
  /** Create and connect one ProductCarouselCurated document */
  create?: InputMaybe<ProductCarouselCuratedCreateInput>;
};

export type ProductCarouselCuratedCreateWithPositionInput = {
  /** Document to create */
  data: ProductCarouselCuratedCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type ProductCarouselCuratedEdge = {
  __typename?: 'ProductCarouselCuratedEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ProductCarouselCurated;
};

/** Identifies documents */
export type ProductCarouselCuratedManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProductCarouselCuratedWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProductCarouselCuratedWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProductCarouselCuratedWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  products_every?: InputMaybe<ProductPageWhereInput>;
  products_none?: InputMaybe<ProductPageWhereInput>;
  products_some?: InputMaybe<ProductPageWhereInput>;
  tabHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  tabHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  tabHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  tabHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  tabHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  tabHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  tabHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  tabHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  tabHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  tabHeading_starts_with?: InputMaybe<Scalars['String']>;
};

export enum ProductCarouselCuratedOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  TabHeadingAsc = 'tabHeading_ASC',
  TabHeadingDesc = 'tabHeading_DESC'
}

export type ProductCarouselCuratedParent = FeatureProductCarouselTabbed;

export type ProductCarouselCuratedParentConnectInput = {
  FeatureProductCarouselTabbed?: InputMaybe<FeatureProductCarouselTabbedConnectInput>;
};

export type ProductCarouselCuratedParentCreateInput = {
  FeatureProductCarouselTabbed?: InputMaybe<FeatureProductCarouselTabbedCreateInput>;
};

export type ProductCarouselCuratedParentCreateManyInlineInput = {
  /** Connect multiple existing ProductCarouselCuratedParent documents */
  connect?: InputMaybe<Array<ProductCarouselCuratedParentWhereUniqueInput>>;
  /** Create and connect multiple existing ProductCarouselCuratedParent documents */
  create?: InputMaybe<Array<ProductCarouselCuratedParentCreateInput>>;
};

export type ProductCarouselCuratedParentCreateOneInlineInput = {
  /** Connect one existing ProductCarouselCuratedParent document */
  connect?: InputMaybe<ProductCarouselCuratedParentWhereUniqueInput>;
  /** Create and connect one ProductCarouselCuratedParent document */
  create?: InputMaybe<ProductCarouselCuratedParentCreateInput>;
};

export type ProductCarouselCuratedParentUpdateInput = {
  FeatureProductCarouselTabbed?: InputMaybe<FeatureProductCarouselTabbedUpdateInput>;
};

export type ProductCarouselCuratedParentUpdateManyInlineInput = {
  /** Connect multiple existing ProductCarouselCuratedParent documents */
  connect?: InputMaybe<Array<ProductCarouselCuratedParentConnectInput>>;
  /** Create and connect multiple ProductCarouselCuratedParent documents */
  create?: InputMaybe<Array<ProductCarouselCuratedParentCreateInput>>;
  /** Delete multiple ProductCarouselCuratedParent documents */
  delete?: InputMaybe<Array<ProductCarouselCuratedParentWhereUniqueInput>>;
  /** Disconnect multiple ProductCarouselCuratedParent documents */
  disconnect?: InputMaybe<Array<ProductCarouselCuratedParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ProductCarouselCuratedParent documents */
  set?: InputMaybe<Array<ProductCarouselCuratedParentWhereUniqueInput>>;
  /** Update multiple ProductCarouselCuratedParent documents */
  update?: InputMaybe<Array<ProductCarouselCuratedParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ProductCarouselCuratedParent documents */
  upsert?: InputMaybe<Array<ProductCarouselCuratedParentUpsertWithNestedWhereUniqueInput>>;
};

export type ProductCarouselCuratedParentUpdateManyWithNestedWhereInput = {
  FeatureProductCarouselTabbed?: InputMaybe<FeatureProductCarouselTabbedUpdateManyWithNestedWhereInput>;
};

export type ProductCarouselCuratedParentUpdateOneInlineInput = {
  /** Connect existing ProductCarouselCuratedParent document */
  connect?: InputMaybe<ProductCarouselCuratedParentWhereUniqueInput>;
  /** Create and connect one ProductCarouselCuratedParent document */
  create?: InputMaybe<ProductCarouselCuratedParentCreateInput>;
  /** Delete currently connected ProductCarouselCuratedParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected ProductCarouselCuratedParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single ProductCarouselCuratedParent document */
  update?: InputMaybe<ProductCarouselCuratedParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ProductCarouselCuratedParent document */
  upsert?: InputMaybe<ProductCarouselCuratedParentUpsertWithNestedWhereUniqueInput>;
};

export type ProductCarouselCuratedParentUpdateWithNestedWhereUniqueInput = {
  FeatureProductCarouselTabbed?: InputMaybe<FeatureProductCarouselTabbedUpdateWithNestedWhereUniqueInput>;
};

export type ProductCarouselCuratedParentUpsertWithNestedWhereUniqueInput = {
  FeatureProductCarouselTabbed?: InputMaybe<FeatureProductCarouselTabbedUpsertWithNestedWhereUniqueInput>;
};

export type ProductCarouselCuratedParentWhereInput = {
  FeatureProductCarouselTabbed?: InputMaybe<FeatureProductCarouselTabbedWhereInput>;
};

export type ProductCarouselCuratedParentWhereUniqueInput = {
  FeatureProductCarouselTabbed?: InputMaybe<FeatureProductCarouselTabbedWhereUniqueInput>;
};

export type ProductCarouselCuratedUpdateInput = {
  products?: InputMaybe<ProductPageUpdateManyInlineInput>;
  tabHeading?: InputMaybe<Scalars['String']>;
};

export type ProductCarouselCuratedUpdateManyInlineInput = {
  /** Create and connect multiple ProductCarouselCurated component instances */
  create?: InputMaybe<Array<ProductCarouselCuratedCreateWithPositionInput>>;
  /** Delete multiple ProductCarouselCurated documents */
  delete?: InputMaybe<Array<ProductCarouselCuratedWhereUniqueInput>>;
  /** Update multiple ProductCarouselCurated component instances */
  update?: InputMaybe<Array<ProductCarouselCuratedUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple ProductCarouselCurated component instances */
  upsert?: InputMaybe<Array<ProductCarouselCuratedUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ProductCarouselCuratedUpdateManyInput = {
  tabHeading?: InputMaybe<Scalars['String']>;
};

export type ProductCarouselCuratedUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ProductCarouselCuratedUpdateManyInput;
  /** Document search */
  where: ProductCarouselCuratedWhereInput;
};

export type ProductCarouselCuratedUpdateOneInlineInput = {
  /** Create and connect one ProductCarouselCurated document */
  create?: InputMaybe<ProductCarouselCuratedCreateInput>;
  /** Delete currently connected ProductCarouselCurated document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single ProductCarouselCurated document */
  update?: InputMaybe<ProductCarouselCuratedUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ProductCarouselCurated document */
  upsert?: InputMaybe<ProductCarouselCuratedUpsertWithNestedWhereUniqueInput>;
};

export type ProductCarouselCuratedUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<ProductCarouselCuratedUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ProductCarouselCuratedWhereUniqueInput;
};

export type ProductCarouselCuratedUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ProductCarouselCuratedUpdateInput;
  /** Unique document search */
  where: ProductCarouselCuratedWhereUniqueInput;
};

export type ProductCarouselCuratedUpsertInput = {
  /** Create document if it didn't exist */
  create: ProductCarouselCuratedCreateInput;
  /** Update document if it exists */
  update: ProductCarouselCuratedUpdateInput;
};

export type ProductCarouselCuratedUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<ProductCarouselCuratedUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ProductCarouselCuratedWhereUniqueInput;
};

export type ProductCarouselCuratedUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ProductCarouselCuratedUpsertInput;
  /** Unique document search */
  where: ProductCarouselCuratedWhereUniqueInput;
};

/** Identifies documents */
export type ProductCarouselCuratedWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProductCarouselCuratedWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProductCarouselCuratedWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProductCarouselCuratedWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  products_every?: InputMaybe<ProductPageWhereInput>;
  products_none?: InputMaybe<ProductPageWhereInput>;
  products_some?: InputMaybe<ProductPageWhereInput>;
  tabHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  tabHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  tabHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  tabHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  tabHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  tabHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  tabHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  tabHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  tabHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  tabHeading_starts_with?: InputMaybe<Scalars['String']>;
};

/** References ProductCarouselCurated record uniquely */
export type ProductCarouselCuratedWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type ProductHowTo = Node & {
  __typename?: 'ProductHowTo';
  configSearches: Array<ConfigSearch>;
  content?: Maybe<RichText>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<ProductHowTo>;
  headline?: Maybe<RichText>;
  /** List of ProductHowTo versions */
  history: Array<Version>;
  howToAsset1?: Maybe<Asset>;
  howToAsset2?: Maybe<Asset>;
  /** The unique identifier */
  id: Scalars['ID'];
  products: Array<ProductPage>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type ProductHowToConfigSearchesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigSearchWhereInput>;
};


export type ProductHowToCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ProductHowToDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type ProductHowToHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type ProductHowToHowToAsset1Args = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ProductHowToHowToAsset2Args = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ProductHowToProductsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProductPageWhereInput>;
};


export type ProductHowToPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ProductHowToScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type ProductHowToUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ProductHowToConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ProductHowToWhereUniqueInput;
};

/** A connection to a list of items. */
export type ProductHowToConnection = {
  __typename?: 'ProductHowToConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ProductHowToEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ProductHowToCreateInput = {
  configSearches?: InputMaybe<ConfigSearchCreateManyInlineInput>;
  content?: InputMaybe<Scalars['RichTextAST']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  headline?: InputMaybe<Scalars['RichTextAST']>;
  howToAsset1?: InputMaybe<AssetCreateOneInlineInput>;
  howToAsset2?: InputMaybe<AssetCreateOneInlineInput>;
  products?: InputMaybe<ProductPageCreateManyInlineInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type ProductHowToCreateManyInlineInput = {
  /** Connect multiple existing ProductHowTo documents */
  connect?: InputMaybe<Array<ProductHowToWhereUniqueInput>>;
  /** Create and connect multiple existing ProductHowTo documents */
  create?: InputMaybe<Array<ProductHowToCreateInput>>;
};

export type ProductHowToCreateOneInlineInput = {
  /** Connect one existing ProductHowTo document */
  connect?: InputMaybe<ProductHowToWhereUniqueInput>;
  /** Create and connect one ProductHowTo document */
  create?: InputMaybe<ProductHowToCreateInput>;
};

/** An edge in a connection. */
export type ProductHowToEdge = {
  __typename?: 'ProductHowToEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ProductHowTo;
};

/** Identifies documents */
export type ProductHowToManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProductHowToWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProductHowToWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProductHowToWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  configSearches_every?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_none?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_some?: InputMaybe<ConfigSearchWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ProductHowToWhereStageInput>;
  documentInStages_none?: InputMaybe<ProductHowToWhereStageInput>;
  documentInStages_some?: InputMaybe<ProductHowToWhereStageInput>;
  howToAsset1?: InputMaybe<AssetWhereInput>;
  howToAsset2?: InputMaybe<AssetWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  products_every?: InputMaybe<ProductPageWhereInput>;
  products_none?: InputMaybe<ProductPageWhereInput>;
  products_some?: InputMaybe<ProductPageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ProductHowToOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type ProductHowToUpdateInput = {
  configSearches?: InputMaybe<ConfigSearchUpdateManyInlineInput>;
  content?: InputMaybe<Scalars['RichTextAST']>;
  headline?: InputMaybe<Scalars['RichTextAST']>;
  howToAsset1?: InputMaybe<AssetUpdateOneInlineInput>;
  howToAsset2?: InputMaybe<AssetUpdateOneInlineInput>;
  products?: InputMaybe<ProductPageUpdateManyInlineInput>;
};

export type ProductHowToUpdateManyInlineInput = {
  /** Connect multiple existing ProductHowTo documents */
  connect?: InputMaybe<Array<ProductHowToConnectInput>>;
  /** Create and connect multiple ProductHowTo documents */
  create?: InputMaybe<Array<ProductHowToCreateInput>>;
  /** Delete multiple ProductHowTo documents */
  delete?: InputMaybe<Array<ProductHowToWhereUniqueInput>>;
  /** Disconnect multiple ProductHowTo documents */
  disconnect?: InputMaybe<Array<ProductHowToWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ProductHowTo documents */
  set?: InputMaybe<Array<ProductHowToWhereUniqueInput>>;
  /** Update multiple ProductHowTo documents */
  update?: InputMaybe<Array<ProductHowToUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ProductHowTo documents */
  upsert?: InputMaybe<Array<ProductHowToUpsertWithNestedWhereUniqueInput>>;
};

export type ProductHowToUpdateManyInput = {
  content?: InputMaybe<Scalars['RichTextAST']>;
  headline?: InputMaybe<Scalars['RichTextAST']>;
};

export type ProductHowToUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ProductHowToUpdateManyInput;
  /** Document search */
  where: ProductHowToWhereInput;
};

export type ProductHowToUpdateOneInlineInput = {
  /** Connect existing ProductHowTo document */
  connect?: InputMaybe<ProductHowToWhereUniqueInput>;
  /** Create and connect one ProductHowTo document */
  create?: InputMaybe<ProductHowToCreateInput>;
  /** Delete currently connected ProductHowTo document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected ProductHowTo document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single ProductHowTo document */
  update?: InputMaybe<ProductHowToUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ProductHowTo document */
  upsert?: InputMaybe<ProductHowToUpsertWithNestedWhereUniqueInput>;
};

export type ProductHowToUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ProductHowToUpdateInput;
  /** Unique document search */
  where: ProductHowToWhereUniqueInput;
};

export type ProductHowToUpsertInput = {
  /** Create document if it didn't exist */
  create: ProductHowToCreateInput;
  /** Update document if it exists */
  update: ProductHowToUpdateInput;
};

export type ProductHowToUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ProductHowToUpsertInput;
  /** Unique document search */
  where: ProductHowToWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type ProductHowToWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type ProductHowToWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProductHowToWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProductHowToWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProductHowToWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  configSearches_every?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_none?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_some?: InputMaybe<ConfigSearchWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ProductHowToWhereStageInput>;
  documentInStages_none?: InputMaybe<ProductHowToWhereStageInput>;
  documentInStages_some?: InputMaybe<ProductHowToWhereStageInput>;
  howToAsset1?: InputMaybe<AssetWhereInput>;
  howToAsset2?: InputMaybe<AssetWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  products_every?: InputMaybe<ProductPageWhereInput>;
  products_none?: InputMaybe<ProductPageWhereInput>;
  products_some?: InputMaybe<ProductPageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type ProductHowToWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProductHowToWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProductHowToWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProductHowToWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<ProductHowToWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References ProductHowTo record uniquely */
export type ProductHowToWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type ProductIcon = {
  __typename?: 'ProductIcon';
  icon?: Maybe<Asset>;
  iconText?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System stage field */
  stage: Stage;
};


export type ProductIconIconArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ProductIconConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ProductIconWhereUniqueInput;
};

/** A connection to a list of items. */
export type ProductIconConnection = {
  __typename?: 'ProductIconConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ProductIconEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ProductIconCreateInput = {
  icon?: InputMaybe<AssetCreateOneInlineInput>;
  iconText?: InputMaybe<Scalars['String']>;
};

export type ProductIconCreateManyInlineInput = {
  /** Create and connect multiple existing ProductIcon documents */
  create?: InputMaybe<Array<ProductIconCreateInput>>;
};

export type ProductIconCreateOneInlineInput = {
  /** Create and connect one ProductIcon document */
  create?: InputMaybe<ProductIconCreateInput>;
};

export type ProductIconCreateWithPositionInput = {
  /** Document to create */
  data: ProductIconCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type ProductIconEdge = {
  __typename?: 'ProductIconEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ProductIcon;
};

/** Identifies documents */
export type ProductIconManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProductIconWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProductIconWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProductIconWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  icon?: InputMaybe<AssetWhereInput>;
  iconText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  iconText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  iconText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  iconText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  iconText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  iconText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  iconText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  iconText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  iconText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  iconText_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
};

export enum ProductIconOrderByInput {
  IconTextAsc = 'iconText_ASC',
  IconTextDesc = 'iconText_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC'
}

export type ProductIconUpdateInput = {
  icon?: InputMaybe<AssetUpdateOneInlineInput>;
  iconText?: InputMaybe<Scalars['String']>;
};

export type ProductIconUpdateManyInlineInput = {
  /** Create and connect multiple ProductIcon component instances */
  create?: InputMaybe<Array<ProductIconCreateWithPositionInput>>;
  /** Delete multiple ProductIcon documents */
  delete?: InputMaybe<Array<ProductIconWhereUniqueInput>>;
  /** Update multiple ProductIcon component instances */
  update?: InputMaybe<Array<ProductIconUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple ProductIcon component instances */
  upsert?: InputMaybe<Array<ProductIconUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type ProductIconUpdateManyInput = {
  iconText?: InputMaybe<Scalars['String']>;
};

export type ProductIconUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ProductIconUpdateManyInput;
  /** Document search */
  where: ProductIconWhereInput;
};

export type ProductIconUpdateOneInlineInput = {
  /** Create and connect one ProductIcon document */
  create?: InputMaybe<ProductIconCreateInput>;
  /** Delete currently connected ProductIcon document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single ProductIcon document */
  update?: InputMaybe<ProductIconUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ProductIcon document */
  upsert?: InputMaybe<ProductIconUpsertWithNestedWhereUniqueInput>;
};

export type ProductIconUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<ProductIconUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ProductIconWhereUniqueInput;
};

export type ProductIconUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ProductIconUpdateInput;
  /** Unique document search */
  where: ProductIconWhereUniqueInput;
};

export type ProductIconUpsertInput = {
  /** Create document if it didn't exist */
  create: ProductIconCreateInput;
  /** Update document if it exists */
  update: ProductIconUpdateInput;
};

export type ProductIconUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<ProductIconUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: ProductIconWhereUniqueInput;
};

export type ProductIconUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ProductIconUpsertInput;
  /** Unique document search */
  where: ProductIconWhereUniqueInput;
};

/** Identifies documents */
export type ProductIconWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProductIconWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProductIconWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProductIconWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  icon?: InputMaybe<AssetWhereInput>;
  iconText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  iconText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  iconText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  iconText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  iconText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  iconText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  iconText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  iconText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  iconText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  iconText_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
};

/** References ProductIcon record uniquely */
export type ProductIconWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type ProductPage = Node & {
  __typename?: 'ProductPage';
  adminTitle?: Maybe<Scalars['String']>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<ProductPage>;
  handle: Scalars['String'];
  /** List of ProductPage versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  pageMeta?: Maybe<PageMeta>;
  product?: Maybe<ShopifyStorefront_Product>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  sections: Array<ProductProductRichContent>;
  shopifyId: Scalars['String'];
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type ProductPageCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ProductPageDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type ProductPageHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type ProductPagePageMetaArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ProductPagePublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type ProductPageScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type ProductPageSectionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type ProductPageUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ProductPageConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ProductPageWhereUniqueInput;
};

/** A connection to a list of items. */
export type ProductPageConnection = {
  __typename?: 'ProductPageConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ProductPageEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ProductPageCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  clhqw0gcf0hnj01uoeak2cuyo?: InputMaybe<ProductCarouselCuratedCreateManyInlineInput>;
  cli2g4l7d0la301tah1jg4r2p?: InputMaybe<SectionProductSpotlightGridCreateManyInlineInput>;
  cli2gkkjv0nqa01uobg6155ul?: InputMaybe<SectionProductSpotlightLargeCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  handle: Scalars['String'];
  pageMeta?: InputMaybe<PageMetaCreateOneInlineInput>;
  sections?: InputMaybe<ProductProductRichContentCreateManyInlineInput>;
  shopifyId: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type ProductPageCreateManyInlineInput = {
  /** Connect multiple existing ProductPage documents */
  connect?: InputMaybe<Array<ProductPageWhereUniqueInput>>;
  /** Create and connect multiple existing ProductPage documents */
  create?: InputMaybe<Array<ProductPageCreateInput>>;
};

export type ProductPageCreateOneInlineInput = {
  /** Connect one existing ProductPage document */
  connect?: InputMaybe<ProductPageWhereUniqueInput>;
  /** Create and connect one ProductPage document */
  create?: InputMaybe<ProductPageCreateInput>;
};

/** An edge in a connection. */
export type ProductPageEdge = {
  __typename?: 'ProductPageEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ProductPage;
};

/** Identifies documents */
export type ProductPageManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProductPageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProductPageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProductPageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ProductPageWhereStageInput>;
  documentInStages_none?: InputMaybe<ProductPageWhereStageInput>;
  documentInStages_some?: InputMaybe<ProductPageWhereStageInput>;
  handle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  handle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  handle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  handle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  handle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  handle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  handle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  handle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  handle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  handle_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  pageMeta?: InputMaybe<PageMetaWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  /** All values in which the union is empty */
  sections_empty?: InputMaybe<Scalars['Boolean']>;
  /** Matches if the union contains at least one connection to the provided item to the filter */
  sections_some?: InputMaybe<ProductProductRichContentWhereInput>;
  shopifyId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  shopifyId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  shopifyId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  shopifyId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  shopifyId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  shopifyId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  shopifyId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  shopifyId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  shopifyId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  shopifyId_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ProductPageOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  HandleAsc = 'handle_ASC',
  HandleDesc = 'handle_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  ShopifyIdAsc = 'shopifyId_ASC',
  ShopifyIdDesc = 'shopifyId_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type ProductPageUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  clhqw0gcf0hnj01uoeak2cuyo?: InputMaybe<ProductCarouselCuratedUpdateManyInlineInput>;
  cli2g4l7d0la301tah1jg4r2p?: InputMaybe<SectionProductSpotlightGridUpdateManyInlineInput>;
  cli2gkkjv0nqa01uobg6155ul?: InputMaybe<SectionProductSpotlightLargeUpdateManyInlineInput>;
  handle?: InputMaybe<Scalars['String']>;
  pageMeta?: InputMaybe<PageMetaUpdateOneInlineInput>;
  sections?: InputMaybe<ProductProductRichContentUpdateManyInlineInput>;
  shopifyId?: InputMaybe<Scalars['String']>;
};

export type ProductPageUpdateManyInlineInput = {
  /** Connect multiple existing ProductPage documents */
  connect?: InputMaybe<Array<ProductPageConnectInput>>;
  /** Create and connect multiple ProductPage documents */
  create?: InputMaybe<Array<ProductPageCreateInput>>;
  /** Delete multiple ProductPage documents */
  delete?: InputMaybe<Array<ProductPageWhereUniqueInput>>;
  /** Disconnect multiple ProductPage documents */
  disconnect?: InputMaybe<Array<ProductPageWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ProductPage documents */
  set?: InputMaybe<Array<ProductPageWhereUniqueInput>>;
  /** Update multiple ProductPage documents */
  update?: InputMaybe<Array<ProductPageUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ProductPage documents */
  upsert?: InputMaybe<Array<ProductPageUpsertWithNestedWhereUniqueInput>>;
};

export type ProductPageUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  handle?: InputMaybe<Scalars['String']>;
  shopifyId?: InputMaybe<Scalars['String']>;
};

export type ProductPageUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ProductPageUpdateManyInput;
  /** Document search */
  where: ProductPageWhereInput;
};

export type ProductPageUpdateOneInlineInput = {
  /** Connect existing ProductPage document */
  connect?: InputMaybe<ProductPageWhereUniqueInput>;
  /** Create and connect one ProductPage document */
  create?: InputMaybe<ProductPageCreateInput>;
  /** Delete currently connected ProductPage document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected ProductPage document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single ProductPage document */
  update?: InputMaybe<ProductPageUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ProductPage document */
  upsert?: InputMaybe<ProductPageUpsertWithNestedWhereUniqueInput>;
};

export type ProductPageUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ProductPageUpdateInput;
  /** Unique document search */
  where: ProductPageWhereUniqueInput;
};

export type ProductPageUpsertInput = {
  /** Create document if it didn't exist */
  create: ProductPageCreateInput;
  /** Update document if it exists */
  update: ProductPageUpdateInput;
};

export type ProductPageUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ProductPageUpsertInput;
  /** Unique document search */
  where: ProductPageWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type ProductPageWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type ProductPageWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProductPageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProductPageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProductPageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<ProductPageWhereStageInput>;
  documentInStages_none?: InputMaybe<ProductPageWhereStageInput>;
  documentInStages_some?: InputMaybe<ProductPageWhereStageInput>;
  handle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  handle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  handle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  handle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  handle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  handle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  handle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  handle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  handle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  handle_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  pageMeta?: InputMaybe<PageMetaWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  /** All values in which the union is empty */
  sections_empty?: InputMaybe<Scalars['Boolean']>;
  /** Matches if the union contains at least one connection to the provided item to the filter */
  sections_some?: InputMaybe<ProductProductRichContentWhereInput>;
  shopifyId?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  shopifyId_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  shopifyId_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  shopifyId_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  shopifyId_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  shopifyId_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  shopifyId_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  shopifyId_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  shopifyId_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  shopifyId_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type ProductPageWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ProductPageWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ProductPageWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ProductPageWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<ProductPageWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References ProductPage record uniquely */
export type ProductPageWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type ProductProductRichContent = ProductBenefitsGrid | ProductHowTo | SectionBlogListing | SectionProductMain | SectionProductReview | SectionRelatedProduct | SectionSocialMediaCtaSmall;

export type ProductProductRichContentConnectInput = {
  ProductBenefitsGrid?: InputMaybe<ProductBenefitsGridConnectInput>;
  ProductHowTo?: InputMaybe<ProductHowToConnectInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingConnectInput>;
  SectionProductMain?: InputMaybe<SectionProductMainConnectInput>;
  SectionProductReview?: InputMaybe<SectionProductReviewConnectInput>;
  SectionRelatedProduct?: InputMaybe<SectionRelatedProductConnectInput>;
  SectionSocialMediaCtaSmall?: InputMaybe<SectionSocialMediaCtaSmallConnectInput>;
};

export type ProductProductRichContentCreateInput = {
  ProductBenefitsGrid?: InputMaybe<ProductBenefitsGridCreateInput>;
  ProductHowTo?: InputMaybe<ProductHowToCreateInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingCreateInput>;
  SectionProductMain?: InputMaybe<SectionProductMainCreateInput>;
  SectionProductReview?: InputMaybe<SectionProductReviewCreateInput>;
  SectionRelatedProduct?: InputMaybe<SectionRelatedProductCreateInput>;
  SectionSocialMediaCtaSmall?: InputMaybe<SectionSocialMediaCtaSmallCreateInput>;
};

export type ProductProductRichContentCreateManyInlineInput = {
  /** Connect multiple existing ProductProductRichContent documents */
  connect?: InputMaybe<Array<ProductProductRichContentWhereUniqueInput>>;
  /** Create and connect multiple existing ProductProductRichContent documents */
  create?: InputMaybe<Array<ProductProductRichContentCreateInput>>;
};

export type ProductProductRichContentCreateOneInlineInput = {
  /** Connect one existing ProductProductRichContent document */
  connect?: InputMaybe<ProductProductRichContentWhereUniqueInput>;
  /** Create and connect one ProductProductRichContent document */
  create?: InputMaybe<ProductProductRichContentCreateInput>;
};

export type ProductProductRichContentUpdateInput = {
  ProductBenefitsGrid?: InputMaybe<ProductBenefitsGridUpdateInput>;
  ProductHowTo?: InputMaybe<ProductHowToUpdateInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingUpdateInput>;
  SectionProductMain?: InputMaybe<SectionProductMainUpdateInput>;
  SectionProductReview?: InputMaybe<SectionProductReviewUpdateInput>;
  SectionRelatedProduct?: InputMaybe<SectionRelatedProductUpdateInput>;
  SectionSocialMediaCtaSmall?: InputMaybe<SectionSocialMediaCtaSmallUpdateInput>;
};

export type ProductProductRichContentUpdateManyInlineInput = {
  /** Connect multiple existing ProductProductRichContent documents */
  connect?: InputMaybe<Array<ProductProductRichContentConnectInput>>;
  /** Create and connect multiple ProductProductRichContent documents */
  create?: InputMaybe<Array<ProductProductRichContentCreateInput>>;
  /** Delete multiple ProductProductRichContent documents */
  delete?: InputMaybe<Array<ProductProductRichContentWhereUniqueInput>>;
  /** Disconnect multiple ProductProductRichContent documents */
  disconnect?: InputMaybe<Array<ProductProductRichContentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ProductProductRichContent documents */
  set?: InputMaybe<Array<ProductProductRichContentWhereUniqueInput>>;
  /** Update multiple ProductProductRichContent documents */
  update?: InputMaybe<Array<ProductProductRichContentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ProductProductRichContent documents */
  upsert?: InputMaybe<Array<ProductProductRichContentUpsertWithNestedWhereUniqueInput>>;
};

export type ProductProductRichContentUpdateManyWithNestedWhereInput = {
  ProductBenefitsGrid?: InputMaybe<ProductBenefitsGridUpdateManyWithNestedWhereInput>;
  ProductHowTo?: InputMaybe<ProductHowToUpdateManyWithNestedWhereInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingUpdateManyWithNestedWhereInput>;
  SectionProductMain?: InputMaybe<SectionProductMainUpdateManyWithNestedWhereInput>;
  SectionProductReview?: InputMaybe<SectionProductReviewUpdateManyWithNestedWhereInput>;
  SectionRelatedProduct?: InputMaybe<SectionRelatedProductUpdateManyWithNestedWhereInput>;
  SectionSocialMediaCtaSmall?: InputMaybe<SectionSocialMediaCtaSmallUpdateManyWithNestedWhereInput>;
};

export type ProductProductRichContentUpdateOneInlineInput = {
  /** Connect existing ProductProductRichContent document */
  connect?: InputMaybe<ProductProductRichContentWhereUniqueInput>;
  /** Create and connect one ProductProductRichContent document */
  create?: InputMaybe<ProductProductRichContentCreateInput>;
  /** Delete currently connected ProductProductRichContent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected ProductProductRichContent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single ProductProductRichContent document */
  update?: InputMaybe<ProductProductRichContentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ProductProductRichContent document */
  upsert?: InputMaybe<ProductProductRichContentUpsertWithNestedWhereUniqueInput>;
};

export type ProductProductRichContentUpdateWithNestedWhereUniqueInput = {
  ProductBenefitsGrid?: InputMaybe<ProductBenefitsGridUpdateWithNestedWhereUniqueInput>;
  ProductHowTo?: InputMaybe<ProductHowToUpdateWithNestedWhereUniqueInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingUpdateWithNestedWhereUniqueInput>;
  SectionProductMain?: InputMaybe<SectionProductMainUpdateWithNestedWhereUniqueInput>;
  SectionProductReview?: InputMaybe<SectionProductReviewUpdateWithNestedWhereUniqueInput>;
  SectionRelatedProduct?: InputMaybe<SectionRelatedProductUpdateWithNestedWhereUniqueInput>;
  SectionSocialMediaCtaSmall?: InputMaybe<SectionSocialMediaCtaSmallUpdateWithNestedWhereUniqueInput>;
};

export type ProductProductRichContentUpsertWithNestedWhereUniqueInput = {
  ProductBenefitsGrid?: InputMaybe<ProductBenefitsGridUpsertWithNestedWhereUniqueInput>;
  ProductHowTo?: InputMaybe<ProductHowToUpsertWithNestedWhereUniqueInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingUpsertWithNestedWhereUniqueInput>;
  SectionProductMain?: InputMaybe<SectionProductMainUpsertWithNestedWhereUniqueInput>;
  SectionProductReview?: InputMaybe<SectionProductReviewUpsertWithNestedWhereUniqueInput>;
  SectionRelatedProduct?: InputMaybe<SectionRelatedProductUpsertWithNestedWhereUniqueInput>;
  SectionSocialMediaCtaSmall?: InputMaybe<SectionSocialMediaCtaSmallUpsertWithNestedWhereUniqueInput>;
};

export type ProductProductRichContentWhereInput = {
  ProductBenefitsGrid?: InputMaybe<ProductBenefitsGridWhereInput>;
  ProductHowTo?: InputMaybe<ProductHowToWhereInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingWhereInput>;
  SectionProductMain?: InputMaybe<SectionProductMainWhereInput>;
  SectionProductReview?: InputMaybe<SectionProductReviewWhereInput>;
  SectionRelatedProduct?: InputMaybe<SectionRelatedProductWhereInput>;
  SectionSocialMediaCtaSmall?: InputMaybe<SectionSocialMediaCtaSmallWhereInput>;
};

export type ProductProductRichContentWhereUniqueInput = {
  ProductBenefitsGrid?: InputMaybe<ProductBenefitsGridWhereUniqueInput>;
  ProductHowTo?: InputMaybe<ProductHowToWhereUniqueInput>;
  SectionBlogListing?: InputMaybe<SectionBlogListingWhereUniqueInput>;
  SectionProductMain?: InputMaybe<SectionProductMainWhereUniqueInput>;
  SectionProductReview?: InputMaybe<SectionProductReviewWhereUniqueInput>;
  SectionRelatedProduct?: InputMaybe<SectionRelatedProductWhereUniqueInput>;
  SectionSocialMediaCtaSmall?: InputMaybe<SectionSocialMediaCtaSmallWhereUniqueInput>;
};

export type Proposition = Node & {
  __typename?: 'Proposition';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Proposition>;
  fullWidthTemplates: Array<CmsPage>;
  /** List of Proposition versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  propositions: Array<PropositionItem>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type PropositionCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PropositionDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type PropositionFullWidthTemplatesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsPageWhereInput>;
};


export type PropositionHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type PropositionPropositionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<PropositionItemOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PropositionItemWhereInput>;
};


export type PropositionPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PropositionScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type PropositionUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type PropositionConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: PropositionWhereUniqueInput;
};

/** A connection to a list of items. */
export type PropositionConnection = {
  __typename?: 'PropositionConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<PropositionEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type PropositionCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  fullWidthTemplates?: InputMaybe<CmsPageCreateManyInlineInput>;
  name?: InputMaybe<Scalars['String']>;
  propositions?: InputMaybe<PropositionItemCreateManyInlineInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type PropositionCreateManyInlineInput = {
  /** Connect multiple existing Proposition documents */
  connect?: InputMaybe<Array<PropositionWhereUniqueInput>>;
  /** Create and connect multiple existing Proposition documents */
  create?: InputMaybe<Array<PropositionCreateInput>>;
};

export type PropositionCreateOneInlineInput = {
  /** Connect one existing Proposition document */
  connect?: InputMaybe<PropositionWhereUniqueInput>;
  /** Create and connect one Proposition document */
  create?: InputMaybe<PropositionCreateInput>;
};

/** An edge in a connection. */
export type PropositionEdge = {
  __typename?: 'PropositionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Proposition;
};

export type PropositionItem = {
  __typename?: 'PropositionItem';
  /** The unique identifier */
  id: Scalars['ID'];
  loadInNewWindow?: Maybe<Scalars['Boolean']>;
  propositionUrl?: Maybe<Scalars['String']>;
  propositiontext?: Maybe<Scalars['String']>;
  /** System stage field */
  stage: Stage;
};

export type PropositionItemConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: PropositionItemWhereUniqueInput;
};

/** A connection to a list of items. */
export type PropositionItemConnection = {
  __typename?: 'PropositionItemConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<PropositionItemEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type PropositionItemCreateInput = {
  loadInNewWindow?: InputMaybe<Scalars['Boolean']>;
  propositionUrl?: InputMaybe<Scalars['String']>;
  propositiontext?: InputMaybe<Scalars['String']>;
};

export type PropositionItemCreateManyInlineInput = {
  /** Create and connect multiple existing PropositionItem documents */
  create?: InputMaybe<Array<PropositionItemCreateInput>>;
};

export type PropositionItemCreateOneInlineInput = {
  /** Create and connect one PropositionItem document */
  create?: InputMaybe<PropositionItemCreateInput>;
};

export type PropositionItemCreateWithPositionInput = {
  /** Document to create */
  data: PropositionItemCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type PropositionItemEdge = {
  __typename?: 'PropositionItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: PropositionItem;
};

/** Identifies documents */
export type PropositionItemManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PropositionItemWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PropositionItemWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PropositionItemWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  loadInNewWindow?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  loadInNewWindow_not?: InputMaybe<Scalars['Boolean']>;
  propositionUrl?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  propositionUrl_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  propositionUrl_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  propositionUrl_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  propositionUrl_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  propositionUrl_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  propositionUrl_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  propositionUrl_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  propositionUrl_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  propositionUrl_starts_with?: InputMaybe<Scalars['String']>;
  propositiontext?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  propositiontext_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  propositiontext_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  propositiontext_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  propositiontext_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  propositiontext_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  propositiontext_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  propositiontext_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  propositiontext_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  propositiontext_starts_with?: InputMaybe<Scalars['String']>;
};

export enum PropositionItemOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  LoadInNewWindowAsc = 'loadInNewWindow_ASC',
  LoadInNewWindowDesc = 'loadInNewWindow_DESC',
  PropositionUrlAsc = 'propositionUrl_ASC',
  PropositionUrlDesc = 'propositionUrl_DESC',
  PropositiontextAsc = 'propositiontext_ASC',
  PropositiontextDesc = 'propositiontext_DESC'
}

export type PropositionItemParent = Proposition;

export type PropositionItemParentConnectInput = {
  Proposition?: InputMaybe<PropositionConnectInput>;
};

export type PropositionItemParentCreateInput = {
  Proposition?: InputMaybe<PropositionCreateInput>;
};

export type PropositionItemParentCreateManyInlineInput = {
  /** Connect multiple existing PropositionItemParent documents */
  connect?: InputMaybe<Array<PropositionItemParentWhereUniqueInput>>;
  /** Create and connect multiple existing PropositionItemParent documents */
  create?: InputMaybe<Array<PropositionItemParentCreateInput>>;
};

export type PropositionItemParentCreateOneInlineInput = {
  /** Connect one existing PropositionItemParent document */
  connect?: InputMaybe<PropositionItemParentWhereUniqueInput>;
  /** Create and connect one PropositionItemParent document */
  create?: InputMaybe<PropositionItemParentCreateInput>;
};

export type PropositionItemParentUpdateInput = {
  Proposition?: InputMaybe<PropositionUpdateInput>;
};

export type PropositionItemParentUpdateManyInlineInput = {
  /** Connect multiple existing PropositionItemParent documents */
  connect?: InputMaybe<Array<PropositionItemParentConnectInput>>;
  /** Create and connect multiple PropositionItemParent documents */
  create?: InputMaybe<Array<PropositionItemParentCreateInput>>;
  /** Delete multiple PropositionItemParent documents */
  delete?: InputMaybe<Array<PropositionItemParentWhereUniqueInput>>;
  /** Disconnect multiple PropositionItemParent documents */
  disconnect?: InputMaybe<Array<PropositionItemParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing PropositionItemParent documents */
  set?: InputMaybe<Array<PropositionItemParentWhereUniqueInput>>;
  /** Update multiple PropositionItemParent documents */
  update?: InputMaybe<Array<PropositionItemParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple PropositionItemParent documents */
  upsert?: InputMaybe<Array<PropositionItemParentUpsertWithNestedWhereUniqueInput>>;
};

export type PropositionItemParentUpdateManyWithNestedWhereInput = {
  Proposition?: InputMaybe<PropositionUpdateManyWithNestedWhereInput>;
};

export type PropositionItemParentUpdateOneInlineInput = {
  /** Connect existing PropositionItemParent document */
  connect?: InputMaybe<PropositionItemParentWhereUniqueInput>;
  /** Create and connect one PropositionItemParent document */
  create?: InputMaybe<PropositionItemParentCreateInput>;
  /** Delete currently connected PropositionItemParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected PropositionItemParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single PropositionItemParent document */
  update?: InputMaybe<PropositionItemParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single PropositionItemParent document */
  upsert?: InputMaybe<PropositionItemParentUpsertWithNestedWhereUniqueInput>;
};

export type PropositionItemParentUpdateWithNestedWhereUniqueInput = {
  Proposition?: InputMaybe<PropositionUpdateWithNestedWhereUniqueInput>;
};

export type PropositionItemParentUpsertWithNestedWhereUniqueInput = {
  Proposition?: InputMaybe<PropositionUpsertWithNestedWhereUniqueInput>;
};

export type PropositionItemParentWhereInput = {
  Proposition?: InputMaybe<PropositionWhereInput>;
};

export type PropositionItemParentWhereUniqueInput = {
  Proposition?: InputMaybe<PropositionWhereUniqueInput>;
};

export type PropositionItemUpdateInput = {
  loadInNewWindow?: InputMaybe<Scalars['Boolean']>;
  propositionUrl?: InputMaybe<Scalars['String']>;
  propositiontext?: InputMaybe<Scalars['String']>;
};

export type PropositionItemUpdateManyInlineInput = {
  /** Create and connect multiple PropositionItem component instances */
  create?: InputMaybe<Array<PropositionItemCreateWithPositionInput>>;
  /** Delete multiple PropositionItem documents */
  delete?: InputMaybe<Array<PropositionItemWhereUniqueInput>>;
  /** Update multiple PropositionItem component instances */
  update?: InputMaybe<Array<PropositionItemUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple PropositionItem component instances */
  upsert?: InputMaybe<Array<PropositionItemUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type PropositionItemUpdateManyInput = {
  loadInNewWindow?: InputMaybe<Scalars['Boolean']>;
  propositionUrl?: InputMaybe<Scalars['String']>;
  propositiontext?: InputMaybe<Scalars['String']>;
};

export type PropositionItemUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: PropositionItemUpdateManyInput;
  /** Document search */
  where: PropositionItemWhereInput;
};

export type PropositionItemUpdateOneInlineInput = {
  /** Create and connect one PropositionItem document */
  create?: InputMaybe<PropositionItemCreateInput>;
  /** Delete currently connected PropositionItem document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single PropositionItem document */
  update?: InputMaybe<PropositionItemUpdateWithNestedWhereUniqueInput>;
  /** Upsert single PropositionItem document */
  upsert?: InputMaybe<PropositionItemUpsertWithNestedWhereUniqueInput>;
};

export type PropositionItemUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<PropositionItemUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: PropositionItemWhereUniqueInput;
};

export type PropositionItemUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: PropositionItemUpdateInput;
  /** Unique document search */
  where: PropositionItemWhereUniqueInput;
};

export type PropositionItemUpsertInput = {
  /** Create document if it didn't exist */
  create: PropositionItemCreateInput;
  /** Update document if it exists */
  update: PropositionItemUpdateInput;
};

export type PropositionItemUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<PropositionItemUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: PropositionItemWhereUniqueInput;
};

export type PropositionItemUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: PropositionItemUpsertInput;
  /** Unique document search */
  where: PropositionItemWhereUniqueInput;
};

/** Identifies documents */
export type PropositionItemWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PropositionItemWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PropositionItemWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PropositionItemWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  loadInNewWindow?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  loadInNewWindow_not?: InputMaybe<Scalars['Boolean']>;
  propositionUrl?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  propositionUrl_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  propositionUrl_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  propositionUrl_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  propositionUrl_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  propositionUrl_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  propositionUrl_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  propositionUrl_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  propositionUrl_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  propositionUrl_starts_with?: InputMaybe<Scalars['String']>;
  propositiontext?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  propositiontext_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  propositiontext_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  propositiontext_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  propositiontext_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  propositiontext_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  propositiontext_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  propositiontext_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  propositiontext_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  propositiontext_starts_with?: InputMaybe<Scalars['String']>;
};

/** References PropositionItem record uniquely */
export type PropositionItemWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Identifies documents */
export type PropositionManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PropositionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PropositionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PropositionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<PropositionWhereStageInput>;
  documentInStages_none?: InputMaybe<PropositionWhereStageInput>;
  documentInStages_some?: InputMaybe<PropositionWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  propositions_every?: InputMaybe<PropositionItemWhereInput>;
  propositions_none?: InputMaybe<PropositionItemWhereInput>;
  propositions_some?: InputMaybe<PropositionItemWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum PropositionOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type PropositionUpdateInput = {
  fullWidthTemplates?: InputMaybe<CmsPageUpdateManyInlineInput>;
  name?: InputMaybe<Scalars['String']>;
  propositions?: InputMaybe<PropositionItemUpdateManyInlineInput>;
};

export type PropositionUpdateManyInlineInput = {
  /** Connect multiple existing Proposition documents */
  connect?: InputMaybe<Array<PropositionConnectInput>>;
  /** Create and connect multiple Proposition documents */
  create?: InputMaybe<Array<PropositionCreateInput>>;
  /** Delete multiple Proposition documents */
  delete?: InputMaybe<Array<PropositionWhereUniqueInput>>;
  /** Disconnect multiple Proposition documents */
  disconnect?: InputMaybe<Array<PropositionWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Proposition documents */
  set?: InputMaybe<Array<PropositionWhereUniqueInput>>;
  /** Update multiple Proposition documents */
  update?: InputMaybe<Array<PropositionUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Proposition documents */
  upsert?: InputMaybe<Array<PropositionUpsertWithNestedWhereUniqueInput>>;
};

export type PropositionUpdateManyInput = {
  name?: InputMaybe<Scalars['String']>;
};

export type PropositionUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: PropositionUpdateManyInput;
  /** Document search */
  where: PropositionWhereInput;
};

export type PropositionUpdateOneInlineInput = {
  /** Connect existing Proposition document */
  connect?: InputMaybe<PropositionWhereUniqueInput>;
  /** Create and connect one Proposition document */
  create?: InputMaybe<PropositionCreateInput>;
  /** Delete currently connected Proposition document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Proposition document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Proposition document */
  update?: InputMaybe<PropositionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Proposition document */
  upsert?: InputMaybe<PropositionUpsertWithNestedWhereUniqueInput>;
};

export type PropositionUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: PropositionUpdateInput;
  /** Unique document search */
  where: PropositionWhereUniqueInput;
};

export type PropositionUpsertInput = {
  /** Create document if it didn't exist */
  create: PropositionCreateInput;
  /** Update document if it exists */
  update: PropositionUpdateInput;
};

export type PropositionUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: PropositionUpsertInput;
  /** Unique document search */
  where: PropositionWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type PropositionWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type PropositionWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PropositionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PropositionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PropositionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<PropositionWhereStageInput>;
  documentInStages_none?: InputMaybe<PropositionWhereStageInput>;
  documentInStages_some?: InputMaybe<PropositionWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  propositions_every?: InputMaybe<PropositionItemWhereInput>;
  propositions_none?: InputMaybe<PropositionItemWhereInput>;
  propositions_some?: InputMaybe<PropositionItemWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type PropositionWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PropositionWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PropositionWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PropositionWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<PropositionWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Proposition record uniquely */
export type PropositionWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type PublishLocaleInput = {
  /** Locales to publish */
  locale: Locale;
  /** Stages to publish selected locales to */
  stages: Array<Stage>;
};

export type Query = {
  __typename?: 'Query';
  /** Retrieve a single asset */
  asset?: Maybe<Asset>;
  /** Retrieve document version */
  assetVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple assets */
  assets: Array<Asset>;
  /** Retrieve multiple assets using the Relay connection interface */
  assetsConnection: AssetConnection;
  /** Retrieve a single blogArticle */
  blogArticle?: Maybe<BlogArticle>;
  /** Retrieve document version */
  blogArticleVersion?: Maybe<DocumentVersion>;
  /** Retrieve a single blogAuthor */
  blogAuthor?: Maybe<BlogAuthor>;
  /** Retrieve document version */
  blogAuthorVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple blogAuthors */
  blogAuthors: Array<BlogAuthor>;
  /** Retrieve multiple blogAuthors using the Relay connection interface */
  blogAuthorsConnection: BlogAuthorConnection;
  /** Retrieve a single brandLogoGrid */
  brandLogoGrid?: Maybe<BrandLogoGrid>;
  /** Retrieve document version */
  brandLogoGridVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple brandLogoGrids */
  brandLogoGrids: Array<BrandLogoGrid>;
  /** Retrieve multiple brandLogoGrids using the Relay connection interface */
  brandLogoGridsConnection: BrandLogoGridConnection;
  /** Retrieve a single brandsBrandLogo */
  brandsBrandLogo?: Maybe<BrandsBrandLogo>;
  /** Retrieve document version */
  brandsBrandLogoVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple brandsBrandsLogos */
  brandsBrandsLogos: Array<BrandsBrandLogo>;
  /** Retrieve multiple brandsBrandsLogos using the Relay connection interface */
  brandsBrandsLogosConnection: BrandsBrandLogoConnection;
  /** Retrieve a single cMSPage */
  cMSPage?: Maybe<CmsPage>;
  /** Retrieve document version */
  cMSPageVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple cMSPages */
  cMSPages: Array<CmsPage>;
  /** Retrieve multiple cMSPages using the Relay connection interface */
  cMSPagesConnection: CmsPageConnection;
  /** Retrieve a single collectionPage */
  collectionPage?: Maybe<CollectionPage>;
  /** Retrieve document version */
  collectionPageVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple collectionPages */
  collectionPages: Array<CollectionPage>;
  /** Retrieve multiple collectionPages using the Relay connection interface */
  collectionPagesConnection: CollectionPageConnection;
  /** Retrieve a single configCareer */
  configCareer?: Maybe<ConfigCareer>;
  /** Retrieve document version */
  configCareerVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple configCareers */
  configCareers: Array<ConfigCareer>;
  /** Retrieve multiple configCareers using the Relay connection interface */
  configCareersConnection: ConfigCareerConnection;
  /** Retrieve a single configSalonBooking */
  configSalonBooking?: Maybe<ConfigSalonBooking>;
  /** Retrieve document version */
  configSalonBookingVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple configSalonBookings */
  configSalonBookings: Array<ConfigSalonBooking>;
  /** Retrieve multiple configSalonBookings using the Relay connection interface */
  configSalonBookingsConnection: ConfigSalonBookingConnection;
  /** Retrieve a single configSalonMenu */
  configSalonMenu?: Maybe<ConfigSalonMenu>;
  /** Retrieve document version */
  configSalonMenuVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple configSalonMenus */
  configSalonMenus: Array<ConfigSalonMenu>;
  /** Retrieve multiple configSalonMenus using the Relay connection interface */
  configSalonMenusConnection: ConfigSalonMenuConnection;
  /** Retrieve a single configSearch */
  configSearch?: Maybe<ConfigSearch>;
  /** Retrieve document version */
  configSearchVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple configSearches */
  configSearches: Array<ConfigSearch>;
  /** Retrieve multiple configSearches using the Relay connection interface */
  configSearchesConnection: ConfigSearchConnection;
  /** Retrieve a single editorialText */
  editorialText?: Maybe<EditorialText>;
  /** Retrieve document version */
  editorialTextVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple editorialTexts */
  editorialTexts: Array<EditorialText>;
  /** Retrieve multiple editorialTexts using the Relay connection interface */
  editorialTextsConnection: EditorialTextConnection;
  /** Retrieve a single featureProductCarouselTabbed */
  featureProductCarouselTabbed?: Maybe<FeatureProductCarouselTabbed>;
  /** Retrieve document version */
  featureProductCarouselTabbedVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple featureProductCarouselTabs */
  featureProductCarouselTabs: Array<FeatureProductCarouselTabbed>;
  /** Retrieve multiple featureProductCarouselTabs using the Relay connection interface */
  featureProductCarouselTabsConnection: FeatureProductCarouselTabbedConnection;
  /** Retrieve a single footerConfig */
  footerConfig?: Maybe<FooterConfig>;
  /** Retrieve document version */
  footerConfigVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple footerConfigs */
  footerConfigs: Array<FooterConfig>;
  /** Retrieve multiple footerConfigs using the Relay connection interface */
  footerConfigsConnection: FooterConfigConnection;
  /** Retrieve a single headerConfig */
  headerConfig?: Maybe<HeaderConfig>;
  /** Retrieve document version */
  headerConfigVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple headerConfigs */
  headerConfigs: Array<HeaderConfig>;
  /** Retrieve multiple headerConfigs using the Relay connection interface */
  headerConfigsConnection: HeaderConfigConnection;
  /** Retrieve a single heroBanner */
  heroBanner?: Maybe<HeroBanner>;
  /** Retrieve document version */
  heroBannerVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple heroBanners */
  heroBanners: Array<HeroBanner>;
  /** Retrieve multiple heroBanners using the Relay connection interface */
  heroBannersConnection: HeroBannerConnection;
  /** Retrieve a single joinCTApanel */
  joinCTApanel?: Maybe<JoinCtApanel>;
  /** Retrieve document version */
  joinCTApanelVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple jointCTApanels */
  jointCTApanels: Array<JoinCtApanel>;
  /** Retrieve multiple jointCTApanels using the Relay connection interface */
  jointCTApanelsConnection: JoinCtApanelConnection;
  /** Retrieve a single modulePromoBanner */
  modulePromoBanner?: Maybe<ModulePromoBanner>;
  /** Retrieve document version */
  modulePromoBannerVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple modulePromoBanners */
  modulePromoBanners: Array<ModulePromoBanner>;
  /** Retrieve multiple modulePromoBanners using the Relay connection interface */
  modulePromoBannersConnection: ModulePromoBannerConnection;
  /** Retrieve a single multiCollectionSlider */
  multiCollectionSlider?: Maybe<MultiCollectionSlider>;
  /** Retrieve document version */
  multiCollectionSliderVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple multiCollectionSliders */
  multiCollectionSliders: Array<MultiCollectionSlider>;
  /** Retrieve multiple multiCollectionSliders using the Relay connection interface */
  multiCollectionSlidersConnection: MultiCollectionSliderConnection;
  /** Fetches an object given its ID */
  node?: Maybe<Node>;
  /** Retrieve a single offerTiles */
  offerTiles?: Maybe<OfferTiles>;
  /** Retrieve document version */
  offerTilesVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple offerTiless */
  offerTiless: Array<OfferTiles>;
  /** Retrieve multiple offerTiless using the Relay connection interface */
  offerTilessConnection: OfferTilesConnection;
  /** Retrieve multiple pageBlogArticles */
  pageBlogArticles: Array<BlogArticle>;
  /** Retrieve multiple pageBlogArticles using the Relay connection interface */
  pageBlogArticlesConnection: BlogArticleConnection;
  /** Retrieve a single pageBuyingGuide */
  pageBuyingGuide?: Maybe<PageBuyingGuide>;
  /** Retrieve document version */
  pageBuyingGuideVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple pageBuyingGuides */
  pageBuyingGuides: Array<PageBuyingGuide>;
  /** Retrieve multiple pageBuyingGuides using the Relay connection interface */
  pageBuyingGuidesConnection: PageBuyingGuideConnection;
  /** Retrieve a single productBenefitsGrid */
  productBenefitsGrid?: Maybe<ProductBenefitsGrid>;
  /** Retrieve document version */
  productBenefitsGridVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple productBenefitsGrids */
  productBenefitsGrids: Array<ProductBenefitsGrid>;
  /** Retrieve multiple productBenefitsGrids using the Relay connection interface */
  productBenefitsGridsConnection: ProductBenefitsGridConnection;
  /** Retrieve a single productHowTo */
  productHowTo?: Maybe<ProductHowTo>;
  /** Retrieve document version */
  productHowToVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple productHowTos */
  productHowTos: Array<ProductHowTo>;
  /** Retrieve multiple productHowTos using the Relay connection interface */
  productHowTosConnection: ProductHowToConnection;
  /** Retrieve a single productPage */
  productPage?: Maybe<ProductPage>;
  /** Retrieve document version */
  productPageVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple productPages */
  productPages: Array<ProductPage>;
  /** Retrieve multiple productPages using the Relay connection interface */
  productPagesConnection: ProductPageConnection;
  /** Retrieve a single proposition */
  proposition?: Maybe<Proposition>;
  /** Retrieve document version */
  propositionVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple propositions */
  propositions: Array<Proposition>;
  /** Retrieve multiple propositions using the Relay connection interface */
  propositionsConnection: PropositionConnection;
  /** Retrieve a single scheduledOperation */
  scheduledOperation?: Maybe<ScheduledOperation>;
  /** Retrieve multiple scheduledOperations */
  scheduledOperations: Array<ScheduledOperation>;
  /** Retrieve multiple scheduledOperations using the Relay connection interface */
  scheduledOperationsConnection: ScheduledOperationConnection;
  /** Retrieve a single scheduledRelease */
  scheduledRelease?: Maybe<ScheduledRelease>;
  /** Retrieve multiple scheduledReleases */
  scheduledReleases: Array<ScheduledRelease>;
  /** Retrieve multiple scheduledReleases using the Relay connection interface */
  scheduledReleasesConnection: ScheduledReleaseConnection;
  /** Retrieve a single sectionAccountSignupCta */
  sectionAccountSignupCta?: Maybe<SectionAccountSignupCta>;
  /** Retrieve document version */
  sectionAccountSignupCtaVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple sectionAccountSignupCtas */
  sectionAccountSignupCtas: Array<SectionAccountSignupCta>;
  /** Retrieve multiple sectionAccountSignupCtas using the Relay connection interface */
  sectionAccountSignupCtasConnection: SectionAccountSignupCtaConnection;
  /** Retrieve a single sectionBlogListing */
  sectionBlogListing?: Maybe<SectionBlogListing>;
  /** Retrieve document version */
  sectionBlogListingVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple sectionBlogListings */
  sectionBlogListings: Array<SectionBlogListing>;
  /** Retrieve multiple sectionBlogListings using the Relay connection interface */
  sectionBlogListingsConnection: SectionBlogListingConnection;
  /** Retrieve a single sectionCollectionCarousel */
  sectionCollectionCarousel?: Maybe<SectionCollectionCarousel>;
  /** Retrieve document version */
  sectionCollectionCarouselVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple sectionCollectionCarousels */
  sectionCollectionCarousels: Array<SectionCollectionCarousel>;
  /** Retrieve multiple sectionCollectionCarousels using the Relay connection interface */
  sectionCollectionCarouselsConnection: SectionCollectionCarouselConnection;
  /** Retrieve a single sectionCollectionDropDown */
  sectionCollectionDropDown?: Maybe<SectionCollectionDropDown>;
  /** Retrieve document version */
  sectionCollectionDropDownVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple sectionCollectionDropDowns */
  sectionCollectionDropDowns: Array<SectionCollectionDropDown>;
  /** Retrieve multiple sectionCollectionDropDowns using the Relay connection interface */
  sectionCollectionDropDownsConnection: SectionCollectionDropDownConnection;
  /** Retrieve a single sectionCollectionFeatureLarge */
  sectionCollectionFeatureLarge?: Maybe<SectionCollectionFeatureLarge>;
  /** Retrieve document version */
  sectionCollectionFeatureLargeVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple sectionCollectionFeatureLarges */
  sectionCollectionFeatureLarges: Array<SectionCollectionFeatureLarge>;
  /** Retrieve multiple sectionCollectionFeatureLarges using the Relay connection interface */
  sectionCollectionFeatureLargesConnection: SectionCollectionFeatureLargeConnection;
  /** Retrieve a single sectionCollectionMain */
  sectionCollectionMain?: Maybe<SectionCollectionMain>;
  /** Retrieve document version */
  sectionCollectionMainVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple sectionCollectionMains */
  sectionCollectionMains: Array<SectionCollectionMain>;
  /** Retrieve multiple sectionCollectionMains using the Relay connection interface */
  sectionCollectionMainsConnection: SectionCollectionMainConnection;
  /** Retrieve a single sectionCollectionSubcategoryLink */
  sectionCollectionSubcategoryLink?: Maybe<SectionCollectionSubcategoryLink>;
  /** Retrieve document version */
  sectionCollectionSubcategoryLinkVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple sectionCollectionSubcategoryLinks */
  sectionCollectionSubcategoryLinks: Array<SectionCollectionSubcategoryLink>;
  /** Retrieve multiple sectionCollectionSubcategoryLinks using the Relay connection interface */
  sectionCollectionSubcategoryLinksConnection: SectionCollectionSubcategoryLinkConnection;
  /** Retrieve a single sectionCtaButton */
  sectionCtaButton?: Maybe<SectionCtaButton>;
  /** Retrieve document version */
  sectionCtaButtonVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple sectionCtaButtons */
  sectionCtaButtons: Array<SectionCtaButton>;
  /** Retrieve multiple sectionCtaButtons using the Relay connection interface */
  sectionCtaButtonsConnection: SectionCtaButtonConnection;
  /** Retrieve a single sectionFullWidthImage */
  sectionFullWidthImage?: Maybe<SectionFullWidthImage>;
  /** Retrieve document version */
  sectionFullWidthImageVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple sectionFullWidthImages */
  sectionFullWidthImages: Array<SectionFullWidthImage>;
  /** Retrieve multiple sectionFullWidthImages using the Relay connection interface */
  sectionFullWidthImagesConnection: SectionFullWidthImageConnection;
  /** Retrieve a single sectionImageAndTextGrid */
  sectionImageAndTextGrid?: Maybe<SectionImageAndTextGrid>;
  /** Retrieve document version */
  sectionImageAndTextGridVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple sectionImageAndTextGrids */
  sectionImageAndTextGrids: Array<SectionImageAndTextGrid>;
  /** Retrieve multiple sectionImageAndTextGrids using the Relay connection interface */
  sectionImageAndTextGridsConnection: SectionImageAndTextGridConnection;
  /** Retrieve a single sectionImageTextOverlay */
  sectionImageTextOverlay?: Maybe<SectionImageTextOverlay>;
  /** Retrieve document version */
  sectionImageTextOverlayVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple sectionImageTextOverlays */
  sectionImageTextOverlays: Array<SectionImageTextOverlay>;
  /** Retrieve multiple sectionImageTextOverlays using the Relay connection interface */
  sectionImageTextOverlaysConnection: SectionImageTextOverlayConnection;
  /** Retrieve a single sectionPreezieProductFinder */
  sectionPreezieProductFinder?: Maybe<SectionPreezieProductFinder>;
  /** Retrieve document version */
  sectionPreezieProductFinderVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple sectionPreezieProductFinders */
  sectionPreezieProductFinders: Array<SectionPreezieProductFinder>;
  /** Retrieve multiple sectionPreezieProductFinders using the Relay connection interface */
  sectionPreezieProductFindersConnection: SectionPreezieProductFinderConnection;
  /** Retrieve a single sectionProductMain */
  sectionProductMain?: Maybe<SectionProductMain>;
  /** Retrieve document version */
  sectionProductMainVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple sectionProductMains */
  sectionProductMains: Array<SectionProductMain>;
  /** Retrieve multiple sectionProductMains using the Relay connection interface */
  sectionProductMainsConnection: SectionProductMainConnection;
  /** Retrieve a single sectionProductReview */
  sectionProductReview?: Maybe<SectionProductReview>;
  /** Retrieve document version */
  sectionProductReviewVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple sectionProductReviews */
  sectionProductReviews: Array<SectionProductReview>;
  /** Retrieve multiple sectionProductReviews using the Relay connection interface */
  sectionProductReviewsConnection: SectionProductReviewConnection;
  /** Retrieve a single sectionProductSpotlightGrid */
  sectionProductSpotlightGrid?: Maybe<SectionProductSpotlightGrid>;
  /** Retrieve document version */
  sectionProductSpotlightGridVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple sectionProductSpotlightGrids */
  sectionProductSpotlightGrids: Array<SectionProductSpotlightGrid>;
  /** Retrieve multiple sectionProductSpotlightGrids using the Relay connection interface */
  sectionProductSpotlightGridsConnection: SectionProductSpotlightGridConnection;
  /** Retrieve a single sectionProductSpotlightLarge */
  sectionProductSpotlightLarge?: Maybe<SectionProductSpotlightLarge>;
  /** Retrieve document version */
  sectionProductSpotlightLargeVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple sectionProductSpotlightLarges */
  sectionProductSpotlightLarges: Array<SectionProductSpotlightLarge>;
  /** Retrieve multiple sectionProductSpotlightLarges using the Relay connection interface */
  sectionProductSpotlightLargesConnection: SectionProductSpotlightLargeConnection;
  /** Retrieve a single sectionRelatedProduct */
  sectionRelatedProduct?: Maybe<SectionRelatedProduct>;
  /** Retrieve document version */
  sectionRelatedProductVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple sectionRelatedProducts */
  sectionRelatedProducts: Array<SectionRelatedProduct>;
  /** Retrieve multiple sectionRelatedProducts using the Relay connection interface */
  sectionRelatedProductsConnection: SectionRelatedProductConnection;
  /** Retrieve a single sectionSalonServiceBlock */
  sectionSalonServiceBlock?: Maybe<SectionSalonServiceBlock>;
  /** Retrieve document version */
  sectionSalonServiceBlockVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple sectionSalonServiceBlocks */
  sectionSalonServiceBlocks: Array<SectionSalonServiceBlock>;
  /** Retrieve multiple sectionSalonServiceBlocks using the Relay connection interface */
  sectionSalonServiceBlocksConnection: SectionSalonServiceBlockConnection;
  /** Retrieve a single sectionSearchTermList */
  sectionSearchTermList?: Maybe<SectionSearchTermList>;
  /** Retrieve document version */
  sectionSearchTermListVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple sectionSearchTermLists */
  sectionSearchTermLists: Array<SectionSearchTermList>;
  /** Retrieve multiple sectionSearchTermLists using the Relay connection interface */
  sectionSearchTermListsConnection: SectionSearchTermListConnection;
  /** Retrieve a single sectionSeoText */
  sectionSeoText?: Maybe<SectionSeoText>;
  /** Retrieve document version */
  sectionSeoTextVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple sectionSeoTexts */
  sectionSeoTexts: Array<SectionSeoText>;
  /** Retrieve multiple sectionSeoTexts using the Relay connection interface */
  sectionSeoTextsConnection: SectionSeoTextConnection;
  /** Retrieve a single sectionSocialMediaCtaSmall */
  sectionSocialMediaCtaSmall?: Maybe<SectionSocialMediaCtaSmall>;
  /** Retrieve document version */
  sectionSocialMediaCtaSmallVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple sectionSocialMediaCtaSmalls */
  sectionSocialMediaCtaSmalls: Array<SectionSocialMediaCtaSmall>;
  /** Retrieve multiple sectionSocialMediaCtaSmalls using the Relay connection interface */
  sectionSocialMediaCtaSmallsConnection: SectionSocialMediaCtaSmallConnection;
  /** Retrieve a single sectionTextBlock */
  sectionTextBlock?: Maybe<SectionTextBlock>;
  /** Retrieve document version */
  sectionTextBlockVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple sectionTextBlocks */
  sectionTextBlocks: Array<SectionTextBlock>;
  /** Retrieve multiple sectionTextBlocks using the Relay connection interface */
  sectionTextBlocksConnection: SectionTextBlockConnection;
  /** Retrieve a single sectionVideoCarousel */
  sectionVideoCarousel?: Maybe<SectionVideoCarousel>;
  /** Retrieve document version */
  sectionVideoCarouselVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple sectionVideoCarousels */
  sectionVideoCarousels: Array<SectionVideoCarousel>;
  /** Retrieve multiple sectionVideoCarousels using the Relay connection interface */
  sectionVideoCarouselsConnection: SectionVideoCarouselConnection;
  /** Retrieve a single sectionsAccordion */
  sectionsAccordion?: Maybe<SectionsAccordion>;
  /** Retrieve document version */
  sectionsAccordionVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple sectionsAccordions */
  sectionsAccordions: Array<SectionsAccordion>;
  /** Retrieve multiple sectionsAccordions using the Relay connection interface */
  sectionsAccordionsConnection: SectionsAccordionConnection;
  /** Retrieve a single socialMediaCtaLarge */
  socialMediaCtaLarge?: Maybe<SocialMediaCtaLarge>;
  /** Retrieve document version */
  socialMediaCtaLargeVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple socialMediaCtaLarges */
  socialMediaCtaLarges: Array<SocialMediaCtaLarge>;
  /** Retrieve multiple socialMediaCtaLarges using the Relay connection interface */
  socialMediaCtaLargesConnection: SocialMediaCtaLargeConnection;
  /** Retrieve a single user */
  user?: Maybe<User>;
  /** Retrieve multiple users */
  users: Array<User>;
  /** Retrieve multiple users using the Relay connection interface */
  usersConnection: UserConnection;
  /** Retrieve a single websiteConfig */
  websiteConfig?: Maybe<WebsiteConfig>;
  /** Retrieve document version */
  websiteConfigVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple websiteConfigs */
  websiteConfigs: Array<WebsiteConfig>;
  /** Retrieve multiple websiteConfigs using the Relay connection interface */
  websiteConfigsConnection: WebsiteConfigConnection;
};


export type QueryAssetArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: AssetWhereUniqueInput;
};


export type QueryAssetVersionArgs = {
  where: VersionWhereInput;
};


export type QueryAssetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<AssetWhereInput>;
};


export type QueryAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<AssetWhereInput>;
};


export type QueryBlogArticleArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: BlogArticleWhereUniqueInput;
};


export type QueryBlogArticleVersionArgs = {
  where: VersionWhereInput;
};


export type QueryBlogAuthorArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: BlogAuthorWhereUniqueInput;
};


export type QueryBlogAuthorVersionArgs = {
  where: VersionWhereInput;
};


export type QueryBlogAuthorsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<BlogAuthorOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<BlogAuthorWhereInput>;
};


export type QueryBlogAuthorsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<BlogAuthorOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<BlogAuthorWhereInput>;
};


export type QueryBrandLogoGridArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: BrandLogoGridWhereUniqueInput;
};


export type QueryBrandLogoGridVersionArgs = {
  where: VersionWhereInput;
};


export type QueryBrandLogoGridsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<BrandLogoGridOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<BrandLogoGridWhereInput>;
};


export type QueryBrandLogoGridsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<BrandLogoGridOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<BrandLogoGridWhereInput>;
};


export type QueryBrandsBrandLogoArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: BrandsBrandLogoWhereUniqueInput;
};


export type QueryBrandsBrandLogoVersionArgs = {
  where: VersionWhereInput;
};


export type QueryBrandsBrandsLogosArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<BrandsBrandLogoOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<BrandsBrandLogoWhereInput>;
};


export type QueryBrandsBrandsLogosConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<BrandsBrandLogoOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<BrandsBrandLogoWhereInput>;
};


export type QueryCMsPageArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: CmsPageWhereUniqueInput;
};


export type QueryCMsPageVersionArgs = {
  where: VersionWhereInput;
};


export type QueryCMsPagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<CmsPageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<CmsPageWhereInput>;
};


export type QueryCMsPagesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<CmsPageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<CmsPageWhereInput>;
};


export type QueryCollectionPageArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: CollectionPageWhereUniqueInput;
};


export type QueryCollectionPageVersionArgs = {
  where: VersionWhereInput;
};


export type QueryCollectionPagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<CollectionPageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<CollectionPageWhereInput>;
};


export type QueryCollectionPagesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<CollectionPageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<CollectionPageWhereInput>;
};


export type QueryConfigCareerArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ConfigCareerWhereUniqueInput;
};


export type QueryConfigCareerVersionArgs = {
  where: VersionWhereInput;
};


export type QueryConfigCareersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ConfigCareerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ConfigCareerWhereInput>;
};


export type QueryConfigCareersConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ConfigCareerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ConfigCareerWhereInput>;
};


export type QueryConfigSalonBookingArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ConfigSalonBookingWhereUniqueInput;
};


export type QueryConfigSalonBookingVersionArgs = {
  where: VersionWhereInput;
};


export type QueryConfigSalonBookingsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ConfigSalonBookingOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ConfigSalonBookingWhereInput>;
};


export type QueryConfigSalonBookingsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ConfigSalonBookingOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ConfigSalonBookingWhereInput>;
};


export type QueryConfigSalonMenuArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ConfigSalonMenuWhereUniqueInput;
};


export type QueryConfigSalonMenuVersionArgs = {
  where: VersionWhereInput;
};


export type QueryConfigSalonMenusArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ConfigSalonMenuOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ConfigSalonMenuWhereInput>;
};


export type QueryConfigSalonMenusConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ConfigSalonMenuOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ConfigSalonMenuWhereInput>;
};


export type QueryConfigSearchArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ConfigSearchWhereUniqueInput;
};


export type QueryConfigSearchVersionArgs = {
  where: VersionWhereInput;
};


export type QueryConfigSearchesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ConfigSearchOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ConfigSearchWhereInput>;
};


export type QueryConfigSearchesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ConfigSearchOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ConfigSearchWhereInput>;
};


export type QueryEditorialTextArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: EditorialTextWhereUniqueInput;
};


export type QueryEditorialTextVersionArgs = {
  where: VersionWhereInput;
};


export type QueryEditorialTextsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<EditorialTextOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<EditorialTextWhereInput>;
};


export type QueryEditorialTextsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<EditorialTextOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<EditorialTextWhereInput>;
};


export type QueryFeatureProductCarouselTabbedArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: FeatureProductCarouselTabbedWhereUniqueInput;
};


export type QueryFeatureProductCarouselTabbedVersionArgs = {
  where: VersionWhereInput;
};


export type QueryFeatureProductCarouselTabsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<FeatureProductCarouselTabbedOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<FeatureProductCarouselTabbedWhereInput>;
};


export type QueryFeatureProductCarouselTabsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<FeatureProductCarouselTabbedOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<FeatureProductCarouselTabbedWhereInput>;
};


export type QueryFooterConfigArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: FooterConfigWhereUniqueInput;
};


export type QueryFooterConfigVersionArgs = {
  where: VersionWhereInput;
};


export type QueryFooterConfigsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<FooterConfigOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<FooterConfigWhereInput>;
};


export type QueryFooterConfigsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<FooterConfigOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<FooterConfigWhereInput>;
};


export type QueryHeaderConfigArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: HeaderConfigWhereUniqueInput;
};


export type QueryHeaderConfigVersionArgs = {
  where: VersionWhereInput;
};


export type QueryHeaderConfigsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<HeaderConfigOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<HeaderConfigWhereInput>;
};


export type QueryHeaderConfigsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<HeaderConfigOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<HeaderConfigWhereInput>;
};


export type QueryHeroBannerArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: HeroBannerWhereUniqueInput;
};


export type QueryHeroBannerVersionArgs = {
  where: VersionWhereInput;
};


export type QueryHeroBannersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<HeroBannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<HeroBannerWhereInput>;
};


export type QueryHeroBannersConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<HeroBannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<HeroBannerWhereInput>;
};


export type QueryJoinCtApanelArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: JoinCtApanelWhereUniqueInput;
};


export type QueryJoinCtApanelVersionArgs = {
  where: VersionWhereInput;
};


export type QueryJointCtApanelsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<JoinCtApanelOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<JoinCtApanelWhereInput>;
};


export type QueryJointCtApanelsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<JoinCtApanelOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<JoinCtApanelWhereInput>;
};


export type QueryModulePromoBannerArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ModulePromoBannerWhereUniqueInput;
};


export type QueryModulePromoBannerVersionArgs = {
  where: VersionWhereInput;
};


export type QueryModulePromoBannersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ModulePromoBannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ModulePromoBannerWhereInput>;
};


export type QueryModulePromoBannersConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ModulePromoBannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ModulePromoBannerWhereInput>;
};


export type QueryMultiCollectionSliderArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: MultiCollectionSliderWhereUniqueInput;
};


export type QueryMultiCollectionSliderVersionArgs = {
  where: VersionWhereInput;
};


export type QueryMultiCollectionSlidersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<MultiCollectionSliderOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<MultiCollectionSliderWhereInput>;
};


export type QueryMultiCollectionSlidersConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<MultiCollectionSliderOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<MultiCollectionSliderWhereInput>;
};


export type QueryNodeArgs = {
  id: Scalars['ID'];
  locales?: Array<Locale>;
  stage?: Stage;
};


export type QueryOfferTilesArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: OfferTilesWhereUniqueInput;
};


export type QueryOfferTilesVersionArgs = {
  where: VersionWhereInput;
};


export type QueryOfferTilessArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<OfferTilesOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<OfferTilesWhereInput>;
};


export type QueryOfferTilessConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<OfferTilesOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<OfferTilesWhereInput>;
};


export type QueryPageBlogArticlesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<BlogArticleOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<BlogArticleWhereInput>;
};


export type QueryPageBlogArticlesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<BlogArticleOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<BlogArticleWhereInput>;
};


export type QueryPageBuyingGuideArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: PageBuyingGuideWhereUniqueInput;
};


export type QueryPageBuyingGuideVersionArgs = {
  where: VersionWhereInput;
};


export type QueryPageBuyingGuidesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<PageBuyingGuideOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<PageBuyingGuideWhereInput>;
};


export type QueryPageBuyingGuidesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<PageBuyingGuideOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<PageBuyingGuideWhereInput>;
};


export type QueryProductBenefitsGridArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ProductBenefitsGridWhereUniqueInput;
};


export type QueryProductBenefitsGridVersionArgs = {
  where: VersionWhereInput;
};


export type QueryProductBenefitsGridsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ProductBenefitsGridOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ProductBenefitsGridWhereInput>;
};


export type QueryProductBenefitsGridsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ProductBenefitsGridOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ProductBenefitsGridWhereInput>;
};


export type QueryProductHowToArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ProductHowToWhereUniqueInput;
};


export type QueryProductHowToVersionArgs = {
  where: VersionWhereInput;
};


export type QueryProductHowTosArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ProductHowToOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ProductHowToWhereInput>;
};


export type QueryProductHowTosConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ProductHowToOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ProductHowToWhereInput>;
};


export type QueryProductPageArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ProductPageWhereUniqueInput;
};


export type QueryProductPageVersionArgs = {
  where: VersionWhereInput;
};


export type QueryProductPagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ProductPageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ProductPageWhereInput>;
};


export type QueryProductPagesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ProductPageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ProductPageWhereInput>;
};


export type QueryPropositionArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: PropositionWhereUniqueInput;
};


export type QueryPropositionVersionArgs = {
  where: VersionWhereInput;
};


export type QueryPropositionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<PropositionOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<PropositionWhereInput>;
};


export type QueryPropositionsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<PropositionOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<PropositionWhereInput>;
};


export type QueryScheduledOperationArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ScheduledOperationWhereUniqueInput;
};


export type QueryScheduledOperationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ScheduledOperationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type QueryScheduledOperationsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ScheduledOperationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type QueryScheduledReleaseArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ScheduledReleaseWhereUniqueInput;
};


export type QueryScheduledReleasesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ScheduledReleaseOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ScheduledReleaseWhereInput>;
};


export type QueryScheduledReleasesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ScheduledReleaseOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ScheduledReleaseWhereInput>;
};


export type QuerySectionAccountSignupCtaArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SectionAccountSignupCtaWhereUniqueInput;
};


export type QuerySectionAccountSignupCtaVersionArgs = {
  where: VersionWhereInput;
};


export type QuerySectionAccountSignupCtasArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionAccountSignupCtaOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionAccountSignupCtaWhereInput>;
};


export type QuerySectionAccountSignupCtasConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionAccountSignupCtaOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionAccountSignupCtaWhereInput>;
};


export type QuerySectionBlogListingArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SectionBlogListingWhereUniqueInput;
};


export type QuerySectionBlogListingVersionArgs = {
  where: VersionWhereInput;
};


export type QuerySectionBlogListingsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionBlogListingOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionBlogListingWhereInput>;
};


export type QuerySectionBlogListingsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionBlogListingOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionBlogListingWhereInput>;
};


export type QuerySectionCollectionCarouselArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SectionCollectionCarouselWhereUniqueInput;
};


export type QuerySectionCollectionCarouselVersionArgs = {
  where: VersionWhereInput;
};


export type QuerySectionCollectionCarouselsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionCollectionCarouselOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionCollectionCarouselWhereInput>;
};


export type QuerySectionCollectionCarouselsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionCollectionCarouselOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionCollectionCarouselWhereInput>;
};


export type QuerySectionCollectionDropDownArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SectionCollectionDropDownWhereUniqueInput;
};


export type QuerySectionCollectionDropDownVersionArgs = {
  where: VersionWhereInput;
};


export type QuerySectionCollectionDropDownsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionCollectionDropDownOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionCollectionDropDownWhereInput>;
};


export type QuerySectionCollectionDropDownsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionCollectionDropDownOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionCollectionDropDownWhereInput>;
};


export type QuerySectionCollectionFeatureLargeArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SectionCollectionFeatureLargeWhereUniqueInput;
};


export type QuerySectionCollectionFeatureLargeVersionArgs = {
  where: VersionWhereInput;
};


export type QuerySectionCollectionFeatureLargesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionCollectionFeatureLargeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionCollectionFeatureLargeWhereInput>;
};


export type QuerySectionCollectionFeatureLargesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionCollectionFeatureLargeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionCollectionFeatureLargeWhereInput>;
};


export type QuerySectionCollectionMainArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SectionCollectionMainWhereUniqueInput;
};


export type QuerySectionCollectionMainVersionArgs = {
  where: VersionWhereInput;
};


export type QuerySectionCollectionMainsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionCollectionMainOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionCollectionMainWhereInput>;
};


export type QuerySectionCollectionMainsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionCollectionMainOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionCollectionMainWhereInput>;
};


export type QuerySectionCollectionSubcategoryLinkArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SectionCollectionSubcategoryLinkWhereUniqueInput;
};


export type QuerySectionCollectionSubcategoryLinkVersionArgs = {
  where: VersionWhereInput;
};


export type QuerySectionCollectionSubcategoryLinksArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionCollectionSubcategoryLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionCollectionSubcategoryLinkWhereInput>;
};


export type QuerySectionCollectionSubcategoryLinksConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionCollectionSubcategoryLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionCollectionSubcategoryLinkWhereInput>;
};


export type QuerySectionCtaButtonArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SectionCtaButtonWhereUniqueInput;
};


export type QuerySectionCtaButtonVersionArgs = {
  where: VersionWhereInput;
};


export type QuerySectionCtaButtonsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionCtaButtonOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionCtaButtonWhereInput>;
};


export type QuerySectionCtaButtonsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionCtaButtonOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionCtaButtonWhereInput>;
};


export type QuerySectionFullWidthImageArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SectionFullWidthImageWhereUniqueInput;
};


export type QuerySectionFullWidthImageVersionArgs = {
  where: VersionWhereInput;
};


export type QuerySectionFullWidthImagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionFullWidthImageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionFullWidthImageWhereInput>;
};


export type QuerySectionFullWidthImagesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionFullWidthImageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionFullWidthImageWhereInput>;
};


export type QuerySectionImageAndTextGridArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SectionImageAndTextGridWhereUniqueInput;
};


export type QuerySectionImageAndTextGridVersionArgs = {
  where: VersionWhereInput;
};


export type QuerySectionImageAndTextGridsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionImageAndTextGridOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionImageAndTextGridWhereInput>;
};


export type QuerySectionImageAndTextGridsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionImageAndTextGridOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionImageAndTextGridWhereInput>;
};


export type QuerySectionImageTextOverlayArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SectionImageTextOverlayWhereUniqueInput;
};


export type QuerySectionImageTextOverlayVersionArgs = {
  where: VersionWhereInput;
};


export type QuerySectionImageTextOverlaysArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionImageTextOverlayOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionImageTextOverlayWhereInput>;
};


export type QuerySectionImageTextOverlaysConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionImageTextOverlayOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionImageTextOverlayWhereInput>;
};


export type QuerySectionPreezieProductFinderArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SectionPreezieProductFinderWhereUniqueInput;
};


export type QuerySectionPreezieProductFinderVersionArgs = {
  where: VersionWhereInput;
};


export type QuerySectionPreezieProductFindersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionPreezieProductFinderOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionPreezieProductFinderWhereInput>;
};


export type QuerySectionPreezieProductFindersConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionPreezieProductFinderOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionPreezieProductFinderWhereInput>;
};


export type QuerySectionProductMainArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SectionProductMainWhereUniqueInput;
};


export type QuerySectionProductMainVersionArgs = {
  where: VersionWhereInput;
};


export type QuerySectionProductMainsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionProductMainOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionProductMainWhereInput>;
};


export type QuerySectionProductMainsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionProductMainOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionProductMainWhereInput>;
};


export type QuerySectionProductReviewArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SectionProductReviewWhereUniqueInput;
};


export type QuerySectionProductReviewVersionArgs = {
  where: VersionWhereInput;
};


export type QuerySectionProductReviewsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionProductReviewOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionProductReviewWhereInput>;
};


export type QuerySectionProductReviewsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionProductReviewOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionProductReviewWhereInput>;
};


export type QuerySectionProductSpotlightGridArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SectionProductSpotlightGridWhereUniqueInput;
};


export type QuerySectionProductSpotlightGridVersionArgs = {
  where: VersionWhereInput;
};


export type QuerySectionProductSpotlightGridsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionProductSpotlightGridOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionProductSpotlightGridWhereInput>;
};


export type QuerySectionProductSpotlightGridsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionProductSpotlightGridOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionProductSpotlightGridWhereInput>;
};


export type QuerySectionProductSpotlightLargeArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SectionProductSpotlightLargeWhereUniqueInput;
};


export type QuerySectionProductSpotlightLargeVersionArgs = {
  where: VersionWhereInput;
};


export type QuerySectionProductSpotlightLargesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionProductSpotlightLargeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionProductSpotlightLargeWhereInput>;
};


export type QuerySectionProductSpotlightLargesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionProductSpotlightLargeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionProductSpotlightLargeWhereInput>;
};


export type QuerySectionRelatedProductArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SectionRelatedProductWhereUniqueInput;
};


export type QuerySectionRelatedProductVersionArgs = {
  where: VersionWhereInput;
};


export type QuerySectionRelatedProductsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionRelatedProductOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionRelatedProductWhereInput>;
};


export type QuerySectionRelatedProductsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionRelatedProductOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionRelatedProductWhereInput>;
};


export type QuerySectionSalonServiceBlockArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SectionSalonServiceBlockWhereUniqueInput;
};


export type QuerySectionSalonServiceBlockVersionArgs = {
  where: VersionWhereInput;
};


export type QuerySectionSalonServiceBlocksArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionSalonServiceBlockOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionSalonServiceBlockWhereInput>;
};


export type QuerySectionSalonServiceBlocksConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionSalonServiceBlockOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionSalonServiceBlockWhereInput>;
};


export type QuerySectionSearchTermListArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SectionSearchTermListWhereUniqueInput;
};


export type QuerySectionSearchTermListVersionArgs = {
  where: VersionWhereInput;
};


export type QuerySectionSearchTermListsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionSearchTermListOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionSearchTermListWhereInput>;
};


export type QuerySectionSearchTermListsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionSearchTermListOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionSearchTermListWhereInput>;
};


export type QuerySectionSeoTextArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SectionSeoTextWhereUniqueInput;
};


export type QuerySectionSeoTextVersionArgs = {
  where: VersionWhereInput;
};


export type QuerySectionSeoTextsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionSeoTextOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionSeoTextWhereInput>;
};


export type QuerySectionSeoTextsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionSeoTextOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionSeoTextWhereInput>;
};


export type QuerySectionSocialMediaCtaSmallArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SectionSocialMediaCtaSmallWhereUniqueInput;
};


export type QuerySectionSocialMediaCtaSmallVersionArgs = {
  where: VersionWhereInput;
};


export type QuerySectionSocialMediaCtaSmallsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionSocialMediaCtaSmallOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionSocialMediaCtaSmallWhereInput>;
};


export type QuerySectionSocialMediaCtaSmallsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionSocialMediaCtaSmallOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionSocialMediaCtaSmallWhereInput>;
};


export type QuerySectionTextBlockArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SectionTextBlockWhereUniqueInput;
};


export type QuerySectionTextBlockVersionArgs = {
  where: VersionWhereInput;
};


export type QuerySectionTextBlocksArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionTextBlockOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionTextBlockWhereInput>;
};


export type QuerySectionTextBlocksConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionTextBlockOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionTextBlockWhereInput>;
};


export type QuerySectionVideoCarouselArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SectionVideoCarouselWhereUniqueInput;
};


export type QuerySectionVideoCarouselVersionArgs = {
  where: VersionWhereInput;
};


export type QuerySectionVideoCarouselsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionVideoCarouselOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionVideoCarouselWhereInput>;
};


export type QuerySectionVideoCarouselsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionVideoCarouselOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionVideoCarouselWhereInput>;
};


export type QuerySectionsAccordionArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SectionsAccordionWhereUniqueInput;
};


export type QuerySectionsAccordionVersionArgs = {
  where: VersionWhereInput;
};


export type QuerySectionsAccordionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionsAccordionOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionsAccordionWhereInput>;
};


export type QuerySectionsAccordionsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SectionsAccordionOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SectionsAccordionWhereInput>;
};


export type QuerySocialMediaCtaLargeArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: SocialMediaCtaLargeWhereUniqueInput;
};


export type QuerySocialMediaCtaLargeVersionArgs = {
  where: VersionWhereInput;
};


export type QuerySocialMediaCtaLargesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SocialMediaCtaLargeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SocialMediaCtaLargeWhereInput>;
};


export type QuerySocialMediaCtaLargesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<SocialMediaCtaLargeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<SocialMediaCtaLargeWhereInput>;
};


export type QueryUserArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: UserWhereUniqueInput;
};


export type QueryUsersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<UserOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<UserWhereInput>;
};


export type QueryUsersConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<UserOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<UserWhereInput>;
};


export type QueryWebsiteConfigArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: WebsiteConfigWhereUniqueInput;
};


export type QueryWebsiteConfigVersionArgs = {
  where: VersionWhereInput;
};


export type QueryWebsiteConfigsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<WebsiteConfigOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<WebsiteConfigWhereInput>;
};


export type QueryWebsiteConfigsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<WebsiteConfigOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<WebsiteConfigWhereInput>;
};

/** Representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba() */
export type Rgba = {
  __typename?: 'RGBA';
  a: Scalars['RGBATransparency'];
  b: Scalars['RGBAHue'];
  g: Scalars['RGBAHue'];
  r: Scalars['RGBAHue'];
};

/** Input type representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba() */
export type RgbaInput = {
  a: Scalars['RGBATransparency'];
  b: Scalars['RGBAHue'];
  g: Scalars['RGBAHue'];
  r: Scalars['RGBAHue'];
};

/** Custom type representing a rich text value comprising of raw rich text ast, html, markdown and text values */
export type RichText = {
  __typename?: 'RichText';
  /** Returns HTMl representation */
  html: Scalars['String'];
  /** Returns Markdown representation */
  markdown: Scalars['String'];
  /** Returns AST representation */
  raw: Scalars['RichTextAST'];
  /** Returns plain-text contents of RichText */
  text: Scalars['String'];
};

export type SalonBookingStep = {
  __typename?: 'SalonBookingStep';
  /** The unique identifier */
  id: Scalars['ID'];
  salonBookingCompleteHeading?: Maybe<Scalars['String']>;
  salonBookingCompleteSubText?: Maybe<Scalars['String']>;
  salonBookingStep1PreferredStoreHeading?: Maybe<Scalars['String']>;
  salonBookingStep1PreferredStoreSubtext?: Maybe<Scalars['String']>;
  salonBookingStep2HairLengthHeading?: Maybe<Scalars['String']>;
  salonBookingStep2HairLengthImage1?: Maybe<Asset>;
  salonBookingStep2HairLengthImage1Heading?: Maybe<Scalars['String']>;
  salonBookingStep2HairLengthImage1SubText?: Maybe<Scalars['String']>;
  salonBookingStep2HairLengthImage2?: Maybe<Asset>;
  salonBookingStep2HairLengthImage2Heading?: Maybe<Scalars['String']>;
  salonBookingStep2HairLengthImage2SubText?: Maybe<Scalars['String']>;
  salonBookingStep2HairLengthImage3?: Maybe<Asset>;
  salonBookingStep2HairLengthImage3Heading?: Maybe<Scalars['String']>;
  salonBookingStep2HairLengthImage3SubText?: Maybe<Scalars['String']>;
  salonBookingStep2HairLengthSubText?: Maybe<Scalars['String']>;
  salonBookingStep3ServiceHeading?: Maybe<Scalars['String']>;
  salonBookingStep3ServiceSubText?: Maybe<Scalars['String']>;
  salonBookingStep4BookingTimeHeading?: Maybe<Scalars['String']>;
  salonBookingStep4BookingTimeSubText?: Maybe<Scalars['String']>;
  salonBookingStep5StylistHeading?: Maybe<Scalars['String']>;
  salonBookingStep5StylistSubText?: Maybe<Scalars['String']>;
  salonBookingStep6ReviewHeading?: Maybe<Scalars['String']>;
  salonBookingStep6ReviewSubText?: Maybe<Scalars['String']>;
  /** System stage field */
  stage: Stage;
};


export type SalonBookingStepSalonBookingStep2HairLengthImage1Args = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SalonBookingStepSalonBookingStep2HairLengthImage2Args = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SalonBookingStepSalonBookingStep2HairLengthImage3Args = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type SalonBookingStepConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SalonBookingStepWhereUniqueInput;
};

/** A connection to a list of items. */
export type SalonBookingStepConnection = {
  __typename?: 'SalonBookingStepConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SalonBookingStepEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SalonBookingStepCreateInput = {
  salonBookingCompleteHeading?: InputMaybe<Scalars['String']>;
  salonBookingCompleteSubText?: InputMaybe<Scalars['String']>;
  salonBookingStep1PreferredStoreHeading?: InputMaybe<Scalars['String']>;
  salonBookingStep1PreferredStoreSubtext?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthHeading?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthImage1?: InputMaybe<AssetCreateOneInlineInput>;
  salonBookingStep2HairLengthImage1Heading?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthImage1SubText?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthImage2?: InputMaybe<AssetCreateOneInlineInput>;
  salonBookingStep2HairLengthImage2Heading?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthImage2SubText?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthImage3?: InputMaybe<AssetCreateOneInlineInput>;
  salonBookingStep2HairLengthImage3Heading?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthImage3SubText?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthSubText?: InputMaybe<Scalars['String']>;
  salonBookingStep3ServiceHeading?: InputMaybe<Scalars['String']>;
  salonBookingStep3ServiceSubText?: InputMaybe<Scalars['String']>;
  salonBookingStep4BookingTimeHeading?: InputMaybe<Scalars['String']>;
  salonBookingStep4BookingTimeSubText?: InputMaybe<Scalars['String']>;
  salonBookingStep5StylistHeading?: InputMaybe<Scalars['String']>;
  salonBookingStep5StylistSubText?: InputMaybe<Scalars['String']>;
  salonBookingStep6ReviewHeading?: InputMaybe<Scalars['String']>;
  salonBookingStep6ReviewSubText?: InputMaybe<Scalars['String']>;
};

export type SalonBookingStepCreateManyInlineInput = {
  /** Create and connect multiple existing SalonBookingStep documents */
  create?: InputMaybe<Array<SalonBookingStepCreateInput>>;
};

export type SalonBookingStepCreateOneInlineInput = {
  /** Create and connect one SalonBookingStep document */
  create?: InputMaybe<SalonBookingStepCreateInput>;
};

export type SalonBookingStepCreateWithPositionInput = {
  /** Document to create */
  data: SalonBookingStepCreateInput;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** An edge in a connection. */
export type SalonBookingStepEdge = {
  __typename?: 'SalonBookingStepEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SalonBookingStep;
};

/** Identifies documents */
export type SalonBookingStepManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SalonBookingStepWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SalonBookingStepWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SalonBookingStepWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  salonBookingCompleteHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingCompleteHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingCompleteHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingCompleteHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingCompleteHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingCompleteHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingCompleteHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingCompleteHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingCompleteHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingCompleteHeading_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingCompleteSubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingCompleteSubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingCompleteSubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingCompleteSubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingCompleteSubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingCompleteSubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingCompleteSubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingCompleteSubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingCompleteSubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingCompleteSubText_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep1PreferredStoreHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep1PreferredStoreHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep1PreferredStoreHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep1PreferredStoreHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep1PreferredStoreHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep1PreferredStoreHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep1PreferredStoreHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep1PreferredStoreHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep1PreferredStoreHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep1PreferredStoreHeading_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep1PreferredStoreSubtext?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep1PreferredStoreSubtext_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep1PreferredStoreSubtext_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep1PreferredStoreSubtext_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep1PreferredStoreSubtext_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep1PreferredStoreSubtext_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep1PreferredStoreSubtext_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep1PreferredStoreSubtext_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep1PreferredStoreSubtext_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep1PreferredStoreSubtext_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep2HairLengthHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep2HairLengthHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep2HairLengthHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep2HairLengthHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep2HairLengthHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep2HairLengthHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep2HairLengthHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep2HairLengthHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep2HairLengthHeading_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthImage1?: InputMaybe<AssetWhereInput>;
  salonBookingStep2HairLengthImage1Heading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep2HairLengthImage1Heading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep2HairLengthImage1Heading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep2HairLengthImage1Heading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep2HairLengthImage1Heading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep2HairLengthImage1Heading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep2HairLengthImage1Heading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep2HairLengthImage1Heading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep2HairLengthImage1Heading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep2HairLengthImage1Heading_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthImage1SubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep2HairLengthImage1SubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep2HairLengthImage1SubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep2HairLengthImage1SubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep2HairLengthImage1SubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep2HairLengthImage1SubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep2HairLengthImage1SubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep2HairLengthImage1SubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep2HairLengthImage1SubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep2HairLengthImage1SubText_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthImage2?: InputMaybe<AssetWhereInput>;
  salonBookingStep2HairLengthImage2Heading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep2HairLengthImage2Heading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep2HairLengthImage2Heading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep2HairLengthImage2Heading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep2HairLengthImage2Heading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep2HairLengthImage2Heading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep2HairLengthImage2Heading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep2HairLengthImage2Heading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep2HairLengthImage2Heading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep2HairLengthImage2Heading_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthImage2SubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep2HairLengthImage2SubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep2HairLengthImage2SubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep2HairLengthImage2SubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep2HairLengthImage2SubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep2HairLengthImage2SubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep2HairLengthImage2SubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep2HairLengthImage2SubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep2HairLengthImage2SubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep2HairLengthImage2SubText_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthImage3?: InputMaybe<AssetWhereInput>;
  salonBookingStep2HairLengthImage3Heading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep2HairLengthImage3Heading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep2HairLengthImage3Heading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep2HairLengthImage3Heading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep2HairLengthImage3Heading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep2HairLengthImage3Heading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep2HairLengthImage3Heading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep2HairLengthImage3Heading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep2HairLengthImage3Heading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep2HairLengthImage3Heading_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthImage3SubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep2HairLengthImage3SubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep2HairLengthImage3SubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep2HairLengthImage3SubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep2HairLengthImage3SubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep2HairLengthImage3SubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep2HairLengthImage3SubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep2HairLengthImage3SubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep2HairLengthImage3SubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep2HairLengthImage3SubText_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthSubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep2HairLengthSubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep2HairLengthSubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep2HairLengthSubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep2HairLengthSubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep2HairLengthSubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep2HairLengthSubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep2HairLengthSubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep2HairLengthSubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep2HairLengthSubText_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep3ServiceHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep3ServiceHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep3ServiceHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep3ServiceHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep3ServiceHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep3ServiceHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep3ServiceHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep3ServiceHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep3ServiceHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep3ServiceHeading_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep3ServiceSubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep3ServiceSubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep3ServiceSubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep3ServiceSubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep3ServiceSubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep3ServiceSubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep3ServiceSubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep3ServiceSubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep3ServiceSubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep3ServiceSubText_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep4BookingTimeHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep4BookingTimeHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep4BookingTimeHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep4BookingTimeHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep4BookingTimeHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep4BookingTimeHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep4BookingTimeHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep4BookingTimeHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep4BookingTimeHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep4BookingTimeHeading_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep4BookingTimeSubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep4BookingTimeSubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep4BookingTimeSubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep4BookingTimeSubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep4BookingTimeSubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep4BookingTimeSubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep4BookingTimeSubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep4BookingTimeSubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep4BookingTimeSubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep4BookingTimeSubText_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep5StylistHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep5StylistHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep5StylistHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep5StylistHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep5StylistHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep5StylistHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep5StylistHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep5StylistHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep5StylistHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep5StylistHeading_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep5StylistSubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep5StylistSubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep5StylistSubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep5StylistSubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep5StylistSubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep5StylistSubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep5StylistSubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep5StylistSubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep5StylistSubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep5StylistSubText_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep6ReviewHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep6ReviewHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep6ReviewHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep6ReviewHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep6ReviewHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep6ReviewHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep6ReviewHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep6ReviewHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep6ReviewHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep6ReviewHeading_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep6ReviewSubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep6ReviewSubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep6ReviewSubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep6ReviewSubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep6ReviewSubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep6ReviewSubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep6ReviewSubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep6ReviewSubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep6ReviewSubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep6ReviewSubText_starts_with?: InputMaybe<Scalars['String']>;
};

export enum SalonBookingStepOrderByInput {
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  SalonBookingCompleteHeadingAsc = 'salonBookingCompleteHeading_ASC',
  SalonBookingCompleteHeadingDesc = 'salonBookingCompleteHeading_DESC',
  SalonBookingCompleteSubTextAsc = 'salonBookingCompleteSubText_ASC',
  SalonBookingCompleteSubTextDesc = 'salonBookingCompleteSubText_DESC',
  SalonBookingStep1PreferredStoreHeadingAsc = 'salonBookingStep1PreferredStoreHeading_ASC',
  SalonBookingStep1PreferredStoreHeadingDesc = 'salonBookingStep1PreferredStoreHeading_DESC',
  SalonBookingStep1PreferredStoreSubtextAsc = 'salonBookingStep1PreferredStoreSubtext_ASC',
  SalonBookingStep1PreferredStoreSubtextDesc = 'salonBookingStep1PreferredStoreSubtext_DESC',
  SalonBookingStep2HairLengthHeadingAsc = 'salonBookingStep2HairLengthHeading_ASC',
  SalonBookingStep2HairLengthHeadingDesc = 'salonBookingStep2HairLengthHeading_DESC',
  SalonBookingStep2HairLengthImage1HeadingAsc = 'salonBookingStep2HairLengthImage1Heading_ASC',
  SalonBookingStep2HairLengthImage1HeadingDesc = 'salonBookingStep2HairLengthImage1Heading_DESC',
  SalonBookingStep2HairLengthImage1SubTextAsc = 'salonBookingStep2HairLengthImage1SubText_ASC',
  SalonBookingStep2HairLengthImage1SubTextDesc = 'salonBookingStep2HairLengthImage1SubText_DESC',
  SalonBookingStep2HairLengthImage2HeadingAsc = 'salonBookingStep2HairLengthImage2Heading_ASC',
  SalonBookingStep2HairLengthImage2HeadingDesc = 'salonBookingStep2HairLengthImage2Heading_DESC',
  SalonBookingStep2HairLengthImage2SubTextAsc = 'salonBookingStep2HairLengthImage2SubText_ASC',
  SalonBookingStep2HairLengthImage2SubTextDesc = 'salonBookingStep2HairLengthImage2SubText_DESC',
  SalonBookingStep2HairLengthImage3HeadingAsc = 'salonBookingStep2HairLengthImage3Heading_ASC',
  SalonBookingStep2HairLengthImage3HeadingDesc = 'salonBookingStep2HairLengthImage3Heading_DESC',
  SalonBookingStep2HairLengthImage3SubTextAsc = 'salonBookingStep2HairLengthImage3SubText_ASC',
  SalonBookingStep2HairLengthImage3SubTextDesc = 'salonBookingStep2HairLengthImage3SubText_DESC',
  SalonBookingStep2HairLengthSubTextAsc = 'salonBookingStep2HairLengthSubText_ASC',
  SalonBookingStep2HairLengthSubTextDesc = 'salonBookingStep2HairLengthSubText_DESC',
  SalonBookingStep3ServiceHeadingAsc = 'salonBookingStep3ServiceHeading_ASC',
  SalonBookingStep3ServiceHeadingDesc = 'salonBookingStep3ServiceHeading_DESC',
  SalonBookingStep3ServiceSubTextAsc = 'salonBookingStep3ServiceSubText_ASC',
  SalonBookingStep3ServiceSubTextDesc = 'salonBookingStep3ServiceSubText_DESC',
  SalonBookingStep4BookingTimeHeadingAsc = 'salonBookingStep4BookingTimeHeading_ASC',
  SalonBookingStep4BookingTimeHeadingDesc = 'salonBookingStep4BookingTimeHeading_DESC',
  SalonBookingStep4BookingTimeSubTextAsc = 'salonBookingStep4BookingTimeSubText_ASC',
  SalonBookingStep4BookingTimeSubTextDesc = 'salonBookingStep4BookingTimeSubText_DESC',
  SalonBookingStep5StylistHeadingAsc = 'salonBookingStep5StylistHeading_ASC',
  SalonBookingStep5StylistHeadingDesc = 'salonBookingStep5StylistHeading_DESC',
  SalonBookingStep5StylistSubTextAsc = 'salonBookingStep5StylistSubText_ASC',
  SalonBookingStep5StylistSubTextDesc = 'salonBookingStep5StylistSubText_DESC',
  SalonBookingStep6ReviewHeadingAsc = 'salonBookingStep6ReviewHeading_ASC',
  SalonBookingStep6ReviewHeadingDesc = 'salonBookingStep6ReviewHeading_DESC',
  SalonBookingStep6ReviewSubTextAsc = 'salonBookingStep6ReviewSubText_ASC',
  SalonBookingStep6ReviewSubTextDesc = 'salonBookingStep6ReviewSubText_DESC'
}

export type SalonBookingStepParent = ConfigSalonBooking;

export type SalonBookingStepParentConnectInput = {
  ConfigSalonBooking?: InputMaybe<ConfigSalonBookingConnectInput>;
};

export type SalonBookingStepParentCreateInput = {
  ConfigSalonBooking?: InputMaybe<ConfigSalonBookingCreateInput>;
};

export type SalonBookingStepParentCreateManyInlineInput = {
  /** Connect multiple existing SalonBookingStepParent documents */
  connect?: InputMaybe<Array<SalonBookingStepParentWhereUniqueInput>>;
  /** Create and connect multiple existing SalonBookingStepParent documents */
  create?: InputMaybe<Array<SalonBookingStepParentCreateInput>>;
};

export type SalonBookingStepParentCreateOneInlineInput = {
  /** Connect one existing SalonBookingStepParent document */
  connect?: InputMaybe<SalonBookingStepParentWhereUniqueInput>;
  /** Create and connect one SalonBookingStepParent document */
  create?: InputMaybe<SalonBookingStepParentCreateInput>;
};

export type SalonBookingStepParentUpdateInput = {
  ConfigSalonBooking?: InputMaybe<ConfigSalonBookingUpdateInput>;
};

export type SalonBookingStepParentUpdateManyInlineInput = {
  /** Connect multiple existing SalonBookingStepParent documents */
  connect?: InputMaybe<Array<SalonBookingStepParentConnectInput>>;
  /** Create and connect multiple SalonBookingStepParent documents */
  create?: InputMaybe<Array<SalonBookingStepParentCreateInput>>;
  /** Delete multiple SalonBookingStepParent documents */
  delete?: InputMaybe<Array<SalonBookingStepParentWhereUniqueInput>>;
  /** Disconnect multiple SalonBookingStepParent documents */
  disconnect?: InputMaybe<Array<SalonBookingStepParentWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SalonBookingStepParent documents */
  set?: InputMaybe<Array<SalonBookingStepParentWhereUniqueInput>>;
  /** Update multiple SalonBookingStepParent documents */
  update?: InputMaybe<Array<SalonBookingStepParentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SalonBookingStepParent documents */
  upsert?: InputMaybe<Array<SalonBookingStepParentUpsertWithNestedWhereUniqueInput>>;
};

export type SalonBookingStepParentUpdateManyWithNestedWhereInput = {
  ConfigSalonBooking?: InputMaybe<ConfigSalonBookingUpdateManyWithNestedWhereInput>;
};

export type SalonBookingStepParentUpdateOneInlineInput = {
  /** Connect existing SalonBookingStepParent document */
  connect?: InputMaybe<SalonBookingStepParentWhereUniqueInput>;
  /** Create and connect one SalonBookingStepParent document */
  create?: InputMaybe<SalonBookingStepParentCreateInput>;
  /** Delete currently connected SalonBookingStepParent document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SalonBookingStepParent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SalonBookingStepParent document */
  update?: InputMaybe<SalonBookingStepParentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SalonBookingStepParent document */
  upsert?: InputMaybe<SalonBookingStepParentUpsertWithNestedWhereUniqueInput>;
};

export type SalonBookingStepParentUpdateWithNestedWhereUniqueInput = {
  ConfigSalonBooking?: InputMaybe<ConfigSalonBookingUpdateWithNestedWhereUniqueInput>;
};

export type SalonBookingStepParentUpsertWithNestedWhereUniqueInput = {
  ConfigSalonBooking?: InputMaybe<ConfigSalonBookingUpsertWithNestedWhereUniqueInput>;
};

export type SalonBookingStepParentWhereInput = {
  ConfigSalonBooking?: InputMaybe<ConfigSalonBookingWhereInput>;
};

export type SalonBookingStepParentWhereUniqueInput = {
  ConfigSalonBooking?: InputMaybe<ConfigSalonBookingWhereUniqueInput>;
};

export type SalonBookingStepUpdateInput = {
  salonBookingCompleteHeading?: InputMaybe<Scalars['String']>;
  salonBookingCompleteSubText?: InputMaybe<Scalars['String']>;
  salonBookingStep1PreferredStoreHeading?: InputMaybe<Scalars['String']>;
  salonBookingStep1PreferredStoreSubtext?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthHeading?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthImage1?: InputMaybe<AssetUpdateOneInlineInput>;
  salonBookingStep2HairLengthImage1Heading?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthImage1SubText?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthImage2?: InputMaybe<AssetUpdateOneInlineInput>;
  salonBookingStep2HairLengthImage2Heading?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthImage2SubText?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthImage3?: InputMaybe<AssetUpdateOneInlineInput>;
  salonBookingStep2HairLengthImage3Heading?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthImage3SubText?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthSubText?: InputMaybe<Scalars['String']>;
  salonBookingStep3ServiceHeading?: InputMaybe<Scalars['String']>;
  salonBookingStep3ServiceSubText?: InputMaybe<Scalars['String']>;
  salonBookingStep4BookingTimeHeading?: InputMaybe<Scalars['String']>;
  salonBookingStep4BookingTimeSubText?: InputMaybe<Scalars['String']>;
  salonBookingStep5StylistHeading?: InputMaybe<Scalars['String']>;
  salonBookingStep5StylistSubText?: InputMaybe<Scalars['String']>;
  salonBookingStep6ReviewHeading?: InputMaybe<Scalars['String']>;
  salonBookingStep6ReviewSubText?: InputMaybe<Scalars['String']>;
};

export type SalonBookingStepUpdateManyInlineInput = {
  /** Create and connect multiple SalonBookingStep component instances */
  create?: InputMaybe<Array<SalonBookingStepCreateWithPositionInput>>;
  /** Delete multiple SalonBookingStep documents */
  delete?: InputMaybe<Array<SalonBookingStepWhereUniqueInput>>;
  /** Update multiple SalonBookingStep component instances */
  update?: InputMaybe<Array<SalonBookingStepUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple SalonBookingStep component instances */
  upsert?: InputMaybe<Array<SalonBookingStepUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type SalonBookingStepUpdateManyInput = {
  salonBookingCompleteHeading?: InputMaybe<Scalars['String']>;
  salonBookingCompleteSubText?: InputMaybe<Scalars['String']>;
  salonBookingStep1PreferredStoreHeading?: InputMaybe<Scalars['String']>;
  salonBookingStep1PreferredStoreSubtext?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthHeading?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthImage1Heading?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthImage1SubText?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthImage2Heading?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthImage2SubText?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthImage3Heading?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthImage3SubText?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthSubText?: InputMaybe<Scalars['String']>;
  salonBookingStep3ServiceHeading?: InputMaybe<Scalars['String']>;
  salonBookingStep3ServiceSubText?: InputMaybe<Scalars['String']>;
  salonBookingStep4BookingTimeHeading?: InputMaybe<Scalars['String']>;
  salonBookingStep4BookingTimeSubText?: InputMaybe<Scalars['String']>;
  salonBookingStep5StylistHeading?: InputMaybe<Scalars['String']>;
  salonBookingStep5StylistSubText?: InputMaybe<Scalars['String']>;
  salonBookingStep6ReviewHeading?: InputMaybe<Scalars['String']>;
  salonBookingStep6ReviewSubText?: InputMaybe<Scalars['String']>;
};

export type SalonBookingStepUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SalonBookingStepUpdateManyInput;
  /** Document search */
  where: SalonBookingStepWhereInput;
};

export type SalonBookingStepUpdateOneInlineInput = {
  /** Create and connect one SalonBookingStep document */
  create?: InputMaybe<SalonBookingStepCreateInput>;
  /** Delete currently connected SalonBookingStep document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single SalonBookingStep document */
  update?: InputMaybe<SalonBookingStepUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SalonBookingStep document */
  upsert?: InputMaybe<SalonBookingStepUpsertWithNestedWhereUniqueInput>;
};

export type SalonBookingStepUpdateWithNestedWhereUniqueAndPositionInput = {
  /** Document to update */
  data?: InputMaybe<SalonBookingStepUpdateInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: SalonBookingStepWhereUniqueInput;
};

export type SalonBookingStepUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SalonBookingStepUpdateInput;
  /** Unique document search */
  where: SalonBookingStepWhereUniqueInput;
};

export type SalonBookingStepUpsertInput = {
  /** Create document if it didn't exist */
  create: SalonBookingStepCreateInput;
  /** Update document if it exists */
  update: SalonBookingStepUpdateInput;
};

export type SalonBookingStepUpsertWithNestedWhereUniqueAndPositionInput = {
  /** Document to upsert */
  data?: InputMaybe<SalonBookingStepUpsertInput>;
  /** Position in the list of existing component instances, will default to appending at the end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Unique component instance search */
  where: SalonBookingStepWhereUniqueInput;
};

export type SalonBookingStepUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SalonBookingStepUpsertInput;
  /** Unique document search */
  where: SalonBookingStepWhereUniqueInput;
};

/** Identifies documents */
export type SalonBookingStepWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SalonBookingStepWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SalonBookingStepWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SalonBookingStepWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  salonBookingCompleteHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingCompleteHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingCompleteHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingCompleteHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingCompleteHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingCompleteHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingCompleteHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingCompleteHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingCompleteHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingCompleteHeading_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingCompleteSubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingCompleteSubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingCompleteSubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingCompleteSubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingCompleteSubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingCompleteSubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingCompleteSubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingCompleteSubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingCompleteSubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingCompleteSubText_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep1PreferredStoreHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep1PreferredStoreHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep1PreferredStoreHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep1PreferredStoreHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep1PreferredStoreHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep1PreferredStoreHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep1PreferredStoreHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep1PreferredStoreHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep1PreferredStoreHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep1PreferredStoreHeading_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep1PreferredStoreSubtext?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep1PreferredStoreSubtext_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep1PreferredStoreSubtext_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep1PreferredStoreSubtext_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep1PreferredStoreSubtext_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep1PreferredStoreSubtext_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep1PreferredStoreSubtext_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep1PreferredStoreSubtext_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep1PreferredStoreSubtext_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep1PreferredStoreSubtext_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep2HairLengthHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep2HairLengthHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep2HairLengthHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep2HairLengthHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep2HairLengthHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep2HairLengthHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep2HairLengthHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep2HairLengthHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep2HairLengthHeading_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthImage1?: InputMaybe<AssetWhereInput>;
  salonBookingStep2HairLengthImage1Heading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep2HairLengthImage1Heading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep2HairLengthImage1Heading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep2HairLengthImage1Heading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep2HairLengthImage1Heading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep2HairLengthImage1Heading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep2HairLengthImage1Heading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep2HairLengthImage1Heading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep2HairLengthImage1Heading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep2HairLengthImage1Heading_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthImage1SubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep2HairLengthImage1SubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep2HairLengthImage1SubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep2HairLengthImage1SubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep2HairLengthImage1SubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep2HairLengthImage1SubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep2HairLengthImage1SubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep2HairLengthImage1SubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep2HairLengthImage1SubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep2HairLengthImage1SubText_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthImage2?: InputMaybe<AssetWhereInput>;
  salonBookingStep2HairLengthImage2Heading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep2HairLengthImage2Heading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep2HairLengthImage2Heading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep2HairLengthImage2Heading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep2HairLengthImage2Heading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep2HairLengthImage2Heading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep2HairLengthImage2Heading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep2HairLengthImage2Heading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep2HairLengthImage2Heading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep2HairLengthImage2Heading_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthImage2SubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep2HairLengthImage2SubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep2HairLengthImage2SubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep2HairLengthImage2SubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep2HairLengthImage2SubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep2HairLengthImage2SubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep2HairLengthImage2SubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep2HairLengthImage2SubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep2HairLengthImage2SubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep2HairLengthImage2SubText_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthImage3?: InputMaybe<AssetWhereInput>;
  salonBookingStep2HairLengthImage3Heading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep2HairLengthImage3Heading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep2HairLengthImage3Heading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep2HairLengthImage3Heading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep2HairLengthImage3Heading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep2HairLengthImage3Heading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep2HairLengthImage3Heading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep2HairLengthImage3Heading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep2HairLengthImage3Heading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep2HairLengthImage3Heading_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthImage3SubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep2HairLengthImage3SubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep2HairLengthImage3SubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep2HairLengthImage3SubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep2HairLengthImage3SubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep2HairLengthImage3SubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep2HairLengthImage3SubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep2HairLengthImage3SubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep2HairLengthImage3SubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep2HairLengthImage3SubText_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep2HairLengthSubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep2HairLengthSubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep2HairLengthSubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep2HairLengthSubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep2HairLengthSubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep2HairLengthSubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep2HairLengthSubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep2HairLengthSubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep2HairLengthSubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep2HairLengthSubText_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep3ServiceHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep3ServiceHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep3ServiceHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep3ServiceHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep3ServiceHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep3ServiceHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep3ServiceHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep3ServiceHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep3ServiceHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep3ServiceHeading_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep3ServiceSubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep3ServiceSubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep3ServiceSubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep3ServiceSubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep3ServiceSubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep3ServiceSubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep3ServiceSubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep3ServiceSubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep3ServiceSubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep3ServiceSubText_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep4BookingTimeHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep4BookingTimeHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep4BookingTimeHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep4BookingTimeHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep4BookingTimeHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep4BookingTimeHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep4BookingTimeHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep4BookingTimeHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep4BookingTimeHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep4BookingTimeHeading_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep4BookingTimeSubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep4BookingTimeSubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep4BookingTimeSubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep4BookingTimeSubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep4BookingTimeSubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep4BookingTimeSubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep4BookingTimeSubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep4BookingTimeSubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep4BookingTimeSubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep4BookingTimeSubText_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep5StylistHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep5StylistHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep5StylistHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep5StylistHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep5StylistHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep5StylistHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep5StylistHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep5StylistHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep5StylistHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep5StylistHeading_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep5StylistSubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep5StylistSubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep5StylistSubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep5StylistSubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep5StylistSubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep5StylistSubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep5StylistSubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep5StylistSubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep5StylistSubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep5StylistSubText_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep6ReviewHeading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep6ReviewHeading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep6ReviewHeading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep6ReviewHeading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep6ReviewHeading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep6ReviewHeading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep6ReviewHeading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep6ReviewHeading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep6ReviewHeading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep6ReviewHeading_starts_with?: InputMaybe<Scalars['String']>;
  salonBookingStep6ReviewSubText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  salonBookingStep6ReviewSubText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  salonBookingStep6ReviewSubText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  salonBookingStep6ReviewSubText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  salonBookingStep6ReviewSubText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  salonBookingStep6ReviewSubText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  salonBookingStep6ReviewSubText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  salonBookingStep6ReviewSubText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  salonBookingStep6ReviewSubText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  salonBookingStep6ReviewSubText_starts_with?: InputMaybe<Scalars['String']>;
};

/** References SalonBookingStep record uniquely */
export type SalonBookingStepWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Scheduled Operation system model */
export type ScheduledOperation = Node & {
  __typename?: 'ScheduledOperation';
  affectedDocuments: Array<ScheduledOperationAffectedDocument>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Operation description */
  description?: Maybe<Scalars['String']>;
  /** Get the document in other stages */
  documentInStages: Array<ScheduledOperation>;
  /** Operation error message */
  errorMessage?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  /** Raw operation payload including all details, this field is subject to change */
  rawPayload: Scalars['Json'];
  /** The release this operation is scheduled for */
  release?: Maybe<ScheduledRelease>;
  /** System stage field */
  stage: Stage;
  /** operation Status */
  status: ScheduledOperationStatus;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


/** Scheduled Operation system model */
export type ScheduledOperationAffectedDocumentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
};


/** Scheduled Operation system model */
export type ScheduledOperationCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Operation system model */
export type ScheduledOperationDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


/** Scheduled Operation system model */
export type ScheduledOperationPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Operation system model */
export type ScheduledOperationReleaseArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Operation system model */
export type ScheduledOperationUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ScheduledOperationAffectedDocument = Asset | BlogArticle | BlogAuthor | BrandLogoGrid | BrandsBrandLogo | CmsPage | CollectionPage | ConfigCareer | ConfigSalonBooking | ConfigSalonMenu | ConfigSearch | EditorialText | FeatureProductCarouselTabbed | FooterConfig | HeaderConfig | HeroBanner | JoinCtApanel | ModulePromoBanner | MultiCollectionSlider | OfferTiles | PageBuyingGuide | ProductBenefitsGrid | ProductHowTo | ProductPage | Proposition | SectionAccountSignupCta | SectionBlogListing | SectionCollectionCarousel | SectionCollectionDropDown | SectionCollectionFeatureLarge | SectionCollectionMain | SectionCollectionSubcategoryLink | SectionCtaButton | SectionFullWidthImage | SectionImageAndTextGrid | SectionImageTextOverlay | SectionPreezieProductFinder | SectionProductMain | SectionProductReview | SectionProductSpotlightGrid | SectionProductSpotlightLarge | SectionRelatedProduct | SectionSalonServiceBlock | SectionSearchTermList | SectionSeoText | SectionSocialMediaCtaSmall | SectionTextBlock | SectionVideoCarousel | SectionsAccordion | SocialMediaCtaLarge | WebsiteConfig;

export type ScheduledOperationConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ScheduledOperationWhereUniqueInput;
};

/** A connection to a list of items. */
export type ScheduledOperationConnection = {
  __typename?: 'ScheduledOperationConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ScheduledOperationEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ScheduledOperationCreateManyInlineInput = {
  /** Connect multiple existing ScheduledOperation documents */
  connect?: InputMaybe<Array<ScheduledOperationWhereUniqueInput>>;
};

export type ScheduledOperationCreateOneInlineInput = {
  /** Connect one existing ScheduledOperation document */
  connect?: InputMaybe<ScheduledOperationWhereUniqueInput>;
};

/** An edge in a connection. */
export type ScheduledOperationEdge = {
  __typename?: 'ScheduledOperationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ScheduledOperation;
};

/** Identifies documents */
export type ScheduledOperationManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  errorMessage_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  /** All values containing the given json path. */
  rawPayload_json_path_exists?: InputMaybe<Scalars['String']>;
  /**
   * Recursively tries to find the provided JSON scalar value inside the field.
   * It does use an exact match when comparing values.
   * If you pass `null` as value the filter will be ignored.
   * Note: This filter fails if you try to look for a non scalar JSON value!
   */
  rawPayload_value_recursive?: InputMaybe<Scalars['Json']>;
  release?: InputMaybe<ScheduledReleaseWhereInput>;
  status?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  /** Any other value that exists and is not equal to the given value. */
  status_not?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ScheduledOperationOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  ErrorMessageAsc = 'errorMessage_ASC',
  ErrorMessageDesc = 'errorMessage_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

/** System Scheduled Operation Status */
export enum ScheduledOperationStatus {
  Canceled = 'CANCELED',
  Completed = 'COMPLETED',
  Failed = 'FAILED',
  InProgress = 'IN_PROGRESS',
  Pending = 'PENDING'
}

export type ScheduledOperationUpdateManyInlineInput = {
  /** Connect multiple existing ScheduledOperation documents */
  connect?: InputMaybe<Array<ScheduledOperationConnectInput>>;
  /** Disconnect multiple ScheduledOperation documents */
  disconnect?: InputMaybe<Array<ScheduledOperationWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ScheduledOperation documents */
  set?: InputMaybe<Array<ScheduledOperationWhereUniqueInput>>;
};

export type ScheduledOperationUpdateOneInlineInput = {
  /** Connect existing ScheduledOperation document */
  connect?: InputMaybe<ScheduledOperationWhereUniqueInput>;
  /** Disconnect currently connected ScheduledOperation document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type ScheduledOperationWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  errorMessage_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  /** All values containing the given json path. */
  rawPayload_json_path_exists?: InputMaybe<Scalars['String']>;
  /**
   * Recursively tries to find the provided JSON scalar value inside the field.
   * It does use an exact match when comparing values.
   * If you pass `null` as value the filter will be ignored.
   * Note: This filter fails if you try to look for a non scalar JSON value!
   */
  rawPayload_value_recursive?: InputMaybe<Scalars['Json']>;
  release?: InputMaybe<ScheduledReleaseWhereInput>;
  status?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  /** Any other value that exists and is not equal to the given value. */
  status_not?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** References ScheduledOperation record uniquely */
export type ScheduledOperationWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Scheduled Release system model */
export type ScheduledRelease = Node & {
  __typename?: 'ScheduledRelease';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Release description */
  description?: Maybe<Scalars['String']>;
  /** Get the document in other stages */
  documentInStages: Array<ScheduledRelease>;
  /** Release error message */
  errorMessage?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** Whether scheduled release should be run */
  isActive: Scalars['Boolean'];
  /** Whether scheduled release is implicit */
  isImplicit: Scalars['Boolean'];
  /** Operations to run with this release */
  operations: Array<ScheduledOperation>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  /** Release date and time */
  releaseAt?: Maybe<Scalars['DateTime']>;
  /** System stage field */
  stage: Stage;
  /** Release Status */
  status: ScheduledReleaseStatus;
  /** Release Title */
  title?: Maybe<Scalars['String']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


/** Scheduled Release system model */
export type ScheduledReleaseCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Release system model */
export type ScheduledReleaseDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


/** Scheduled Release system model */
export type ScheduledReleaseOperationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ScheduledOperationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


/** Scheduled Release system model */
export type ScheduledReleasePublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Release system model */
export type ScheduledReleaseUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ScheduledReleaseConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ScheduledReleaseWhereUniqueInput;
};

/** A connection to a list of items. */
export type ScheduledReleaseConnection = {
  __typename?: 'ScheduledReleaseConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ScheduledReleaseEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ScheduledReleaseCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  description?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  title?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type ScheduledReleaseCreateManyInlineInput = {
  /** Connect multiple existing ScheduledRelease documents */
  connect?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Create and connect multiple existing ScheduledRelease documents */
  create?: InputMaybe<Array<ScheduledReleaseCreateInput>>;
};

export type ScheduledReleaseCreateOneInlineInput = {
  /** Connect one existing ScheduledRelease document */
  connect?: InputMaybe<ScheduledReleaseWhereUniqueInput>;
  /** Create and connect one ScheduledRelease document */
  create?: InputMaybe<ScheduledReleaseCreateInput>;
};

/** An edge in a connection. */
export type ScheduledReleaseEdge = {
  __typename?: 'ScheduledReleaseEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ScheduledRelease;
};

/** Identifies documents */
export type ScheduledReleaseManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  errorMessage_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isImplicit?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  isImplicit_not?: InputMaybe<Scalars['Boolean']>;
  operations_every?: InputMaybe<ScheduledOperationWhereInput>;
  operations_none?: InputMaybe<ScheduledOperationWhereInput>;
  operations_some?: InputMaybe<ScheduledOperationWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  releaseAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  releaseAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  releaseAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  releaseAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  releaseAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  releaseAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  releaseAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  status?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  /** Any other value that exists and is not equal to the given value. */
  status_not?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ScheduledReleaseOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  ErrorMessageAsc = 'errorMessage_ASC',
  ErrorMessageDesc = 'errorMessage_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsActiveAsc = 'isActive_ASC',
  IsActiveDesc = 'isActive_DESC',
  IsImplicitAsc = 'isImplicit_ASC',
  IsImplicitDesc = 'isImplicit_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  ReleaseAtAsc = 'releaseAt_ASC',
  ReleaseAtDesc = 'releaseAt_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

/** System Scheduled Release Status */
export enum ScheduledReleaseStatus {
  Completed = 'COMPLETED',
  Failed = 'FAILED',
  InProgress = 'IN_PROGRESS',
  Pending = 'PENDING'
}

export type ScheduledReleaseUpdateInput = {
  description?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  title?: InputMaybe<Scalars['String']>;
};

export type ScheduledReleaseUpdateManyInlineInput = {
  /** Connect multiple existing ScheduledRelease documents */
  connect?: InputMaybe<Array<ScheduledReleaseConnectInput>>;
  /** Create and connect multiple ScheduledRelease documents */
  create?: InputMaybe<Array<ScheduledReleaseCreateInput>>;
  /** Delete multiple ScheduledRelease documents */
  delete?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Disconnect multiple ScheduledRelease documents */
  disconnect?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ScheduledRelease documents */
  set?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Update multiple ScheduledRelease documents */
  update?: InputMaybe<Array<ScheduledReleaseUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ScheduledRelease documents */
  upsert?: InputMaybe<Array<ScheduledReleaseUpsertWithNestedWhereUniqueInput>>;
};

export type ScheduledReleaseUpdateManyInput = {
  description?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  title?: InputMaybe<Scalars['String']>;
};

export type ScheduledReleaseUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ScheduledReleaseUpdateManyInput;
  /** Document search */
  where: ScheduledReleaseWhereInput;
};

export type ScheduledReleaseUpdateOneInlineInput = {
  /** Connect existing ScheduledRelease document */
  connect?: InputMaybe<ScheduledReleaseWhereUniqueInput>;
  /** Create and connect one ScheduledRelease document */
  create?: InputMaybe<ScheduledReleaseCreateInput>;
  /** Delete currently connected ScheduledRelease document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected ScheduledRelease document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single ScheduledRelease document */
  update?: InputMaybe<ScheduledReleaseUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ScheduledRelease document */
  upsert?: InputMaybe<ScheduledReleaseUpsertWithNestedWhereUniqueInput>;
};

export type ScheduledReleaseUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ScheduledReleaseUpdateInput;
  /** Unique document search */
  where: ScheduledReleaseWhereUniqueInput;
};

export type ScheduledReleaseUpsertInput = {
  /** Create document if it didn't exist */
  create: ScheduledReleaseCreateInput;
  /** Update document if it exists */
  update: ScheduledReleaseUpdateInput;
};

export type ScheduledReleaseUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ScheduledReleaseUpsertInput;
  /** Unique document search */
  where: ScheduledReleaseWhereUniqueInput;
};

/** Identifies documents */
export type ScheduledReleaseWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  errorMessage_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isImplicit?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  isImplicit_not?: InputMaybe<Scalars['Boolean']>;
  operations_every?: InputMaybe<ScheduledOperationWhereInput>;
  operations_none?: InputMaybe<ScheduledOperationWhereInput>;
  operations_some?: InputMaybe<ScheduledOperationWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  releaseAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  releaseAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  releaseAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  releaseAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  releaseAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  releaseAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  releaseAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  status?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  /** Any other value that exists and is not equal to the given value. */
  status_not?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** References ScheduledRelease record uniquely */
export type ScheduledReleaseWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SectionAccountSignupCta = Node & {
  __typename?: 'SectionAccountSignupCta';
  adminTitle?: Maybe<Scalars['String']>;
  benefits: Array<Scalars['String']>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<SectionAccountSignupCta>;
  headline?: Maybe<RichText>;
  /** List of SectionAccountSignupCta versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  signupButtons: Array<Cta>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type SectionAccountSignupCtaCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionAccountSignupCtaDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type SectionAccountSignupCtaHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type SectionAccountSignupCtaPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionAccountSignupCtaScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type SectionAccountSignupCtaSignupButtonsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<CtaOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CtaWhereInput>;
};


export type SectionAccountSignupCtaUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type SectionAccountSignupCtaConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SectionAccountSignupCtaWhereUniqueInput;
};

/** A connection to a list of items. */
export type SectionAccountSignupCtaConnection = {
  __typename?: 'SectionAccountSignupCtaConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SectionAccountSignupCtaEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SectionAccountSignupCtaCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  benefits?: InputMaybe<Array<Scalars['String']>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  headline?: InputMaybe<Scalars['RichTextAST']>;
  signupButtons?: InputMaybe<CtaCreateManyInlineInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type SectionAccountSignupCtaCreateManyInlineInput = {
  /** Connect multiple existing SectionAccountSignupCta documents */
  connect?: InputMaybe<Array<SectionAccountSignupCtaWhereUniqueInput>>;
  /** Create and connect multiple existing SectionAccountSignupCta documents */
  create?: InputMaybe<Array<SectionAccountSignupCtaCreateInput>>;
};

export type SectionAccountSignupCtaCreateOneInlineInput = {
  /** Connect one existing SectionAccountSignupCta document */
  connect?: InputMaybe<SectionAccountSignupCtaWhereUniqueInput>;
  /** Create and connect one SectionAccountSignupCta document */
  create?: InputMaybe<SectionAccountSignupCtaCreateInput>;
};

/** An edge in a connection. */
export type SectionAccountSignupCtaEdge = {
  __typename?: 'SectionAccountSignupCtaEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SectionAccountSignupCta;
};

/** Identifies documents */
export type SectionAccountSignupCtaManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionAccountSignupCtaWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionAccountSignupCtaWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionAccountSignupCtaWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  benefits?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains *all* items provided to the filter */
  benefits_contains_all?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  benefits_contains_none?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains at least one item provided to the filter */
  benefits_contains_some?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  benefits_not?: InputMaybe<Array<Scalars['String']>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionAccountSignupCtaWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionAccountSignupCtaWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionAccountSignupCtaWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  signupButtons_every?: InputMaybe<CtaWhereInput>;
  signupButtons_none?: InputMaybe<CtaWhereInput>;
  signupButtons_some?: InputMaybe<CtaWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum SectionAccountSignupCtaOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  BenefitsAsc = 'benefits_ASC',
  BenefitsDesc = 'benefits_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type SectionAccountSignupCtaUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  benefits?: InputMaybe<Array<Scalars['String']>>;
  headline?: InputMaybe<Scalars['RichTextAST']>;
  signupButtons?: InputMaybe<CtaUpdateManyInlineInput>;
};

export type SectionAccountSignupCtaUpdateManyInlineInput = {
  /** Connect multiple existing SectionAccountSignupCta documents */
  connect?: InputMaybe<Array<SectionAccountSignupCtaConnectInput>>;
  /** Create and connect multiple SectionAccountSignupCta documents */
  create?: InputMaybe<Array<SectionAccountSignupCtaCreateInput>>;
  /** Delete multiple SectionAccountSignupCta documents */
  delete?: InputMaybe<Array<SectionAccountSignupCtaWhereUniqueInput>>;
  /** Disconnect multiple SectionAccountSignupCta documents */
  disconnect?: InputMaybe<Array<SectionAccountSignupCtaWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SectionAccountSignupCta documents */
  set?: InputMaybe<Array<SectionAccountSignupCtaWhereUniqueInput>>;
  /** Update multiple SectionAccountSignupCta documents */
  update?: InputMaybe<Array<SectionAccountSignupCtaUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SectionAccountSignupCta documents */
  upsert?: InputMaybe<Array<SectionAccountSignupCtaUpsertWithNestedWhereUniqueInput>>;
};

export type SectionAccountSignupCtaUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  benefits?: InputMaybe<Array<Scalars['String']>>;
  headline?: InputMaybe<Scalars['RichTextAST']>;
};

export type SectionAccountSignupCtaUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SectionAccountSignupCtaUpdateManyInput;
  /** Document search */
  where: SectionAccountSignupCtaWhereInput;
};

export type SectionAccountSignupCtaUpdateOneInlineInput = {
  /** Connect existing SectionAccountSignupCta document */
  connect?: InputMaybe<SectionAccountSignupCtaWhereUniqueInput>;
  /** Create and connect one SectionAccountSignupCta document */
  create?: InputMaybe<SectionAccountSignupCtaCreateInput>;
  /** Delete currently connected SectionAccountSignupCta document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SectionAccountSignupCta document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SectionAccountSignupCta document */
  update?: InputMaybe<SectionAccountSignupCtaUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SectionAccountSignupCta document */
  upsert?: InputMaybe<SectionAccountSignupCtaUpsertWithNestedWhereUniqueInput>;
};

export type SectionAccountSignupCtaUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SectionAccountSignupCtaUpdateInput;
  /** Unique document search */
  where: SectionAccountSignupCtaWhereUniqueInput;
};

export type SectionAccountSignupCtaUpsertInput = {
  /** Create document if it didn't exist */
  create: SectionAccountSignupCtaCreateInput;
  /** Update document if it exists */
  update: SectionAccountSignupCtaUpdateInput;
};

export type SectionAccountSignupCtaUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SectionAccountSignupCtaUpsertInput;
  /** Unique document search */
  where: SectionAccountSignupCtaWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SectionAccountSignupCtaWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type SectionAccountSignupCtaWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionAccountSignupCtaWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionAccountSignupCtaWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionAccountSignupCtaWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  benefits?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains *all* items provided to the filter */
  benefits_contains_all?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  benefits_contains_none?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains at least one item provided to the filter */
  benefits_contains_some?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  benefits_not?: InputMaybe<Array<Scalars['String']>>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionAccountSignupCtaWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionAccountSignupCtaWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionAccountSignupCtaWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  signupButtons_every?: InputMaybe<CtaWhereInput>;
  signupButtons_none?: InputMaybe<CtaWhereInput>;
  signupButtons_some?: InputMaybe<CtaWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SectionAccountSignupCtaWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionAccountSignupCtaWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionAccountSignupCtaWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionAccountSignupCtaWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SectionAccountSignupCtaWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References SectionAccountSignupCta record uniquely */
export type SectionAccountSignupCtaWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SectionBlogListing = Node & {
  __typename?: 'SectionBlogListing';
  adminTitle?: Maybe<Scalars['String']>;
  collectionPages: Array<CollectionPage>;
  configSearches: Array<ConfigSearch>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<SectionBlogListing>;
  fullWidthTemplates: Array<CmsPage>;
  headline?: Maybe<Scalars['String']>;
  /** List of SectionBlogListing versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  products: Array<ProductPage>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  subHeadline?: Maybe<Scalars['String']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type SectionBlogListingCollectionPagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CollectionPageWhereInput>;
};


export type SectionBlogListingConfigSearchesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigSearchWhereInput>;
};


export type SectionBlogListingCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionBlogListingDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type SectionBlogListingFullWidthTemplatesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsPageWhereInput>;
};


export type SectionBlogListingHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type SectionBlogListingProductsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProductPageWhereInput>;
};


export type SectionBlogListingPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionBlogListingScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type SectionBlogListingUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type SectionBlogListingConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SectionBlogListingWhereUniqueInput;
};

/** A connection to a list of items. */
export type SectionBlogListingConnection = {
  __typename?: 'SectionBlogListingConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SectionBlogListingEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SectionBlogListingCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  collectionPages?: InputMaybe<CollectionPageCreateManyInlineInput>;
  configSearches?: InputMaybe<ConfigSearchCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  fullWidthTemplates?: InputMaybe<CmsPageCreateManyInlineInput>;
  headline?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductPageCreateManyInlineInput>;
  subHeadline?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type SectionBlogListingCreateManyInlineInput = {
  /** Connect multiple existing SectionBlogListing documents */
  connect?: InputMaybe<Array<SectionBlogListingWhereUniqueInput>>;
  /** Create and connect multiple existing SectionBlogListing documents */
  create?: InputMaybe<Array<SectionBlogListingCreateInput>>;
};

export type SectionBlogListingCreateOneInlineInput = {
  /** Connect one existing SectionBlogListing document */
  connect?: InputMaybe<SectionBlogListingWhereUniqueInput>;
  /** Create and connect one SectionBlogListing document */
  create?: InputMaybe<SectionBlogListingCreateInput>;
};

/** An edge in a connection. */
export type SectionBlogListingEdge = {
  __typename?: 'SectionBlogListingEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SectionBlogListing;
};

/** Identifies documents */
export type SectionBlogListingManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionBlogListingWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionBlogListingWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionBlogListingWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  collectionPages_every?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_none?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_some?: InputMaybe<CollectionPageWhereInput>;
  configSearches_every?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_none?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_some?: InputMaybe<ConfigSearchWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionBlogListingWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionBlogListingWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionBlogListingWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  products_every?: InputMaybe<ProductPageWhereInput>;
  products_none?: InputMaybe<ProductPageWhereInput>;
  products_some?: InputMaybe<ProductPageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  subHeadline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subHeadline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subHeadline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subHeadline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subHeadline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subHeadline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subHeadline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subHeadline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subHeadline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subHeadline_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum SectionBlogListingOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  HeadlineAsc = 'headline_ASC',
  HeadlineDesc = 'headline_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SubHeadlineAsc = 'subHeadline_ASC',
  SubHeadlineDesc = 'subHeadline_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type SectionBlogListingUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  collectionPages?: InputMaybe<CollectionPageUpdateManyInlineInput>;
  configSearches?: InputMaybe<ConfigSearchUpdateManyInlineInput>;
  fullWidthTemplates?: InputMaybe<CmsPageUpdateManyInlineInput>;
  headline?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductPageUpdateManyInlineInput>;
  subHeadline?: InputMaybe<Scalars['String']>;
};

export type SectionBlogListingUpdateManyInlineInput = {
  /** Connect multiple existing SectionBlogListing documents */
  connect?: InputMaybe<Array<SectionBlogListingConnectInput>>;
  /** Create and connect multiple SectionBlogListing documents */
  create?: InputMaybe<Array<SectionBlogListingCreateInput>>;
  /** Delete multiple SectionBlogListing documents */
  delete?: InputMaybe<Array<SectionBlogListingWhereUniqueInput>>;
  /** Disconnect multiple SectionBlogListing documents */
  disconnect?: InputMaybe<Array<SectionBlogListingWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SectionBlogListing documents */
  set?: InputMaybe<Array<SectionBlogListingWhereUniqueInput>>;
  /** Update multiple SectionBlogListing documents */
  update?: InputMaybe<Array<SectionBlogListingUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SectionBlogListing documents */
  upsert?: InputMaybe<Array<SectionBlogListingUpsertWithNestedWhereUniqueInput>>;
};

export type SectionBlogListingUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  headline?: InputMaybe<Scalars['String']>;
  subHeadline?: InputMaybe<Scalars['String']>;
};

export type SectionBlogListingUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SectionBlogListingUpdateManyInput;
  /** Document search */
  where: SectionBlogListingWhereInput;
};

export type SectionBlogListingUpdateOneInlineInput = {
  /** Connect existing SectionBlogListing document */
  connect?: InputMaybe<SectionBlogListingWhereUniqueInput>;
  /** Create and connect one SectionBlogListing document */
  create?: InputMaybe<SectionBlogListingCreateInput>;
  /** Delete currently connected SectionBlogListing document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SectionBlogListing document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SectionBlogListing document */
  update?: InputMaybe<SectionBlogListingUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SectionBlogListing document */
  upsert?: InputMaybe<SectionBlogListingUpsertWithNestedWhereUniqueInput>;
};

export type SectionBlogListingUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SectionBlogListingUpdateInput;
  /** Unique document search */
  where: SectionBlogListingWhereUniqueInput;
};

export type SectionBlogListingUpsertInput = {
  /** Create document if it didn't exist */
  create: SectionBlogListingCreateInput;
  /** Update document if it exists */
  update: SectionBlogListingUpdateInput;
};

export type SectionBlogListingUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SectionBlogListingUpsertInput;
  /** Unique document search */
  where: SectionBlogListingWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SectionBlogListingWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type SectionBlogListingWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionBlogListingWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionBlogListingWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionBlogListingWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  collectionPages_every?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_none?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_some?: InputMaybe<CollectionPageWhereInput>;
  configSearches_every?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_none?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_some?: InputMaybe<ConfigSearchWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionBlogListingWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionBlogListingWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionBlogListingWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  products_every?: InputMaybe<ProductPageWhereInput>;
  products_none?: InputMaybe<ProductPageWhereInput>;
  products_some?: InputMaybe<ProductPageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  subHeadline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subHeadline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subHeadline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subHeadline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subHeadline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subHeadline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subHeadline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subHeadline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subHeadline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subHeadline_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SectionBlogListingWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionBlogListingWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionBlogListingWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionBlogListingWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SectionBlogListingWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References SectionBlogListing record uniquely */
export type SectionBlogListingWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SectionCollectionCarousel = Node & {
  __typename?: 'SectionCollectionCarousel';
  adminTitle?: Maybe<Scalars['String']>;
  collectionPages: Array<CollectionPage>;
  collections: Array<CollectionLink>;
  configSearches: Array<ConfigSearch>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<SectionCollectionCarousel>;
  fullWidthTemplates: Array<CmsPage>;
  headline?: Maybe<Scalars['String']>;
  /** List of SectionCollectionCarousel versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type SectionCollectionCarouselCollectionPagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CollectionPageWhereInput>;
};


export type SectionCollectionCarouselCollectionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<CollectionLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CollectionLinkWhereInput>;
};


export type SectionCollectionCarouselConfigSearchesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigSearchWhereInput>;
};


export type SectionCollectionCarouselCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionCollectionCarouselDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type SectionCollectionCarouselFullWidthTemplatesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsPageWhereInput>;
};


export type SectionCollectionCarouselHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type SectionCollectionCarouselPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionCollectionCarouselScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type SectionCollectionCarouselUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type SectionCollectionCarouselConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SectionCollectionCarouselWhereUniqueInput;
};

/** A connection to a list of items. */
export type SectionCollectionCarouselConnection = {
  __typename?: 'SectionCollectionCarouselConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SectionCollectionCarouselEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SectionCollectionCarouselCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  collectionPages?: InputMaybe<CollectionPageCreateManyInlineInput>;
  collections?: InputMaybe<CollectionLinkCreateManyInlineInput>;
  configSearches?: InputMaybe<ConfigSearchCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  fullWidthTemplates?: InputMaybe<CmsPageCreateManyInlineInput>;
  headline?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type SectionCollectionCarouselCreateManyInlineInput = {
  /** Connect multiple existing SectionCollectionCarousel documents */
  connect?: InputMaybe<Array<SectionCollectionCarouselWhereUniqueInput>>;
  /** Create and connect multiple existing SectionCollectionCarousel documents */
  create?: InputMaybe<Array<SectionCollectionCarouselCreateInput>>;
};

export type SectionCollectionCarouselCreateOneInlineInput = {
  /** Connect one existing SectionCollectionCarousel document */
  connect?: InputMaybe<SectionCollectionCarouselWhereUniqueInput>;
  /** Create and connect one SectionCollectionCarousel document */
  create?: InputMaybe<SectionCollectionCarouselCreateInput>;
};

/** An edge in a connection. */
export type SectionCollectionCarouselEdge = {
  __typename?: 'SectionCollectionCarouselEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SectionCollectionCarousel;
};

/** Identifies documents */
export type SectionCollectionCarouselManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionCollectionCarouselWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionCollectionCarouselWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionCollectionCarouselWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  collectionPages_every?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_none?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_some?: InputMaybe<CollectionPageWhereInput>;
  collections_every?: InputMaybe<CollectionLinkWhereInput>;
  collections_none?: InputMaybe<CollectionLinkWhereInput>;
  collections_some?: InputMaybe<CollectionLinkWhereInput>;
  configSearches_every?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_none?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_some?: InputMaybe<ConfigSearchWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionCollectionCarouselWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionCollectionCarouselWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionCollectionCarouselWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum SectionCollectionCarouselOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  HeadlineAsc = 'headline_ASC',
  HeadlineDesc = 'headline_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type SectionCollectionCarouselUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  collectionPages?: InputMaybe<CollectionPageUpdateManyInlineInput>;
  collections?: InputMaybe<CollectionLinkUpdateManyInlineInput>;
  configSearches?: InputMaybe<ConfigSearchUpdateManyInlineInput>;
  fullWidthTemplates?: InputMaybe<CmsPageUpdateManyInlineInput>;
  headline?: InputMaybe<Scalars['String']>;
};

export type SectionCollectionCarouselUpdateManyInlineInput = {
  /** Connect multiple existing SectionCollectionCarousel documents */
  connect?: InputMaybe<Array<SectionCollectionCarouselConnectInput>>;
  /** Create and connect multiple SectionCollectionCarousel documents */
  create?: InputMaybe<Array<SectionCollectionCarouselCreateInput>>;
  /** Delete multiple SectionCollectionCarousel documents */
  delete?: InputMaybe<Array<SectionCollectionCarouselWhereUniqueInput>>;
  /** Disconnect multiple SectionCollectionCarousel documents */
  disconnect?: InputMaybe<Array<SectionCollectionCarouselWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SectionCollectionCarousel documents */
  set?: InputMaybe<Array<SectionCollectionCarouselWhereUniqueInput>>;
  /** Update multiple SectionCollectionCarousel documents */
  update?: InputMaybe<Array<SectionCollectionCarouselUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SectionCollectionCarousel documents */
  upsert?: InputMaybe<Array<SectionCollectionCarouselUpsertWithNestedWhereUniqueInput>>;
};

export type SectionCollectionCarouselUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  headline?: InputMaybe<Scalars['String']>;
};

export type SectionCollectionCarouselUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SectionCollectionCarouselUpdateManyInput;
  /** Document search */
  where: SectionCollectionCarouselWhereInput;
};

export type SectionCollectionCarouselUpdateOneInlineInput = {
  /** Connect existing SectionCollectionCarousel document */
  connect?: InputMaybe<SectionCollectionCarouselWhereUniqueInput>;
  /** Create and connect one SectionCollectionCarousel document */
  create?: InputMaybe<SectionCollectionCarouselCreateInput>;
  /** Delete currently connected SectionCollectionCarousel document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SectionCollectionCarousel document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SectionCollectionCarousel document */
  update?: InputMaybe<SectionCollectionCarouselUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SectionCollectionCarousel document */
  upsert?: InputMaybe<SectionCollectionCarouselUpsertWithNestedWhereUniqueInput>;
};

export type SectionCollectionCarouselUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SectionCollectionCarouselUpdateInput;
  /** Unique document search */
  where: SectionCollectionCarouselWhereUniqueInput;
};

export type SectionCollectionCarouselUpsertInput = {
  /** Create document if it didn't exist */
  create: SectionCollectionCarouselCreateInput;
  /** Update document if it exists */
  update: SectionCollectionCarouselUpdateInput;
};

export type SectionCollectionCarouselUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SectionCollectionCarouselUpsertInput;
  /** Unique document search */
  where: SectionCollectionCarouselWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SectionCollectionCarouselWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type SectionCollectionCarouselWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionCollectionCarouselWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionCollectionCarouselWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionCollectionCarouselWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  collectionPages_every?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_none?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_some?: InputMaybe<CollectionPageWhereInput>;
  collections_every?: InputMaybe<CollectionLinkWhereInput>;
  collections_none?: InputMaybe<CollectionLinkWhereInput>;
  collections_some?: InputMaybe<CollectionLinkWhereInput>;
  configSearches_every?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_none?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_some?: InputMaybe<ConfigSearchWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionCollectionCarouselWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionCollectionCarouselWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionCollectionCarouselWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SectionCollectionCarouselWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionCollectionCarouselWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionCollectionCarouselWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionCollectionCarouselWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SectionCollectionCarouselWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References SectionCollectionCarousel record uniquely */
export type SectionCollectionCarouselWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SectionCollectionDropDown = Node & {
  __typename?: 'SectionCollectionDropDown';
  adminTitle?: Maybe<Scalars['String']>;
  configSearches: Array<ConfigSearch>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<SectionCollectionDropDown>;
  fullWidthTemplates: Array<CmsPage>;
  headline?: Maybe<Scalars['String']>;
  /** List of SectionCollectionDropDown versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  shopifyCollections: Array<CollectionLink>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type SectionCollectionDropDownConfigSearchesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigSearchWhereInput>;
};


export type SectionCollectionDropDownCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionCollectionDropDownDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type SectionCollectionDropDownFullWidthTemplatesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsPageWhereInput>;
};


export type SectionCollectionDropDownHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type SectionCollectionDropDownPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionCollectionDropDownScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type SectionCollectionDropDownShopifyCollectionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<CollectionLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CollectionLinkWhereInput>;
};


export type SectionCollectionDropDownUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type SectionCollectionDropDownConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SectionCollectionDropDownWhereUniqueInput;
};

/** A connection to a list of items. */
export type SectionCollectionDropDownConnection = {
  __typename?: 'SectionCollectionDropDownConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SectionCollectionDropDownEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SectionCollectionDropDownCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  configSearches?: InputMaybe<ConfigSearchCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  fullWidthTemplates?: InputMaybe<CmsPageCreateManyInlineInput>;
  headline?: InputMaybe<Scalars['String']>;
  shopifyCollections?: InputMaybe<CollectionLinkCreateManyInlineInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type SectionCollectionDropDownCreateManyInlineInput = {
  /** Connect multiple existing SectionCollectionDropDown documents */
  connect?: InputMaybe<Array<SectionCollectionDropDownWhereUniqueInput>>;
  /** Create and connect multiple existing SectionCollectionDropDown documents */
  create?: InputMaybe<Array<SectionCollectionDropDownCreateInput>>;
};

export type SectionCollectionDropDownCreateOneInlineInput = {
  /** Connect one existing SectionCollectionDropDown document */
  connect?: InputMaybe<SectionCollectionDropDownWhereUniqueInput>;
  /** Create and connect one SectionCollectionDropDown document */
  create?: InputMaybe<SectionCollectionDropDownCreateInput>;
};

/** An edge in a connection. */
export type SectionCollectionDropDownEdge = {
  __typename?: 'SectionCollectionDropDownEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SectionCollectionDropDown;
};

/** Identifies documents */
export type SectionCollectionDropDownManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionCollectionDropDownWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionCollectionDropDownWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionCollectionDropDownWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  configSearches_every?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_none?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_some?: InputMaybe<ConfigSearchWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionCollectionDropDownWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionCollectionDropDownWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionCollectionDropDownWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  shopifyCollections_every?: InputMaybe<CollectionLinkWhereInput>;
  shopifyCollections_none?: InputMaybe<CollectionLinkWhereInput>;
  shopifyCollections_some?: InputMaybe<CollectionLinkWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum SectionCollectionDropDownOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  HeadlineAsc = 'headline_ASC',
  HeadlineDesc = 'headline_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type SectionCollectionDropDownUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  configSearches?: InputMaybe<ConfigSearchUpdateManyInlineInput>;
  fullWidthTemplates?: InputMaybe<CmsPageUpdateManyInlineInput>;
  headline?: InputMaybe<Scalars['String']>;
  shopifyCollections?: InputMaybe<CollectionLinkUpdateManyInlineInput>;
};

export type SectionCollectionDropDownUpdateManyInlineInput = {
  /** Connect multiple existing SectionCollectionDropDown documents */
  connect?: InputMaybe<Array<SectionCollectionDropDownConnectInput>>;
  /** Create and connect multiple SectionCollectionDropDown documents */
  create?: InputMaybe<Array<SectionCollectionDropDownCreateInput>>;
  /** Delete multiple SectionCollectionDropDown documents */
  delete?: InputMaybe<Array<SectionCollectionDropDownWhereUniqueInput>>;
  /** Disconnect multiple SectionCollectionDropDown documents */
  disconnect?: InputMaybe<Array<SectionCollectionDropDownWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SectionCollectionDropDown documents */
  set?: InputMaybe<Array<SectionCollectionDropDownWhereUniqueInput>>;
  /** Update multiple SectionCollectionDropDown documents */
  update?: InputMaybe<Array<SectionCollectionDropDownUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SectionCollectionDropDown documents */
  upsert?: InputMaybe<Array<SectionCollectionDropDownUpsertWithNestedWhereUniqueInput>>;
};

export type SectionCollectionDropDownUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  headline?: InputMaybe<Scalars['String']>;
};

export type SectionCollectionDropDownUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SectionCollectionDropDownUpdateManyInput;
  /** Document search */
  where: SectionCollectionDropDownWhereInput;
};

export type SectionCollectionDropDownUpdateOneInlineInput = {
  /** Connect existing SectionCollectionDropDown document */
  connect?: InputMaybe<SectionCollectionDropDownWhereUniqueInput>;
  /** Create and connect one SectionCollectionDropDown document */
  create?: InputMaybe<SectionCollectionDropDownCreateInput>;
  /** Delete currently connected SectionCollectionDropDown document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SectionCollectionDropDown document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SectionCollectionDropDown document */
  update?: InputMaybe<SectionCollectionDropDownUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SectionCollectionDropDown document */
  upsert?: InputMaybe<SectionCollectionDropDownUpsertWithNestedWhereUniqueInput>;
};

export type SectionCollectionDropDownUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SectionCollectionDropDownUpdateInput;
  /** Unique document search */
  where: SectionCollectionDropDownWhereUniqueInput;
};

export type SectionCollectionDropDownUpsertInput = {
  /** Create document if it didn't exist */
  create: SectionCollectionDropDownCreateInput;
  /** Update document if it exists */
  update: SectionCollectionDropDownUpdateInput;
};

export type SectionCollectionDropDownUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SectionCollectionDropDownUpsertInput;
  /** Unique document search */
  where: SectionCollectionDropDownWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SectionCollectionDropDownWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type SectionCollectionDropDownWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionCollectionDropDownWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionCollectionDropDownWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionCollectionDropDownWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  configSearches_every?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_none?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_some?: InputMaybe<ConfigSearchWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionCollectionDropDownWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionCollectionDropDownWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionCollectionDropDownWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  shopifyCollections_every?: InputMaybe<CollectionLinkWhereInput>;
  shopifyCollections_none?: InputMaybe<CollectionLinkWhereInput>;
  shopifyCollections_some?: InputMaybe<CollectionLinkWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SectionCollectionDropDownWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionCollectionDropDownWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionCollectionDropDownWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionCollectionDropDownWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SectionCollectionDropDownWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References SectionCollectionDropDown record uniquely */
export type SectionCollectionDropDownWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SectionCollectionFeatureLarge = Node & {
  __typename?: 'SectionCollectionFeatureLarge';
  adminTitle?: Maybe<Scalars['String']>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  ctaButton: Array<Cta>;
  /** Get the document in other stages */
  documentInStages: Array<SectionCollectionFeatureLarge>;
  headline?: Maybe<Scalars['String']>;
  /** List of SectionCollectionFeatureLarge versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  pageBuyingGuides: Array<PageBuyingGuide>;
  productThumbnails: Array<Asset>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  subText?: Maybe<Scalars['String']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type SectionCollectionFeatureLargeCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionCollectionFeatureLargeCtaButtonArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<CtaOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CtaWhereInput>;
};


export type SectionCollectionFeatureLargeDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type SectionCollectionFeatureLargeHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type SectionCollectionFeatureLargePageBuyingGuidesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PageBuyingGuideWhereInput>;
};


export type SectionCollectionFeatureLargeProductThumbnailsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetWhereInput>;
};


export type SectionCollectionFeatureLargePublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionCollectionFeatureLargeScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type SectionCollectionFeatureLargeUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type SectionCollectionFeatureLargeConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SectionCollectionFeatureLargeWhereUniqueInput;
};

/** A connection to a list of items. */
export type SectionCollectionFeatureLargeConnection = {
  __typename?: 'SectionCollectionFeatureLargeConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SectionCollectionFeatureLargeEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SectionCollectionFeatureLargeCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  ctaButton?: InputMaybe<CtaCreateManyInlineInput>;
  headline?: InputMaybe<Scalars['String']>;
  pageBuyingGuides?: InputMaybe<PageBuyingGuideCreateManyInlineInput>;
  productThumbnails?: InputMaybe<AssetCreateManyInlineInput>;
  subText?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type SectionCollectionFeatureLargeCreateManyInlineInput = {
  /** Connect multiple existing SectionCollectionFeatureLarge documents */
  connect?: InputMaybe<Array<SectionCollectionFeatureLargeWhereUniqueInput>>;
  /** Create and connect multiple existing SectionCollectionFeatureLarge documents */
  create?: InputMaybe<Array<SectionCollectionFeatureLargeCreateInput>>;
};

export type SectionCollectionFeatureLargeCreateOneInlineInput = {
  /** Connect one existing SectionCollectionFeatureLarge document */
  connect?: InputMaybe<SectionCollectionFeatureLargeWhereUniqueInput>;
  /** Create and connect one SectionCollectionFeatureLarge document */
  create?: InputMaybe<SectionCollectionFeatureLargeCreateInput>;
};

/** An edge in a connection. */
export type SectionCollectionFeatureLargeEdge = {
  __typename?: 'SectionCollectionFeatureLargeEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SectionCollectionFeatureLarge;
};

/** Identifies documents */
export type SectionCollectionFeatureLargeManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionCollectionFeatureLargeWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionCollectionFeatureLargeWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionCollectionFeatureLargeWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  ctaButton_every?: InputMaybe<CtaWhereInput>;
  ctaButton_none?: InputMaybe<CtaWhereInput>;
  ctaButton_some?: InputMaybe<CtaWhereInput>;
  documentInStages_every?: InputMaybe<SectionCollectionFeatureLargeWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionCollectionFeatureLargeWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionCollectionFeatureLargeWhereStageInput>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  pageBuyingGuides_every?: InputMaybe<PageBuyingGuideWhereInput>;
  pageBuyingGuides_none?: InputMaybe<PageBuyingGuideWhereInput>;
  pageBuyingGuides_some?: InputMaybe<PageBuyingGuideWhereInput>;
  productThumbnails_every?: InputMaybe<AssetWhereInput>;
  productThumbnails_none?: InputMaybe<AssetWhereInput>;
  productThumbnails_some?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  subText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subText_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum SectionCollectionFeatureLargeOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  HeadlineAsc = 'headline_ASC',
  HeadlineDesc = 'headline_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SubTextAsc = 'subText_ASC',
  SubTextDesc = 'subText_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type SectionCollectionFeatureLargeUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  ctaButton?: InputMaybe<CtaUpdateManyInlineInput>;
  headline?: InputMaybe<Scalars['String']>;
  pageBuyingGuides?: InputMaybe<PageBuyingGuideUpdateManyInlineInput>;
  productThumbnails?: InputMaybe<AssetUpdateManyInlineInput>;
  subText?: InputMaybe<Scalars['String']>;
};

export type SectionCollectionFeatureLargeUpdateManyInlineInput = {
  /** Connect multiple existing SectionCollectionFeatureLarge documents */
  connect?: InputMaybe<Array<SectionCollectionFeatureLargeConnectInput>>;
  /** Create and connect multiple SectionCollectionFeatureLarge documents */
  create?: InputMaybe<Array<SectionCollectionFeatureLargeCreateInput>>;
  /** Delete multiple SectionCollectionFeatureLarge documents */
  delete?: InputMaybe<Array<SectionCollectionFeatureLargeWhereUniqueInput>>;
  /** Disconnect multiple SectionCollectionFeatureLarge documents */
  disconnect?: InputMaybe<Array<SectionCollectionFeatureLargeWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SectionCollectionFeatureLarge documents */
  set?: InputMaybe<Array<SectionCollectionFeatureLargeWhereUniqueInput>>;
  /** Update multiple SectionCollectionFeatureLarge documents */
  update?: InputMaybe<Array<SectionCollectionFeatureLargeUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SectionCollectionFeatureLarge documents */
  upsert?: InputMaybe<Array<SectionCollectionFeatureLargeUpsertWithNestedWhereUniqueInput>>;
};

export type SectionCollectionFeatureLargeUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  headline?: InputMaybe<Scalars['String']>;
  subText?: InputMaybe<Scalars['String']>;
};

export type SectionCollectionFeatureLargeUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SectionCollectionFeatureLargeUpdateManyInput;
  /** Document search */
  where: SectionCollectionFeatureLargeWhereInput;
};

export type SectionCollectionFeatureLargeUpdateOneInlineInput = {
  /** Connect existing SectionCollectionFeatureLarge document */
  connect?: InputMaybe<SectionCollectionFeatureLargeWhereUniqueInput>;
  /** Create and connect one SectionCollectionFeatureLarge document */
  create?: InputMaybe<SectionCollectionFeatureLargeCreateInput>;
  /** Delete currently connected SectionCollectionFeatureLarge document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SectionCollectionFeatureLarge document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SectionCollectionFeatureLarge document */
  update?: InputMaybe<SectionCollectionFeatureLargeUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SectionCollectionFeatureLarge document */
  upsert?: InputMaybe<SectionCollectionFeatureLargeUpsertWithNestedWhereUniqueInput>;
};

export type SectionCollectionFeatureLargeUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SectionCollectionFeatureLargeUpdateInput;
  /** Unique document search */
  where: SectionCollectionFeatureLargeWhereUniqueInput;
};

export type SectionCollectionFeatureLargeUpsertInput = {
  /** Create document if it didn't exist */
  create: SectionCollectionFeatureLargeCreateInput;
  /** Update document if it exists */
  update: SectionCollectionFeatureLargeUpdateInput;
};

export type SectionCollectionFeatureLargeUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SectionCollectionFeatureLargeUpsertInput;
  /** Unique document search */
  where: SectionCollectionFeatureLargeWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SectionCollectionFeatureLargeWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type SectionCollectionFeatureLargeWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionCollectionFeatureLargeWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionCollectionFeatureLargeWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionCollectionFeatureLargeWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  ctaButton_every?: InputMaybe<CtaWhereInput>;
  ctaButton_none?: InputMaybe<CtaWhereInput>;
  ctaButton_some?: InputMaybe<CtaWhereInput>;
  documentInStages_every?: InputMaybe<SectionCollectionFeatureLargeWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionCollectionFeatureLargeWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionCollectionFeatureLargeWhereStageInput>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  pageBuyingGuides_every?: InputMaybe<PageBuyingGuideWhereInput>;
  pageBuyingGuides_none?: InputMaybe<PageBuyingGuideWhereInput>;
  pageBuyingGuides_some?: InputMaybe<PageBuyingGuideWhereInput>;
  productThumbnails_every?: InputMaybe<AssetWhereInput>;
  productThumbnails_none?: InputMaybe<AssetWhereInput>;
  productThumbnails_some?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  subText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subText_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SectionCollectionFeatureLargeWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionCollectionFeatureLargeWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionCollectionFeatureLargeWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionCollectionFeatureLargeWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SectionCollectionFeatureLargeWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References SectionCollectionFeatureLarge record uniquely */
export type SectionCollectionFeatureLargeWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SectionCollectionMain = Node & {
  __typename?: 'SectionCollectionMain';
  adminTitle?: Maybe<Scalars['String']>;
  collectionPages: Array<CollectionPage>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<SectionCollectionMain>;
  /** List of SectionCollectionMain versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  modulePromoBanner?: Maybe<ModulePromoBanner>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type SectionCollectionMainCollectionPagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CollectionPageWhereInput>;
};


export type SectionCollectionMainCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionCollectionMainDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type SectionCollectionMainHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type SectionCollectionMainModulePromoBannerArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionCollectionMainPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionCollectionMainScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type SectionCollectionMainUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type SectionCollectionMainConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SectionCollectionMainWhereUniqueInput;
};

/** A connection to a list of items. */
export type SectionCollectionMainConnection = {
  __typename?: 'SectionCollectionMainConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SectionCollectionMainEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SectionCollectionMainCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  collectionPages?: InputMaybe<CollectionPageCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  modulePromoBanner?: InputMaybe<ModulePromoBannerCreateOneInlineInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type SectionCollectionMainCreateManyInlineInput = {
  /** Connect multiple existing SectionCollectionMain documents */
  connect?: InputMaybe<Array<SectionCollectionMainWhereUniqueInput>>;
  /** Create and connect multiple existing SectionCollectionMain documents */
  create?: InputMaybe<Array<SectionCollectionMainCreateInput>>;
};

export type SectionCollectionMainCreateOneInlineInput = {
  /** Connect one existing SectionCollectionMain document */
  connect?: InputMaybe<SectionCollectionMainWhereUniqueInput>;
  /** Create and connect one SectionCollectionMain document */
  create?: InputMaybe<SectionCollectionMainCreateInput>;
};

/** An edge in a connection. */
export type SectionCollectionMainEdge = {
  __typename?: 'SectionCollectionMainEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SectionCollectionMain;
};

/** Identifies documents */
export type SectionCollectionMainManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionCollectionMainWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionCollectionMainWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionCollectionMainWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  collectionPages_every?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_none?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_some?: InputMaybe<CollectionPageWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionCollectionMainWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionCollectionMainWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionCollectionMainWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  modulePromoBanner?: InputMaybe<ModulePromoBannerWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum SectionCollectionMainOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type SectionCollectionMainUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  collectionPages?: InputMaybe<CollectionPageUpdateManyInlineInput>;
  modulePromoBanner?: InputMaybe<ModulePromoBannerUpdateOneInlineInput>;
};

export type SectionCollectionMainUpdateManyInlineInput = {
  /** Connect multiple existing SectionCollectionMain documents */
  connect?: InputMaybe<Array<SectionCollectionMainConnectInput>>;
  /** Create and connect multiple SectionCollectionMain documents */
  create?: InputMaybe<Array<SectionCollectionMainCreateInput>>;
  /** Delete multiple SectionCollectionMain documents */
  delete?: InputMaybe<Array<SectionCollectionMainWhereUniqueInput>>;
  /** Disconnect multiple SectionCollectionMain documents */
  disconnect?: InputMaybe<Array<SectionCollectionMainWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SectionCollectionMain documents */
  set?: InputMaybe<Array<SectionCollectionMainWhereUniqueInput>>;
  /** Update multiple SectionCollectionMain documents */
  update?: InputMaybe<Array<SectionCollectionMainUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SectionCollectionMain documents */
  upsert?: InputMaybe<Array<SectionCollectionMainUpsertWithNestedWhereUniqueInput>>;
};

export type SectionCollectionMainUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
};

export type SectionCollectionMainUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SectionCollectionMainUpdateManyInput;
  /** Document search */
  where: SectionCollectionMainWhereInput;
};

export type SectionCollectionMainUpdateOneInlineInput = {
  /** Connect existing SectionCollectionMain document */
  connect?: InputMaybe<SectionCollectionMainWhereUniqueInput>;
  /** Create and connect one SectionCollectionMain document */
  create?: InputMaybe<SectionCollectionMainCreateInput>;
  /** Delete currently connected SectionCollectionMain document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SectionCollectionMain document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SectionCollectionMain document */
  update?: InputMaybe<SectionCollectionMainUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SectionCollectionMain document */
  upsert?: InputMaybe<SectionCollectionMainUpsertWithNestedWhereUniqueInput>;
};

export type SectionCollectionMainUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SectionCollectionMainUpdateInput;
  /** Unique document search */
  where: SectionCollectionMainWhereUniqueInput;
};

export type SectionCollectionMainUpsertInput = {
  /** Create document if it didn't exist */
  create: SectionCollectionMainCreateInput;
  /** Update document if it exists */
  update: SectionCollectionMainUpdateInput;
};

export type SectionCollectionMainUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SectionCollectionMainUpsertInput;
  /** Unique document search */
  where: SectionCollectionMainWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SectionCollectionMainWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type SectionCollectionMainWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionCollectionMainWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionCollectionMainWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionCollectionMainWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  collectionPages_every?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_none?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_some?: InputMaybe<CollectionPageWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionCollectionMainWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionCollectionMainWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionCollectionMainWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  modulePromoBanner?: InputMaybe<ModulePromoBannerWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SectionCollectionMainWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionCollectionMainWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionCollectionMainWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionCollectionMainWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SectionCollectionMainWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References SectionCollectionMain record uniquely */
export type SectionCollectionMainWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SectionCollectionSubcategoryLink = Node & {
  __typename?: 'SectionCollectionSubcategoryLink';
  adminTitle?: Maybe<Scalars['String']>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<SectionCollectionSubcategoryLink>;
  /** List of SectionCollectionSubcategoryLink versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type SectionCollectionSubcategoryLinkCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionCollectionSubcategoryLinkDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type SectionCollectionSubcategoryLinkHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type SectionCollectionSubcategoryLinkPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionCollectionSubcategoryLinkScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type SectionCollectionSubcategoryLinkUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type SectionCollectionSubcategoryLinkConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SectionCollectionSubcategoryLinkWhereUniqueInput;
};

/** A connection to a list of items. */
export type SectionCollectionSubcategoryLinkConnection = {
  __typename?: 'SectionCollectionSubcategoryLinkConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SectionCollectionSubcategoryLinkEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SectionCollectionSubcategoryLinkCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type SectionCollectionSubcategoryLinkCreateManyInlineInput = {
  /** Connect multiple existing SectionCollectionSubcategoryLink documents */
  connect?: InputMaybe<Array<SectionCollectionSubcategoryLinkWhereUniqueInput>>;
  /** Create and connect multiple existing SectionCollectionSubcategoryLink documents */
  create?: InputMaybe<Array<SectionCollectionSubcategoryLinkCreateInput>>;
};

export type SectionCollectionSubcategoryLinkCreateOneInlineInput = {
  /** Connect one existing SectionCollectionSubcategoryLink document */
  connect?: InputMaybe<SectionCollectionSubcategoryLinkWhereUniqueInput>;
  /** Create and connect one SectionCollectionSubcategoryLink document */
  create?: InputMaybe<SectionCollectionSubcategoryLinkCreateInput>;
};

/** An edge in a connection. */
export type SectionCollectionSubcategoryLinkEdge = {
  __typename?: 'SectionCollectionSubcategoryLinkEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SectionCollectionSubcategoryLink;
};

/** Identifies documents */
export type SectionCollectionSubcategoryLinkManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionCollectionSubcategoryLinkWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionCollectionSubcategoryLinkWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionCollectionSubcategoryLinkWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionCollectionSubcategoryLinkWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionCollectionSubcategoryLinkWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionCollectionSubcategoryLinkWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum SectionCollectionSubcategoryLinkOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type SectionCollectionSubcategoryLinkUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
};

export type SectionCollectionSubcategoryLinkUpdateManyInlineInput = {
  /** Connect multiple existing SectionCollectionSubcategoryLink documents */
  connect?: InputMaybe<Array<SectionCollectionSubcategoryLinkConnectInput>>;
  /** Create and connect multiple SectionCollectionSubcategoryLink documents */
  create?: InputMaybe<Array<SectionCollectionSubcategoryLinkCreateInput>>;
  /** Delete multiple SectionCollectionSubcategoryLink documents */
  delete?: InputMaybe<Array<SectionCollectionSubcategoryLinkWhereUniqueInput>>;
  /** Disconnect multiple SectionCollectionSubcategoryLink documents */
  disconnect?: InputMaybe<Array<SectionCollectionSubcategoryLinkWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SectionCollectionSubcategoryLink documents */
  set?: InputMaybe<Array<SectionCollectionSubcategoryLinkWhereUniqueInput>>;
  /** Update multiple SectionCollectionSubcategoryLink documents */
  update?: InputMaybe<Array<SectionCollectionSubcategoryLinkUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SectionCollectionSubcategoryLink documents */
  upsert?: InputMaybe<Array<SectionCollectionSubcategoryLinkUpsertWithNestedWhereUniqueInput>>;
};

export type SectionCollectionSubcategoryLinkUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
};

export type SectionCollectionSubcategoryLinkUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SectionCollectionSubcategoryLinkUpdateManyInput;
  /** Document search */
  where: SectionCollectionSubcategoryLinkWhereInput;
};

export type SectionCollectionSubcategoryLinkUpdateOneInlineInput = {
  /** Connect existing SectionCollectionSubcategoryLink document */
  connect?: InputMaybe<SectionCollectionSubcategoryLinkWhereUniqueInput>;
  /** Create and connect one SectionCollectionSubcategoryLink document */
  create?: InputMaybe<SectionCollectionSubcategoryLinkCreateInput>;
  /** Delete currently connected SectionCollectionSubcategoryLink document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SectionCollectionSubcategoryLink document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SectionCollectionSubcategoryLink document */
  update?: InputMaybe<SectionCollectionSubcategoryLinkUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SectionCollectionSubcategoryLink document */
  upsert?: InputMaybe<SectionCollectionSubcategoryLinkUpsertWithNestedWhereUniqueInput>;
};

export type SectionCollectionSubcategoryLinkUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SectionCollectionSubcategoryLinkUpdateInput;
  /** Unique document search */
  where: SectionCollectionSubcategoryLinkWhereUniqueInput;
};

export type SectionCollectionSubcategoryLinkUpsertInput = {
  /** Create document if it didn't exist */
  create: SectionCollectionSubcategoryLinkCreateInput;
  /** Update document if it exists */
  update: SectionCollectionSubcategoryLinkUpdateInput;
};

export type SectionCollectionSubcategoryLinkUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SectionCollectionSubcategoryLinkUpsertInput;
  /** Unique document search */
  where: SectionCollectionSubcategoryLinkWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SectionCollectionSubcategoryLinkWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type SectionCollectionSubcategoryLinkWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionCollectionSubcategoryLinkWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionCollectionSubcategoryLinkWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionCollectionSubcategoryLinkWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionCollectionSubcategoryLinkWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionCollectionSubcategoryLinkWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionCollectionSubcategoryLinkWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SectionCollectionSubcategoryLinkWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionCollectionSubcategoryLinkWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionCollectionSubcategoryLinkWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionCollectionSubcategoryLinkWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SectionCollectionSubcategoryLinkWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References SectionCollectionSubcategoryLink record uniquely */
export type SectionCollectionSubcategoryLinkWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SectionCtaButton = Node & {
  __typename?: 'SectionCtaButton';
  adminTitle?: Maybe<Scalars['String']>;
  buttons: Array<Cta>;
  configSearches: Array<ConfigSearch>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<SectionCtaButton>;
  /** List of SectionCtaButton versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type SectionCtaButtonButtonsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<CtaOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CtaWhereInput>;
};


export type SectionCtaButtonConfigSearchesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigSearchWhereInput>;
};


export type SectionCtaButtonCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionCtaButtonDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type SectionCtaButtonHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type SectionCtaButtonPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionCtaButtonScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type SectionCtaButtonUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type SectionCtaButtonConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SectionCtaButtonWhereUniqueInput;
};

/** A connection to a list of items. */
export type SectionCtaButtonConnection = {
  __typename?: 'SectionCtaButtonConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SectionCtaButtonEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SectionCtaButtonCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  buttons?: InputMaybe<CtaCreateManyInlineInput>;
  configSearches?: InputMaybe<ConfigSearchCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type SectionCtaButtonCreateManyInlineInput = {
  /** Connect multiple existing SectionCtaButton documents */
  connect?: InputMaybe<Array<SectionCtaButtonWhereUniqueInput>>;
  /** Create and connect multiple existing SectionCtaButton documents */
  create?: InputMaybe<Array<SectionCtaButtonCreateInput>>;
};

export type SectionCtaButtonCreateOneInlineInput = {
  /** Connect one existing SectionCtaButton document */
  connect?: InputMaybe<SectionCtaButtonWhereUniqueInput>;
  /** Create and connect one SectionCtaButton document */
  create?: InputMaybe<SectionCtaButtonCreateInput>;
};

/** An edge in a connection. */
export type SectionCtaButtonEdge = {
  __typename?: 'SectionCtaButtonEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SectionCtaButton;
};

/** Identifies documents */
export type SectionCtaButtonManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionCtaButtonWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionCtaButtonWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionCtaButtonWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  buttons_every?: InputMaybe<CtaWhereInput>;
  buttons_none?: InputMaybe<CtaWhereInput>;
  buttons_some?: InputMaybe<CtaWhereInput>;
  configSearches_every?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_none?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_some?: InputMaybe<ConfigSearchWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionCtaButtonWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionCtaButtonWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionCtaButtonWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum SectionCtaButtonOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type SectionCtaButtonUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  buttons?: InputMaybe<CtaUpdateManyInlineInput>;
  configSearches?: InputMaybe<ConfigSearchUpdateManyInlineInput>;
};

export type SectionCtaButtonUpdateManyInlineInput = {
  /** Connect multiple existing SectionCtaButton documents */
  connect?: InputMaybe<Array<SectionCtaButtonConnectInput>>;
  /** Create and connect multiple SectionCtaButton documents */
  create?: InputMaybe<Array<SectionCtaButtonCreateInput>>;
  /** Delete multiple SectionCtaButton documents */
  delete?: InputMaybe<Array<SectionCtaButtonWhereUniqueInput>>;
  /** Disconnect multiple SectionCtaButton documents */
  disconnect?: InputMaybe<Array<SectionCtaButtonWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SectionCtaButton documents */
  set?: InputMaybe<Array<SectionCtaButtonWhereUniqueInput>>;
  /** Update multiple SectionCtaButton documents */
  update?: InputMaybe<Array<SectionCtaButtonUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SectionCtaButton documents */
  upsert?: InputMaybe<Array<SectionCtaButtonUpsertWithNestedWhereUniqueInput>>;
};

export type SectionCtaButtonUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
};

export type SectionCtaButtonUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SectionCtaButtonUpdateManyInput;
  /** Document search */
  where: SectionCtaButtonWhereInput;
};

export type SectionCtaButtonUpdateOneInlineInput = {
  /** Connect existing SectionCtaButton document */
  connect?: InputMaybe<SectionCtaButtonWhereUniqueInput>;
  /** Create and connect one SectionCtaButton document */
  create?: InputMaybe<SectionCtaButtonCreateInput>;
  /** Delete currently connected SectionCtaButton document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SectionCtaButton document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SectionCtaButton document */
  update?: InputMaybe<SectionCtaButtonUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SectionCtaButton document */
  upsert?: InputMaybe<SectionCtaButtonUpsertWithNestedWhereUniqueInput>;
};

export type SectionCtaButtonUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SectionCtaButtonUpdateInput;
  /** Unique document search */
  where: SectionCtaButtonWhereUniqueInput;
};

export type SectionCtaButtonUpsertInput = {
  /** Create document if it didn't exist */
  create: SectionCtaButtonCreateInput;
  /** Update document if it exists */
  update: SectionCtaButtonUpdateInput;
};

export type SectionCtaButtonUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SectionCtaButtonUpsertInput;
  /** Unique document search */
  where: SectionCtaButtonWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SectionCtaButtonWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type SectionCtaButtonWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionCtaButtonWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionCtaButtonWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionCtaButtonWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  buttons_every?: InputMaybe<CtaWhereInput>;
  buttons_none?: InputMaybe<CtaWhereInput>;
  buttons_some?: InputMaybe<CtaWhereInput>;
  configSearches_every?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_none?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_some?: InputMaybe<ConfigSearchWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionCtaButtonWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionCtaButtonWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionCtaButtonWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SectionCtaButtonWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionCtaButtonWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionCtaButtonWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionCtaButtonWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SectionCtaButtonWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References SectionCtaButton record uniquely */
export type SectionCtaButtonWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SectionFullWidthImage = Node & {
  __typename?: 'SectionFullWidthImage';
  adminTitle?: Maybe<Scalars['String']>;
  configSearches: Array<ConfigSearch>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<SectionFullWidthImage>;
  fullWidthTemplates: Array<CmsPage>;
  /** List of SectionFullWidthImage versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  imageLayout?: Maybe<ImageLayout>;
  images: Array<Asset>;
  pageBlogArticles: Array<BlogArticle>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type SectionFullWidthImageConfigSearchesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigSearchWhereInput>;
};


export type SectionFullWidthImageCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionFullWidthImageDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type SectionFullWidthImageFullWidthTemplatesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsPageWhereInput>;
};


export type SectionFullWidthImageHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type SectionFullWidthImageImagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetWhereInput>;
};


export type SectionFullWidthImagePageBlogArticlesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogArticleWhereInput>;
};


export type SectionFullWidthImagePublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionFullWidthImageScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type SectionFullWidthImageUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type SectionFullWidthImageConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SectionFullWidthImageWhereUniqueInput;
};

/** A connection to a list of items. */
export type SectionFullWidthImageConnection = {
  __typename?: 'SectionFullWidthImageConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SectionFullWidthImageEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SectionFullWidthImageCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  configSearches?: InputMaybe<ConfigSearchCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  fullWidthTemplates?: InputMaybe<CmsPageCreateManyInlineInput>;
  imageLayout?: InputMaybe<ImageLayout>;
  images?: InputMaybe<AssetCreateManyInlineInput>;
  pageBlogArticles?: InputMaybe<BlogArticleCreateManyInlineInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type SectionFullWidthImageCreateManyInlineInput = {
  /** Connect multiple existing SectionFullWidthImage documents */
  connect?: InputMaybe<Array<SectionFullWidthImageWhereUniqueInput>>;
  /** Create and connect multiple existing SectionFullWidthImage documents */
  create?: InputMaybe<Array<SectionFullWidthImageCreateInput>>;
};

export type SectionFullWidthImageCreateOneInlineInput = {
  /** Connect one existing SectionFullWidthImage document */
  connect?: InputMaybe<SectionFullWidthImageWhereUniqueInput>;
  /** Create and connect one SectionFullWidthImage document */
  create?: InputMaybe<SectionFullWidthImageCreateInput>;
};

/** An edge in a connection. */
export type SectionFullWidthImageEdge = {
  __typename?: 'SectionFullWidthImageEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SectionFullWidthImage;
};

/** Identifies documents */
export type SectionFullWidthImageManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionFullWidthImageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionFullWidthImageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionFullWidthImageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  configSearches_every?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_none?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_some?: InputMaybe<ConfigSearchWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionFullWidthImageWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionFullWidthImageWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionFullWidthImageWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  imageLayout?: InputMaybe<ImageLayout>;
  /** All values that are contained in given list. */
  imageLayout_in?: InputMaybe<Array<InputMaybe<ImageLayout>>>;
  /** Any other value that exists and is not equal to the given value. */
  imageLayout_not?: InputMaybe<ImageLayout>;
  /** All values that are not contained in given list. */
  imageLayout_not_in?: InputMaybe<Array<InputMaybe<ImageLayout>>>;
  images_every?: InputMaybe<AssetWhereInput>;
  images_none?: InputMaybe<AssetWhereInput>;
  images_some?: InputMaybe<AssetWhereInput>;
  pageBlogArticles_every?: InputMaybe<BlogArticleWhereInput>;
  pageBlogArticles_none?: InputMaybe<BlogArticleWhereInput>;
  pageBlogArticles_some?: InputMaybe<BlogArticleWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum SectionFullWidthImageOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  ImageLayoutAsc = 'imageLayout_ASC',
  ImageLayoutDesc = 'imageLayout_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type SectionFullWidthImageUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  configSearches?: InputMaybe<ConfigSearchUpdateManyInlineInput>;
  fullWidthTemplates?: InputMaybe<CmsPageUpdateManyInlineInput>;
  imageLayout?: InputMaybe<ImageLayout>;
  images?: InputMaybe<AssetUpdateManyInlineInput>;
  pageBlogArticles?: InputMaybe<BlogArticleUpdateManyInlineInput>;
};

export type SectionFullWidthImageUpdateManyInlineInput = {
  /** Connect multiple existing SectionFullWidthImage documents */
  connect?: InputMaybe<Array<SectionFullWidthImageConnectInput>>;
  /** Create and connect multiple SectionFullWidthImage documents */
  create?: InputMaybe<Array<SectionFullWidthImageCreateInput>>;
  /** Delete multiple SectionFullWidthImage documents */
  delete?: InputMaybe<Array<SectionFullWidthImageWhereUniqueInput>>;
  /** Disconnect multiple SectionFullWidthImage documents */
  disconnect?: InputMaybe<Array<SectionFullWidthImageWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SectionFullWidthImage documents */
  set?: InputMaybe<Array<SectionFullWidthImageWhereUniqueInput>>;
  /** Update multiple SectionFullWidthImage documents */
  update?: InputMaybe<Array<SectionFullWidthImageUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SectionFullWidthImage documents */
  upsert?: InputMaybe<Array<SectionFullWidthImageUpsertWithNestedWhereUniqueInput>>;
};

export type SectionFullWidthImageUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  imageLayout?: InputMaybe<ImageLayout>;
};

export type SectionFullWidthImageUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SectionFullWidthImageUpdateManyInput;
  /** Document search */
  where: SectionFullWidthImageWhereInput;
};

export type SectionFullWidthImageUpdateOneInlineInput = {
  /** Connect existing SectionFullWidthImage document */
  connect?: InputMaybe<SectionFullWidthImageWhereUniqueInput>;
  /** Create and connect one SectionFullWidthImage document */
  create?: InputMaybe<SectionFullWidthImageCreateInput>;
  /** Delete currently connected SectionFullWidthImage document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SectionFullWidthImage document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SectionFullWidthImage document */
  update?: InputMaybe<SectionFullWidthImageUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SectionFullWidthImage document */
  upsert?: InputMaybe<SectionFullWidthImageUpsertWithNestedWhereUniqueInput>;
};

export type SectionFullWidthImageUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SectionFullWidthImageUpdateInput;
  /** Unique document search */
  where: SectionFullWidthImageWhereUniqueInput;
};

export type SectionFullWidthImageUpsertInput = {
  /** Create document if it didn't exist */
  create: SectionFullWidthImageCreateInput;
  /** Update document if it exists */
  update: SectionFullWidthImageUpdateInput;
};

export type SectionFullWidthImageUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SectionFullWidthImageUpsertInput;
  /** Unique document search */
  where: SectionFullWidthImageWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SectionFullWidthImageWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type SectionFullWidthImageWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionFullWidthImageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionFullWidthImageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionFullWidthImageWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  configSearches_every?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_none?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_some?: InputMaybe<ConfigSearchWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionFullWidthImageWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionFullWidthImageWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionFullWidthImageWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  imageLayout?: InputMaybe<ImageLayout>;
  /** All values that are contained in given list. */
  imageLayout_in?: InputMaybe<Array<InputMaybe<ImageLayout>>>;
  /** Any other value that exists and is not equal to the given value. */
  imageLayout_not?: InputMaybe<ImageLayout>;
  /** All values that are not contained in given list. */
  imageLayout_not_in?: InputMaybe<Array<InputMaybe<ImageLayout>>>;
  images_every?: InputMaybe<AssetWhereInput>;
  images_none?: InputMaybe<AssetWhereInput>;
  images_some?: InputMaybe<AssetWhereInput>;
  pageBlogArticles_every?: InputMaybe<BlogArticleWhereInput>;
  pageBlogArticles_none?: InputMaybe<BlogArticleWhereInput>;
  pageBlogArticles_some?: InputMaybe<BlogArticleWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SectionFullWidthImageWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionFullWidthImageWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionFullWidthImageWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionFullWidthImageWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SectionFullWidthImageWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References SectionFullWidthImage record uniquely */
export type SectionFullWidthImageWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SectionImageAndTextGrid = Node & {
  __typename?: 'SectionImageAndTextGrid';
  adminTitle?: Maybe<Scalars['String']>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<SectionImageAndTextGrid>;
  heading?: Maybe<Scalars['String']>;
  /** List of SectionImageAndTextGrid versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  imageAndTextBlocks: Array<ModuleImageAndText>;
  pageBuyingGuides: Array<PageBuyingGuide>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type SectionImageAndTextGridCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionImageAndTextGridDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type SectionImageAndTextGridHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type SectionImageAndTextGridImageAndTextBlocksArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ModuleImageAndTextOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ModuleImageAndTextWhereInput>;
};


export type SectionImageAndTextGridPageBuyingGuidesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PageBuyingGuideWhereInput>;
};


export type SectionImageAndTextGridPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionImageAndTextGridScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type SectionImageAndTextGridUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type SectionImageAndTextGridConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SectionImageAndTextGridWhereUniqueInput;
};

/** A connection to a list of items. */
export type SectionImageAndTextGridConnection = {
  __typename?: 'SectionImageAndTextGridConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SectionImageAndTextGridEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SectionImageAndTextGridCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  heading?: InputMaybe<Scalars['String']>;
  imageAndTextBlocks?: InputMaybe<ModuleImageAndTextCreateManyInlineInput>;
  pageBuyingGuides?: InputMaybe<PageBuyingGuideCreateManyInlineInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type SectionImageAndTextGridCreateManyInlineInput = {
  /** Connect multiple existing SectionImageAndTextGrid documents */
  connect?: InputMaybe<Array<SectionImageAndTextGridWhereUniqueInput>>;
  /** Create and connect multiple existing SectionImageAndTextGrid documents */
  create?: InputMaybe<Array<SectionImageAndTextGridCreateInput>>;
};

export type SectionImageAndTextGridCreateOneInlineInput = {
  /** Connect one existing SectionImageAndTextGrid document */
  connect?: InputMaybe<SectionImageAndTextGridWhereUniqueInput>;
  /** Create and connect one SectionImageAndTextGrid document */
  create?: InputMaybe<SectionImageAndTextGridCreateInput>;
};

/** An edge in a connection. */
export type SectionImageAndTextGridEdge = {
  __typename?: 'SectionImageAndTextGridEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SectionImageAndTextGrid;
};

/** Identifies documents */
export type SectionImageAndTextGridManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionImageAndTextGridWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionImageAndTextGridWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionImageAndTextGridWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionImageAndTextGridWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionImageAndTextGridWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionImageAndTextGridWhereStageInput>;
  heading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  heading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  heading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  heading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  heading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  heading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  heading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  heading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  heading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  heading_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  imageAndTextBlocks_every?: InputMaybe<ModuleImageAndTextWhereInput>;
  imageAndTextBlocks_none?: InputMaybe<ModuleImageAndTextWhereInput>;
  imageAndTextBlocks_some?: InputMaybe<ModuleImageAndTextWhereInput>;
  pageBuyingGuides_every?: InputMaybe<PageBuyingGuideWhereInput>;
  pageBuyingGuides_none?: InputMaybe<PageBuyingGuideWhereInput>;
  pageBuyingGuides_some?: InputMaybe<PageBuyingGuideWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum SectionImageAndTextGridOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  HeadingAsc = 'heading_ASC',
  HeadingDesc = 'heading_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type SectionImageAndTextGridUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  heading?: InputMaybe<Scalars['String']>;
  imageAndTextBlocks?: InputMaybe<ModuleImageAndTextUpdateManyInlineInput>;
  pageBuyingGuides?: InputMaybe<PageBuyingGuideUpdateManyInlineInput>;
};

export type SectionImageAndTextGridUpdateManyInlineInput = {
  /** Connect multiple existing SectionImageAndTextGrid documents */
  connect?: InputMaybe<Array<SectionImageAndTextGridConnectInput>>;
  /** Create and connect multiple SectionImageAndTextGrid documents */
  create?: InputMaybe<Array<SectionImageAndTextGridCreateInput>>;
  /** Delete multiple SectionImageAndTextGrid documents */
  delete?: InputMaybe<Array<SectionImageAndTextGridWhereUniqueInput>>;
  /** Disconnect multiple SectionImageAndTextGrid documents */
  disconnect?: InputMaybe<Array<SectionImageAndTextGridWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SectionImageAndTextGrid documents */
  set?: InputMaybe<Array<SectionImageAndTextGridWhereUniqueInput>>;
  /** Update multiple SectionImageAndTextGrid documents */
  update?: InputMaybe<Array<SectionImageAndTextGridUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SectionImageAndTextGrid documents */
  upsert?: InputMaybe<Array<SectionImageAndTextGridUpsertWithNestedWhereUniqueInput>>;
};

export type SectionImageAndTextGridUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  heading?: InputMaybe<Scalars['String']>;
};

export type SectionImageAndTextGridUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SectionImageAndTextGridUpdateManyInput;
  /** Document search */
  where: SectionImageAndTextGridWhereInput;
};

export type SectionImageAndTextGridUpdateOneInlineInput = {
  /** Connect existing SectionImageAndTextGrid document */
  connect?: InputMaybe<SectionImageAndTextGridWhereUniqueInput>;
  /** Create and connect one SectionImageAndTextGrid document */
  create?: InputMaybe<SectionImageAndTextGridCreateInput>;
  /** Delete currently connected SectionImageAndTextGrid document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SectionImageAndTextGrid document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SectionImageAndTextGrid document */
  update?: InputMaybe<SectionImageAndTextGridUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SectionImageAndTextGrid document */
  upsert?: InputMaybe<SectionImageAndTextGridUpsertWithNestedWhereUniqueInput>;
};

export type SectionImageAndTextGridUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SectionImageAndTextGridUpdateInput;
  /** Unique document search */
  where: SectionImageAndTextGridWhereUniqueInput;
};

export type SectionImageAndTextGridUpsertInput = {
  /** Create document if it didn't exist */
  create: SectionImageAndTextGridCreateInput;
  /** Update document if it exists */
  update: SectionImageAndTextGridUpdateInput;
};

export type SectionImageAndTextGridUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SectionImageAndTextGridUpsertInput;
  /** Unique document search */
  where: SectionImageAndTextGridWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SectionImageAndTextGridWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type SectionImageAndTextGridWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionImageAndTextGridWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionImageAndTextGridWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionImageAndTextGridWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionImageAndTextGridWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionImageAndTextGridWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionImageAndTextGridWhereStageInput>;
  heading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  heading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  heading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  heading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  heading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  heading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  heading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  heading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  heading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  heading_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  imageAndTextBlocks_every?: InputMaybe<ModuleImageAndTextWhereInput>;
  imageAndTextBlocks_none?: InputMaybe<ModuleImageAndTextWhereInput>;
  imageAndTextBlocks_some?: InputMaybe<ModuleImageAndTextWhereInput>;
  pageBuyingGuides_every?: InputMaybe<PageBuyingGuideWhereInput>;
  pageBuyingGuides_none?: InputMaybe<PageBuyingGuideWhereInput>;
  pageBuyingGuides_some?: InputMaybe<PageBuyingGuideWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SectionImageAndTextGridWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionImageAndTextGridWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionImageAndTextGridWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionImageAndTextGridWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SectionImageAndTextGridWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References SectionImageAndTextGrid record uniquely */
export type SectionImageAndTextGridWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SectionImageTextOverlay = Node & {
  __typename?: 'SectionImageTextOverlay';
  adminTitle?: Maybe<Scalars['String']>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  desktopImage?: Maybe<Asset>;
  /** Get the document in other stages */
  documentInStages: Array<SectionImageTextOverlay>;
  fullWidthTemplates: Array<CmsPage>;
  heading?: Maybe<Scalars['String']>;
  /** List of SectionImageTextOverlay versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  mobileImage?: Maybe<Asset>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type SectionImageTextOverlayCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionImageTextOverlayDesktopImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionImageTextOverlayDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type SectionImageTextOverlayFullWidthTemplatesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsPageWhereInput>;
};


export type SectionImageTextOverlayHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type SectionImageTextOverlayMobileImageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionImageTextOverlayPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionImageTextOverlayScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type SectionImageTextOverlayUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type SectionImageTextOverlayConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SectionImageTextOverlayWhereUniqueInput;
};

/** A connection to a list of items. */
export type SectionImageTextOverlayConnection = {
  __typename?: 'SectionImageTextOverlayConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SectionImageTextOverlayEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SectionImageTextOverlayCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  desktopImage?: InputMaybe<AssetCreateOneInlineInput>;
  fullWidthTemplates?: InputMaybe<CmsPageCreateManyInlineInput>;
  heading?: InputMaybe<Scalars['String']>;
  mobileImage?: InputMaybe<AssetCreateOneInlineInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type SectionImageTextOverlayCreateManyInlineInput = {
  /** Connect multiple existing SectionImageTextOverlay documents */
  connect?: InputMaybe<Array<SectionImageTextOverlayWhereUniqueInput>>;
  /** Create and connect multiple existing SectionImageTextOverlay documents */
  create?: InputMaybe<Array<SectionImageTextOverlayCreateInput>>;
};

export type SectionImageTextOverlayCreateOneInlineInput = {
  /** Connect one existing SectionImageTextOverlay document */
  connect?: InputMaybe<SectionImageTextOverlayWhereUniqueInput>;
  /** Create and connect one SectionImageTextOverlay document */
  create?: InputMaybe<SectionImageTextOverlayCreateInput>;
};

/** An edge in a connection. */
export type SectionImageTextOverlayEdge = {
  __typename?: 'SectionImageTextOverlayEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SectionImageTextOverlay;
};

/** Identifies documents */
export type SectionImageTextOverlayManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionImageTextOverlayWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionImageTextOverlayWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionImageTextOverlayWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  desktopImage?: InputMaybe<AssetWhereInput>;
  documentInStages_every?: InputMaybe<SectionImageTextOverlayWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionImageTextOverlayWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionImageTextOverlayWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  heading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  heading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  heading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  heading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  heading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  heading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  heading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  heading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  heading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  heading_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  mobileImage?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum SectionImageTextOverlayOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  HeadingAsc = 'heading_ASC',
  HeadingDesc = 'heading_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type SectionImageTextOverlayUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  desktopImage?: InputMaybe<AssetUpdateOneInlineInput>;
  fullWidthTemplates?: InputMaybe<CmsPageUpdateManyInlineInput>;
  heading?: InputMaybe<Scalars['String']>;
  mobileImage?: InputMaybe<AssetUpdateOneInlineInput>;
};

export type SectionImageTextOverlayUpdateManyInlineInput = {
  /** Connect multiple existing SectionImageTextOverlay documents */
  connect?: InputMaybe<Array<SectionImageTextOverlayConnectInput>>;
  /** Create and connect multiple SectionImageTextOverlay documents */
  create?: InputMaybe<Array<SectionImageTextOverlayCreateInput>>;
  /** Delete multiple SectionImageTextOverlay documents */
  delete?: InputMaybe<Array<SectionImageTextOverlayWhereUniqueInput>>;
  /** Disconnect multiple SectionImageTextOverlay documents */
  disconnect?: InputMaybe<Array<SectionImageTextOverlayWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SectionImageTextOverlay documents */
  set?: InputMaybe<Array<SectionImageTextOverlayWhereUniqueInput>>;
  /** Update multiple SectionImageTextOverlay documents */
  update?: InputMaybe<Array<SectionImageTextOverlayUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SectionImageTextOverlay documents */
  upsert?: InputMaybe<Array<SectionImageTextOverlayUpsertWithNestedWhereUniqueInput>>;
};

export type SectionImageTextOverlayUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  heading?: InputMaybe<Scalars['String']>;
};

export type SectionImageTextOverlayUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SectionImageTextOverlayUpdateManyInput;
  /** Document search */
  where: SectionImageTextOverlayWhereInput;
};

export type SectionImageTextOverlayUpdateOneInlineInput = {
  /** Connect existing SectionImageTextOverlay document */
  connect?: InputMaybe<SectionImageTextOverlayWhereUniqueInput>;
  /** Create and connect one SectionImageTextOverlay document */
  create?: InputMaybe<SectionImageTextOverlayCreateInput>;
  /** Delete currently connected SectionImageTextOverlay document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SectionImageTextOverlay document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SectionImageTextOverlay document */
  update?: InputMaybe<SectionImageTextOverlayUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SectionImageTextOverlay document */
  upsert?: InputMaybe<SectionImageTextOverlayUpsertWithNestedWhereUniqueInput>;
};

export type SectionImageTextOverlayUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SectionImageTextOverlayUpdateInput;
  /** Unique document search */
  where: SectionImageTextOverlayWhereUniqueInput;
};

export type SectionImageTextOverlayUpsertInput = {
  /** Create document if it didn't exist */
  create: SectionImageTextOverlayCreateInput;
  /** Update document if it exists */
  update: SectionImageTextOverlayUpdateInput;
};

export type SectionImageTextOverlayUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SectionImageTextOverlayUpsertInput;
  /** Unique document search */
  where: SectionImageTextOverlayWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SectionImageTextOverlayWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type SectionImageTextOverlayWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionImageTextOverlayWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionImageTextOverlayWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionImageTextOverlayWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  desktopImage?: InputMaybe<AssetWhereInput>;
  documentInStages_every?: InputMaybe<SectionImageTextOverlayWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionImageTextOverlayWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionImageTextOverlayWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  heading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  heading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  heading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  heading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  heading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  heading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  heading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  heading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  heading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  heading_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  mobileImage?: InputMaybe<AssetWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SectionImageTextOverlayWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionImageTextOverlayWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionImageTextOverlayWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionImageTextOverlayWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SectionImageTextOverlayWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References SectionImageTextOverlay record uniquely */
export type SectionImageTextOverlayWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SectionPreezieProductFinder = Node & {
  __typename?: 'SectionPreezieProductFinder';
  adminTitle?: Maybe<Scalars['String']>;
  collectionPages: Array<CollectionPage>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<SectionPreezieProductFinder>;
  /** List of SectionPreezieProductFinder versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type SectionPreezieProductFinderCollectionPagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CollectionPageWhereInput>;
};


export type SectionPreezieProductFinderCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionPreezieProductFinderDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type SectionPreezieProductFinderHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type SectionPreezieProductFinderPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionPreezieProductFinderScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type SectionPreezieProductFinderUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type SectionPreezieProductFinderConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SectionPreezieProductFinderWhereUniqueInput;
};

/** A connection to a list of items. */
export type SectionPreezieProductFinderConnection = {
  __typename?: 'SectionPreezieProductFinderConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SectionPreezieProductFinderEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SectionPreezieProductFinderCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  collectionPages?: InputMaybe<CollectionPageCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type SectionPreezieProductFinderCreateManyInlineInput = {
  /** Connect multiple existing SectionPreezieProductFinder documents */
  connect?: InputMaybe<Array<SectionPreezieProductFinderWhereUniqueInput>>;
  /** Create and connect multiple existing SectionPreezieProductFinder documents */
  create?: InputMaybe<Array<SectionPreezieProductFinderCreateInput>>;
};

export type SectionPreezieProductFinderCreateOneInlineInput = {
  /** Connect one existing SectionPreezieProductFinder document */
  connect?: InputMaybe<SectionPreezieProductFinderWhereUniqueInput>;
  /** Create and connect one SectionPreezieProductFinder document */
  create?: InputMaybe<SectionPreezieProductFinderCreateInput>;
};

/** An edge in a connection. */
export type SectionPreezieProductFinderEdge = {
  __typename?: 'SectionPreezieProductFinderEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SectionPreezieProductFinder;
};

/** Identifies documents */
export type SectionPreezieProductFinderManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionPreezieProductFinderWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionPreezieProductFinderWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionPreezieProductFinderWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  collectionPages_every?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_none?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_some?: InputMaybe<CollectionPageWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionPreezieProductFinderWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionPreezieProductFinderWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionPreezieProductFinderWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum SectionPreezieProductFinderOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type SectionPreezieProductFinderUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  collectionPages?: InputMaybe<CollectionPageUpdateManyInlineInput>;
};

export type SectionPreezieProductFinderUpdateManyInlineInput = {
  /** Connect multiple existing SectionPreezieProductFinder documents */
  connect?: InputMaybe<Array<SectionPreezieProductFinderConnectInput>>;
  /** Create and connect multiple SectionPreezieProductFinder documents */
  create?: InputMaybe<Array<SectionPreezieProductFinderCreateInput>>;
  /** Delete multiple SectionPreezieProductFinder documents */
  delete?: InputMaybe<Array<SectionPreezieProductFinderWhereUniqueInput>>;
  /** Disconnect multiple SectionPreezieProductFinder documents */
  disconnect?: InputMaybe<Array<SectionPreezieProductFinderWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SectionPreezieProductFinder documents */
  set?: InputMaybe<Array<SectionPreezieProductFinderWhereUniqueInput>>;
  /** Update multiple SectionPreezieProductFinder documents */
  update?: InputMaybe<Array<SectionPreezieProductFinderUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SectionPreezieProductFinder documents */
  upsert?: InputMaybe<Array<SectionPreezieProductFinderUpsertWithNestedWhereUniqueInput>>;
};

export type SectionPreezieProductFinderUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
};

export type SectionPreezieProductFinderUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SectionPreezieProductFinderUpdateManyInput;
  /** Document search */
  where: SectionPreezieProductFinderWhereInput;
};

export type SectionPreezieProductFinderUpdateOneInlineInput = {
  /** Connect existing SectionPreezieProductFinder document */
  connect?: InputMaybe<SectionPreezieProductFinderWhereUniqueInput>;
  /** Create and connect one SectionPreezieProductFinder document */
  create?: InputMaybe<SectionPreezieProductFinderCreateInput>;
  /** Delete currently connected SectionPreezieProductFinder document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SectionPreezieProductFinder document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SectionPreezieProductFinder document */
  update?: InputMaybe<SectionPreezieProductFinderUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SectionPreezieProductFinder document */
  upsert?: InputMaybe<SectionPreezieProductFinderUpsertWithNestedWhereUniqueInput>;
};

export type SectionPreezieProductFinderUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SectionPreezieProductFinderUpdateInput;
  /** Unique document search */
  where: SectionPreezieProductFinderWhereUniqueInput;
};

export type SectionPreezieProductFinderUpsertInput = {
  /** Create document if it didn't exist */
  create: SectionPreezieProductFinderCreateInput;
  /** Update document if it exists */
  update: SectionPreezieProductFinderUpdateInput;
};

export type SectionPreezieProductFinderUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SectionPreezieProductFinderUpsertInput;
  /** Unique document search */
  where: SectionPreezieProductFinderWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SectionPreezieProductFinderWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type SectionPreezieProductFinderWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionPreezieProductFinderWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionPreezieProductFinderWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionPreezieProductFinderWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  collectionPages_every?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_none?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_some?: InputMaybe<CollectionPageWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionPreezieProductFinderWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionPreezieProductFinderWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionPreezieProductFinderWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SectionPreezieProductFinderWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionPreezieProductFinderWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionPreezieProductFinderWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionPreezieProductFinderWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SectionPreezieProductFinderWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References SectionPreezieProductFinder record uniquely */
export type SectionPreezieProductFinderWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SectionProductMain = Node & {
  __typename?: 'SectionProductMain';
  adminTitle?: Maybe<Scalars['String']>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<SectionProductMain>;
  /** List of SectionProductMain versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  products: Array<ProductPage>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type SectionProductMainCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionProductMainDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type SectionProductMainHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type SectionProductMainProductsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProductPageWhereInput>;
};


export type SectionProductMainPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionProductMainScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type SectionProductMainUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type SectionProductMainConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SectionProductMainWhereUniqueInput;
};

/** A connection to a list of items. */
export type SectionProductMainConnection = {
  __typename?: 'SectionProductMainConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SectionProductMainEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SectionProductMainCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  products?: InputMaybe<ProductPageCreateManyInlineInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type SectionProductMainCreateManyInlineInput = {
  /** Connect multiple existing SectionProductMain documents */
  connect?: InputMaybe<Array<SectionProductMainWhereUniqueInput>>;
  /** Create and connect multiple existing SectionProductMain documents */
  create?: InputMaybe<Array<SectionProductMainCreateInput>>;
};

export type SectionProductMainCreateOneInlineInput = {
  /** Connect one existing SectionProductMain document */
  connect?: InputMaybe<SectionProductMainWhereUniqueInput>;
  /** Create and connect one SectionProductMain document */
  create?: InputMaybe<SectionProductMainCreateInput>;
};

/** An edge in a connection. */
export type SectionProductMainEdge = {
  __typename?: 'SectionProductMainEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SectionProductMain;
};

/** Identifies documents */
export type SectionProductMainManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionProductMainWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionProductMainWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionProductMainWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionProductMainWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionProductMainWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionProductMainWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  products_every?: InputMaybe<ProductPageWhereInput>;
  products_none?: InputMaybe<ProductPageWhereInput>;
  products_some?: InputMaybe<ProductPageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum SectionProductMainOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type SectionProductMainUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductPageUpdateManyInlineInput>;
};

export type SectionProductMainUpdateManyInlineInput = {
  /** Connect multiple existing SectionProductMain documents */
  connect?: InputMaybe<Array<SectionProductMainConnectInput>>;
  /** Create and connect multiple SectionProductMain documents */
  create?: InputMaybe<Array<SectionProductMainCreateInput>>;
  /** Delete multiple SectionProductMain documents */
  delete?: InputMaybe<Array<SectionProductMainWhereUniqueInput>>;
  /** Disconnect multiple SectionProductMain documents */
  disconnect?: InputMaybe<Array<SectionProductMainWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SectionProductMain documents */
  set?: InputMaybe<Array<SectionProductMainWhereUniqueInput>>;
  /** Update multiple SectionProductMain documents */
  update?: InputMaybe<Array<SectionProductMainUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SectionProductMain documents */
  upsert?: InputMaybe<Array<SectionProductMainUpsertWithNestedWhereUniqueInput>>;
};

export type SectionProductMainUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
};

export type SectionProductMainUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SectionProductMainUpdateManyInput;
  /** Document search */
  where: SectionProductMainWhereInput;
};

export type SectionProductMainUpdateOneInlineInput = {
  /** Connect existing SectionProductMain document */
  connect?: InputMaybe<SectionProductMainWhereUniqueInput>;
  /** Create and connect one SectionProductMain document */
  create?: InputMaybe<SectionProductMainCreateInput>;
  /** Delete currently connected SectionProductMain document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SectionProductMain document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SectionProductMain document */
  update?: InputMaybe<SectionProductMainUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SectionProductMain document */
  upsert?: InputMaybe<SectionProductMainUpsertWithNestedWhereUniqueInput>;
};

export type SectionProductMainUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SectionProductMainUpdateInput;
  /** Unique document search */
  where: SectionProductMainWhereUniqueInput;
};

export type SectionProductMainUpsertInput = {
  /** Create document if it didn't exist */
  create: SectionProductMainCreateInput;
  /** Update document if it exists */
  update: SectionProductMainUpdateInput;
};

export type SectionProductMainUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SectionProductMainUpsertInput;
  /** Unique document search */
  where: SectionProductMainWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SectionProductMainWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type SectionProductMainWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionProductMainWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionProductMainWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionProductMainWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionProductMainWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionProductMainWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionProductMainWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  products_every?: InputMaybe<ProductPageWhereInput>;
  products_none?: InputMaybe<ProductPageWhereInput>;
  products_some?: InputMaybe<ProductPageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SectionProductMainWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionProductMainWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionProductMainWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionProductMainWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SectionProductMainWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References SectionProductMain record uniquely */
export type SectionProductMainWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SectionProductReview = Node & {
  __typename?: 'SectionProductReview';
  adminTitle?: Maybe<Scalars['String']>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<SectionProductReview>;
  headline?: Maybe<Scalars['String']>;
  /** List of SectionProductReview versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  products: Array<ProductPage>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type SectionProductReviewCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionProductReviewDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type SectionProductReviewHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type SectionProductReviewProductsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProductPageWhereInput>;
};


export type SectionProductReviewPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionProductReviewScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type SectionProductReviewUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type SectionProductReviewConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SectionProductReviewWhereUniqueInput;
};

/** A connection to a list of items. */
export type SectionProductReviewConnection = {
  __typename?: 'SectionProductReviewConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SectionProductReviewEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SectionProductReviewCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  headline?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductPageCreateManyInlineInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type SectionProductReviewCreateManyInlineInput = {
  /** Connect multiple existing SectionProductReview documents */
  connect?: InputMaybe<Array<SectionProductReviewWhereUniqueInput>>;
  /** Create and connect multiple existing SectionProductReview documents */
  create?: InputMaybe<Array<SectionProductReviewCreateInput>>;
};

export type SectionProductReviewCreateOneInlineInput = {
  /** Connect one existing SectionProductReview document */
  connect?: InputMaybe<SectionProductReviewWhereUniqueInput>;
  /** Create and connect one SectionProductReview document */
  create?: InputMaybe<SectionProductReviewCreateInput>;
};

/** An edge in a connection. */
export type SectionProductReviewEdge = {
  __typename?: 'SectionProductReviewEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SectionProductReview;
};

/** Identifies documents */
export type SectionProductReviewManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionProductReviewWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionProductReviewWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionProductReviewWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionProductReviewWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionProductReviewWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionProductReviewWhereStageInput>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  products_every?: InputMaybe<ProductPageWhereInput>;
  products_none?: InputMaybe<ProductPageWhereInput>;
  products_some?: InputMaybe<ProductPageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum SectionProductReviewOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  HeadlineAsc = 'headline_ASC',
  HeadlineDesc = 'headline_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type SectionProductReviewUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  headline?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductPageUpdateManyInlineInput>;
};

export type SectionProductReviewUpdateManyInlineInput = {
  /** Connect multiple existing SectionProductReview documents */
  connect?: InputMaybe<Array<SectionProductReviewConnectInput>>;
  /** Create and connect multiple SectionProductReview documents */
  create?: InputMaybe<Array<SectionProductReviewCreateInput>>;
  /** Delete multiple SectionProductReview documents */
  delete?: InputMaybe<Array<SectionProductReviewWhereUniqueInput>>;
  /** Disconnect multiple SectionProductReview documents */
  disconnect?: InputMaybe<Array<SectionProductReviewWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SectionProductReview documents */
  set?: InputMaybe<Array<SectionProductReviewWhereUniqueInput>>;
  /** Update multiple SectionProductReview documents */
  update?: InputMaybe<Array<SectionProductReviewUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SectionProductReview documents */
  upsert?: InputMaybe<Array<SectionProductReviewUpsertWithNestedWhereUniqueInput>>;
};

export type SectionProductReviewUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  headline?: InputMaybe<Scalars['String']>;
};

export type SectionProductReviewUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SectionProductReviewUpdateManyInput;
  /** Document search */
  where: SectionProductReviewWhereInput;
};

export type SectionProductReviewUpdateOneInlineInput = {
  /** Connect existing SectionProductReview document */
  connect?: InputMaybe<SectionProductReviewWhereUniqueInput>;
  /** Create and connect one SectionProductReview document */
  create?: InputMaybe<SectionProductReviewCreateInput>;
  /** Delete currently connected SectionProductReview document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SectionProductReview document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SectionProductReview document */
  update?: InputMaybe<SectionProductReviewUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SectionProductReview document */
  upsert?: InputMaybe<SectionProductReviewUpsertWithNestedWhereUniqueInput>;
};

export type SectionProductReviewUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SectionProductReviewUpdateInput;
  /** Unique document search */
  where: SectionProductReviewWhereUniqueInput;
};

export type SectionProductReviewUpsertInput = {
  /** Create document if it didn't exist */
  create: SectionProductReviewCreateInput;
  /** Update document if it exists */
  update: SectionProductReviewUpdateInput;
};

export type SectionProductReviewUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SectionProductReviewUpsertInput;
  /** Unique document search */
  where: SectionProductReviewWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SectionProductReviewWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type SectionProductReviewWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionProductReviewWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionProductReviewWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionProductReviewWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionProductReviewWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionProductReviewWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionProductReviewWhereStageInput>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  products_every?: InputMaybe<ProductPageWhereInput>;
  products_none?: InputMaybe<ProductPageWhereInput>;
  products_some?: InputMaybe<ProductPageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SectionProductReviewWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionProductReviewWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionProductReviewWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionProductReviewWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SectionProductReviewWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References SectionProductReview record uniquely */
export type SectionProductReviewWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SectionProductSpotlightGrid = Node & {
  __typename?: 'SectionProductSpotlightGrid';
  adminTitle?: Maybe<Scalars['String']>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<SectionProductSpotlightGrid>;
  heading?: Maybe<Scalars['String']>;
  /** List of SectionProductSpotlightGrid versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  pageBuyingGuides: Array<PageBuyingGuide>;
  productPages: Array<ProductPage>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  subText?: Maybe<Scalars['String']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type SectionProductSpotlightGridCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionProductSpotlightGridDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type SectionProductSpotlightGridHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type SectionProductSpotlightGridPageBuyingGuidesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PageBuyingGuideWhereInput>;
};


export type SectionProductSpotlightGridProductPagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ProductPageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProductPageWhereInput>;
};


export type SectionProductSpotlightGridPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionProductSpotlightGridScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type SectionProductSpotlightGridUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type SectionProductSpotlightGridConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SectionProductSpotlightGridWhereUniqueInput;
};

/** A connection to a list of items. */
export type SectionProductSpotlightGridConnection = {
  __typename?: 'SectionProductSpotlightGridConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SectionProductSpotlightGridEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SectionProductSpotlightGridCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  heading?: InputMaybe<Scalars['String']>;
  pageBuyingGuides?: InputMaybe<PageBuyingGuideCreateManyInlineInput>;
  productPages?: InputMaybe<ProductPageCreateManyInlineInput>;
  subText?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type SectionProductSpotlightGridCreateManyInlineInput = {
  /** Connect multiple existing SectionProductSpotlightGrid documents */
  connect?: InputMaybe<Array<SectionProductSpotlightGridWhereUniqueInput>>;
  /** Create and connect multiple existing SectionProductSpotlightGrid documents */
  create?: InputMaybe<Array<SectionProductSpotlightGridCreateInput>>;
};

export type SectionProductSpotlightGridCreateOneInlineInput = {
  /** Connect one existing SectionProductSpotlightGrid document */
  connect?: InputMaybe<SectionProductSpotlightGridWhereUniqueInput>;
  /** Create and connect one SectionProductSpotlightGrid document */
  create?: InputMaybe<SectionProductSpotlightGridCreateInput>;
};

/** An edge in a connection. */
export type SectionProductSpotlightGridEdge = {
  __typename?: 'SectionProductSpotlightGridEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SectionProductSpotlightGrid;
};

/** Identifies documents */
export type SectionProductSpotlightGridManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionProductSpotlightGridWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionProductSpotlightGridWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionProductSpotlightGridWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionProductSpotlightGridWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionProductSpotlightGridWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionProductSpotlightGridWhereStageInput>;
  heading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  heading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  heading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  heading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  heading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  heading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  heading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  heading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  heading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  heading_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  pageBuyingGuides_every?: InputMaybe<PageBuyingGuideWhereInput>;
  pageBuyingGuides_none?: InputMaybe<PageBuyingGuideWhereInput>;
  pageBuyingGuides_some?: InputMaybe<PageBuyingGuideWhereInput>;
  productPages_every?: InputMaybe<ProductPageWhereInput>;
  productPages_none?: InputMaybe<ProductPageWhereInput>;
  productPages_some?: InputMaybe<ProductPageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  subText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subText_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum SectionProductSpotlightGridOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  HeadingAsc = 'heading_ASC',
  HeadingDesc = 'heading_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SubTextAsc = 'subText_ASC',
  SubTextDesc = 'subText_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type SectionProductSpotlightGridUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  heading?: InputMaybe<Scalars['String']>;
  pageBuyingGuides?: InputMaybe<PageBuyingGuideUpdateManyInlineInput>;
  productPages?: InputMaybe<ProductPageUpdateManyInlineInput>;
  subText?: InputMaybe<Scalars['String']>;
};

export type SectionProductSpotlightGridUpdateManyInlineInput = {
  /** Connect multiple existing SectionProductSpotlightGrid documents */
  connect?: InputMaybe<Array<SectionProductSpotlightGridConnectInput>>;
  /** Create and connect multiple SectionProductSpotlightGrid documents */
  create?: InputMaybe<Array<SectionProductSpotlightGridCreateInput>>;
  /** Delete multiple SectionProductSpotlightGrid documents */
  delete?: InputMaybe<Array<SectionProductSpotlightGridWhereUniqueInput>>;
  /** Disconnect multiple SectionProductSpotlightGrid documents */
  disconnect?: InputMaybe<Array<SectionProductSpotlightGridWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SectionProductSpotlightGrid documents */
  set?: InputMaybe<Array<SectionProductSpotlightGridWhereUniqueInput>>;
  /** Update multiple SectionProductSpotlightGrid documents */
  update?: InputMaybe<Array<SectionProductSpotlightGridUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SectionProductSpotlightGrid documents */
  upsert?: InputMaybe<Array<SectionProductSpotlightGridUpsertWithNestedWhereUniqueInput>>;
};

export type SectionProductSpotlightGridUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  heading?: InputMaybe<Scalars['String']>;
  subText?: InputMaybe<Scalars['String']>;
};

export type SectionProductSpotlightGridUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SectionProductSpotlightGridUpdateManyInput;
  /** Document search */
  where: SectionProductSpotlightGridWhereInput;
};

export type SectionProductSpotlightGridUpdateOneInlineInput = {
  /** Connect existing SectionProductSpotlightGrid document */
  connect?: InputMaybe<SectionProductSpotlightGridWhereUniqueInput>;
  /** Create and connect one SectionProductSpotlightGrid document */
  create?: InputMaybe<SectionProductSpotlightGridCreateInput>;
  /** Delete currently connected SectionProductSpotlightGrid document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SectionProductSpotlightGrid document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SectionProductSpotlightGrid document */
  update?: InputMaybe<SectionProductSpotlightGridUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SectionProductSpotlightGrid document */
  upsert?: InputMaybe<SectionProductSpotlightGridUpsertWithNestedWhereUniqueInput>;
};

export type SectionProductSpotlightGridUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SectionProductSpotlightGridUpdateInput;
  /** Unique document search */
  where: SectionProductSpotlightGridWhereUniqueInput;
};

export type SectionProductSpotlightGridUpsertInput = {
  /** Create document if it didn't exist */
  create: SectionProductSpotlightGridCreateInput;
  /** Update document if it exists */
  update: SectionProductSpotlightGridUpdateInput;
};

export type SectionProductSpotlightGridUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SectionProductSpotlightGridUpsertInput;
  /** Unique document search */
  where: SectionProductSpotlightGridWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SectionProductSpotlightGridWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type SectionProductSpotlightGridWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionProductSpotlightGridWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionProductSpotlightGridWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionProductSpotlightGridWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionProductSpotlightGridWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionProductSpotlightGridWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionProductSpotlightGridWhereStageInput>;
  heading?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  heading_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  heading_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  heading_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  heading_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  heading_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  heading_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  heading_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  heading_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  heading_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  pageBuyingGuides_every?: InputMaybe<PageBuyingGuideWhereInput>;
  pageBuyingGuides_none?: InputMaybe<PageBuyingGuideWhereInput>;
  pageBuyingGuides_some?: InputMaybe<PageBuyingGuideWhereInput>;
  productPages_every?: InputMaybe<ProductPageWhereInput>;
  productPages_none?: InputMaybe<ProductPageWhereInput>;
  productPages_some?: InputMaybe<ProductPageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  subText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subText_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SectionProductSpotlightGridWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionProductSpotlightGridWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionProductSpotlightGridWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionProductSpotlightGridWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SectionProductSpotlightGridWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References SectionProductSpotlightGrid record uniquely */
export type SectionProductSpotlightGridWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SectionProductSpotlightLarge = Node & {
  __typename?: 'SectionProductSpotlightLarge';
  adminTitle?: Maybe<Scalars['String']>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<SectionProductSpotlightLarge>;
  /** List of SectionProductSpotlightLarge versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  pageBuyingGuides: Array<PageBuyingGuide>;
  productPage?: Maybe<ProductPage>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type SectionProductSpotlightLargeCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionProductSpotlightLargeDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type SectionProductSpotlightLargeHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type SectionProductSpotlightLargePageBuyingGuidesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PageBuyingGuideWhereInput>;
};


export type SectionProductSpotlightLargeProductPageArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionProductSpotlightLargePublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionProductSpotlightLargeScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type SectionProductSpotlightLargeUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type SectionProductSpotlightLargeConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SectionProductSpotlightLargeWhereUniqueInput;
};

/** A connection to a list of items. */
export type SectionProductSpotlightLargeConnection = {
  __typename?: 'SectionProductSpotlightLargeConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SectionProductSpotlightLargeEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SectionProductSpotlightLargeCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  pageBuyingGuides?: InputMaybe<PageBuyingGuideCreateManyInlineInput>;
  productPage?: InputMaybe<ProductPageCreateOneInlineInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type SectionProductSpotlightLargeCreateManyInlineInput = {
  /** Connect multiple existing SectionProductSpotlightLarge documents */
  connect?: InputMaybe<Array<SectionProductSpotlightLargeWhereUniqueInput>>;
  /** Create and connect multiple existing SectionProductSpotlightLarge documents */
  create?: InputMaybe<Array<SectionProductSpotlightLargeCreateInput>>;
};

export type SectionProductSpotlightLargeCreateOneInlineInput = {
  /** Connect one existing SectionProductSpotlightLarge document */
  connect?: InputMaybe<SectionProductSpotlightLargeWhereUniqueInput>;
  /** Create and connect one SectionProductSpotlightLarge document */
  create?: InputMaybe<SectionProductSpotlightLargeCreateInput>;
};

/** An edge in a connection. */
export type SectionProductSpotlightLargeEdge = {
  __typename?: 'SectionProductSpotlightLargeEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SectionProductSpotlightLarge;
};

/** Identifies documents */
export type SectionProductSpotlightLargeManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionProductSpotlightLargeWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionProductSpotlightLargeWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionProductSpotlightLargeWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionProductSpotlightLargeWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionProductSpotlightLargeWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionProductSpotlightLargeWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  pageBuyingGuides_every?: InputMaybe<PageBuyingGuideWhereInput>;
  pageBuyingGuides_none?: InputMaybe<PageBuyingGuideWhereInput>;
  pageBuyingGuides_some?: InputMaybe<PageBuyingGuideWhereInput>;
  productPage?: InputMaybe<ProductPageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum SectionProductSpotlightLargeOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type SectionProductSpotlightLargeUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  pageBuyingGuides?: InputMaybe<PageBuyingGuideUpdateManyInlineInput>;
  productPage?: InputMaybe<ProductPageUpdateOneInlineInput>;
};

export type SectionProductSpotlightLargeUpdateManyInlineInput = {
  /** Connect multiple existing SectionProductSpotlightLarge documents */
  connect?: InputMaybe<Array<SectionProductSpotlightLargeConnectInput>>;
  /** Create and connect multiple SectionProductSpotlightLarge documents */
  create?: InputMaybe<Array<SectionProductSpotlightLargeCreateInput>>;
  /** Delete multiple SectionProductSpotlightLarge documents */
  delete?: InputMaybe<Array<SectionProductSpotlightLargeWhereUniqueInput>>;
  /** Disconnect multiple SectionProductSpotlightLarge documents */
  disconnect?: InputMaybe<Array<SectionProductSpotlightLargeWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SectionProductSpotlightLarge documents */
  set?: InputMaybe<Array<SectionProductSpotlightLargeWhereUniqueInput>>;
  /** Update multiple SectionProductSpotlightLarge documents */
  update?: InputMaybe<Array<SectionProductSpotlightLargeUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SectionProductSpotlightLarge documents */
  upsert?: InputMaybe<Array<SectionProductSpotlightLargeUpsertWithNestedWhereUniqueInput>>;
};

export type SectionProductSpotlightLargeUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
};

export type SectionProductSpotlightLargeUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SectionProductSpotlightLargeUpdateManyInput;
  /** Document search */
  where: SectionProductSpotlightLargeWhereInput;
};

export type SectionProductSpotlightLargeUpdateOneInlineInput = {
  /** Connect existing SectionProductSpotlightLarge document */
  connect?: InputMaybe<SectionProductSpotlightLargeWhereUniqueInput>;
  /** Create and connect one SectionProductSpotlightLarge document */
  create?: InputMaybe<SectionProductSpotlightLargeCreateInput>;
  /** Delete currently connected SectionProductSpotlightLarge document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SectionProductSpotlightLarge document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SectionProductSpotlightLarge document */
  update?: InputMaybe<SectionProductSpotlightLargeUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SectionProductSpotlightLarge document */
  upsert?: InputMaybe<SectionProductSpotlightLargeUpsertWithNestedWhereUniqueInput>;
};

export type SectionProductSpotlightLargeUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SectionProductSpotlightLargeUpdateInput;
  /** Unique document search */
  where: SectionProductSpotlightLargeWhereUniqueInput;
};

export type SectionProductSpotlightLargeUpsertInput = {
  /** Create document if it didn't exist */
  create: SectionProductSpotlightLargeCreateInput;
  /** Update document if it exists */
  update: SectionProductSpotlightLargeUpdateInput;
};

export type SectionProductSpotlightLargeUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SectionProductSpotlightLargeUpsertInput;
  /** Unique document search */
  where: SectionProductSpotlightLargeWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SectionProductSpotlightLargeWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type SectionProductSpotlightLargeWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionProductSpotlightLargeWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionProductSpotlightLargeWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionProductSpotlightLargeWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionProductSpotlightLargeWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionProductSpotlightLargeWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionProductSpotlightLargeWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  pageBuyingGuides_every?: InputMaybe<PageBuyingGuideWhereInput>;
  pageBuyingGuides_none?: InputMaybe<PageBuyingGuideWhereInput>;
  pageBuyingGuides_some?: InputMaybe<PageBuyingGuideWhereInput>;
  productPage?: InputMaybe<ProductPageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SectionProductSpotlightLargeWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionProductSpotlightLargeWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionProductSpotlightLargeWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionProductSpotlightLargeWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SectionProductSpotlightLargeWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References SectionProductSpotlightLarge record uniquely */
export type SectionProductSpotlightLargeWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SectionRelatedProduct = Node & {
  __typename?: 'SectionRelatedProduct';
  adminTitle?: Maybe<Scalars['String']>;
  configSearches: Array<ConfigSearch>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<SectionRelatedProduct>;
  headline?: Maybe<Scalars['String']>;
  /** List of SectionRelatedProduct versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  products: Array<ProductPage>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  subText?: Maybe<Scalars['String']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type SectionRelatedProductConfigSearchesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigSearchWhereInput>;
};


export type SectionRelatedProductCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionRelatedProductDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type SectionRelatedProductHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type SectionRelatedProductProductsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProductPageWhereInput>;
};


export type SectionRelatedProductPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionRelatedProductScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type SectionRelatedProductUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type SectionRelatedProductConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SectionRelatedProductWhereUniqueInput;
};

/** A connection to a list of items. */
export type SectionRelatedProductConnection = {
  __typename?: 'SectionRelatedProductConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SectionRelatedProductEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SectionRelatedProductCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  configSearches?: InputMaybe<ConfigSearchCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  headline?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductPageCreateManyInlineInput>;
  subText?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type SectionRelatedProductCreateManyInlineInput = {
  /** Connect multiple existing SectionRelatedProduct documents */
  connect?: InputMaybe<Array<SectionRelatedProductWhereUniqueInput>>;
  /** Create and connect multiple existing SectionRelatedProduct documents */
  create?: InputMaybe<Array<SectionRelatedProductCreateInput>>;
};

export type SectionRelatedProductCreateOneInlineInput = {
  /** Connect one existing SectionRelatedProduct document */
  connect?: InputMaybe<SectionRelatedProductWhereUniqueInput>;
  /** Create and connect one SectionRelatedProduct document */
  create?: InputMaybe<SectionRelatedProductCreateInput>;
};

/** An edge in a connection. */
export type SectionRelatedProductEdge = {
  __typename?: 'SectionRelatedProductEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SectionRelatedProduct;
};

/** Identifies documents */
export type SectionRelatedProductManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionRelatedProductWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionRelatedProductWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionRelatedProductWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  configSearches_every?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_none?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_some?: InputMaybe<ConfigSearchWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionRelatedProductWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionRelatedProductWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionRelatedProductWhereStageInput>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  products_every?: InputMaybe<ProductPageWhereInput>;
  products_none?: InputMaybe<ProductPageWhereInput>;
  products_some?: InputMaybe<ProductPageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  subText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subText_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum SectionRelatedProductOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  HeadlineAsc = 'headline_ASC',
  HeadlineDesc = 'headline_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SubTextAsc = 'subText_ASC',
  SubTextDesc = 'subText_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type SectionRelatedProductUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  configSearches?: InputMaybe<ConfigSearchUpdateManyInlineInput>;
  headline?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductPageUpdateManyInlineInput>;
  subText?: InputMaybe<Scalars['String']>;
};

export type SectionRelatedProductUpdateManyInlineInput = {
  /** Connect multiple existing SectionRelatedProduct documents */
  connect?: InputMaybe<Array<SectionRelatedProductConnectInput>>;
  /** Create and connect multiple SectionRelatedProduct documents */
  create?: InputMaybe<Array<SectionRelatedProductCreateInput>>;
  /** Delete multiple SectionRelatedProduct documents */
  delete?: InputMaybe<Array<SectionRelatedProductWhereUniqueInput>>;
  /** Disconnect multiple SectionRelatedProduct documents */
  disconnect?: InputMaybe<Array<SectionRelatedProductWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SectionRelatedProduct documents */
  set?: InputMaybe<Array<SectionRelatedProductWhereUniqueInput>>;
  /** Update multiple SectionRelatedProduct documents */
  update?: InputMaybe<Array<SectionRelatedProductUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SectionRelatedProduct documents */
  upsert?: InputMaybe<Array<SectionRelatedProductUpsertWithNestedWhereUniqueInput>>;
};

export type SectionRelatedProductUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  headline?: InputMaybe<Scalars['String']>;
  subText?: InputMaybe<Scalars['String']>;
};

export type SectionRelatedProductUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SectionRelatedProductUpdateManyInput;
  /** Document search */
  where: SectionRelatedProductWhereInput;
};

export type SectionRelatedProductUpdateOneInlineInput = {
  /** Connect existing SectionRelatedProduct document */
  connect?: InputMaybe<SectionRelatedProductWhereUniqueInput>;
  /** Create and connect one SectionRelatedProduct document */
  create?: InputMaybe<SectionRelatedProductCreateInput>;
  /** Delete currently connected SectionRelatedProduct document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SectionRelatedProduct document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SectionRelatedProduct document */
  update?: InputMaybe<SectionRelatedProductUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SectionRelatedProduct document */
  upsert?: InputMaybe<SectionRelatedProductUpsertWithNestedWhereUniqueInput>;
};

export type SectionRelatedProductUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SectionRelatedProductUpdateInput;
  /** Unique document search */
  where: SectionRelatedProductWhereUniqueInput;
};

export type SectionRelatedProductUpsertInput = {
  /** Create document if it didn't exist */
  create: SectionRelatedProductCreateInput;
  /** Update document if it exists */
  update: SectionRelatedProductUpdateInput;
};

export type SectionRelatedProductUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SectionRelatedProductUpsertInput;
  /** Unique document search */
  where: SectionRelatedProductWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SectionRelatedProductWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type SectionRelatedProductWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionRelatedProductWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionRelatedProductWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionRelatedProductWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  configSearches_every?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_none?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_some?: InputMaybe<ConfigSearchWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionRelatedProductWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionRelatedProductWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionRelatedProductWhereStageInput>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  products_every?: InputMaybe<ProductPageWhereInput>;
  products_none?: InputMaybe<ProductPageWhereInput>;
  products_some?: InputMaybe<ProductPageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  subText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  subText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  subText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  subText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  subText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  subText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  subText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  subText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  subText_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SectionRelatedProductWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionRelatedProductWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionRelatedProductWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionRelatedProductWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SectionRelatedProductWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References SectionRelatedProduct record uniquely */
export type SectionRelatedProductWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SectionSalonServiceBlock = Node & {
  __typename?: 'SectionSalonServiceBlock';
  adminTitle?: Maybe<Scalars['String']>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<SectionSalonServiceBlock>;
  /** List of SectionSalonServiceBlock versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  serviceBookNowCta?: Maybe<Cta>;
  /** Hairhouse Salons offer cutting services to achieve your desired style. Receive a comprehensive consultation to discuss the best style for you, finished with a dry off and at-home maintenance advice. */
  serviceDescription?: Maybe<Scalars['String']>;
  /** Express Styling/Blow Dry//Women’s Cut & Finish/Etc */
  serviceName?: Maybe<Scalars['String']>;
  /** in $ value */
  servicePrice?: Maybe<Scalars['String']>;
  /** Styling/Cutting/Colour */
  serviceType?: Maybe<Scalars['String']>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type SectionSalonServiceBlockCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionSalonServiceBlockDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type SectionSalonServiceBlockHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type SectionSalonServiceBlockPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionSalonServiceBlockScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type SectionSalonServiceBlockServiceBookNowCtaArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionSalonServiceBlockUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type SectionSalonServiceBlockConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SectionSalonServiceBlockWhereUniqueInput;
};

/** A connection to a list of items. */
export type SectionSalonServiceBlockConnection = {
  __typename?: 'SectionSalonServiceBlockConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SectionSalonServiceBlockEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SectionSalonServiceBlockCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  cli47e9a21ytm01t7g6t4ce6q?: InputMaybe<ConfigSalonMenuCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  serviceBookNowCta?: InputMaybe<CtaCreateOneInlineInput>;
  serviceDescription?: InputMaybe<Scalars['String']>;
  serviceName?: InputMaybe<Scalars['String']>;
  servicePrice?: InputMaybe<Scalars['String']>;
  serviceType?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type SectionSalonServiceBlockCreateManyInlineInput = {
  /** Connect multiple existing SectionSalonServiceBlock documents */
  connect?: InputMaybe<Array<SectionSalonServiceBlockWhereUniqueInput>>;
  /** Create and connect multiple existing SectionSalonServiceBlock documents */
  create?: InputMaybe<Array<SectionSalonServiceBlockCreateInput>>;
};

export type SectionSalonServiceBlockCreateOneInlineInput = {
  /** Connect one existing SectionSalonServiceBlock document */
  connect?: InputMaybe<SectionSalonServiceBlockWhereUniqueInput>;
  /** Create and connect one SectionSalonServiceBlock document */
  create?: InputMaybe<SectionSalonServiceBlockCreateInput>;
};

/** An edge in a connection. */
export type SectionSalonServiceBlockEdge = {
  __typename?: 'SectionSalonServiceBlockEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SectionSalonServiceBlock;
};

/** Identifies documents */
export type SectionSalonServiceBlockManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionSalonServiceBlockWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionSalonServiceBlockWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionSalonServiceBlockWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionSalonServiceBlockWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionSalonServiceBlockWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionSalonServiceBlockWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  serviceBookNowCta?: InputMaybe<CtaWhereInput>;
  serviceDescription?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  serviceDescription_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  serviceDescription_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  serviceDescription_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  serviceDescription_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  serviceDescription_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  serviceDescription_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  serviceDescription_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  serviceDescription_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  serviceDescription_starts_with?: InputMaybe<Scalars['String']>;
  serviceName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  serviceName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  serviceName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  serviceName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  serviceName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  serviceName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  serviceName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  serviceName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  serviceName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  serviceName_starts_with?: InputMaybe<Scalars['String']>;
  servicePrice?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  servicePrice_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  servicePrice_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  servicePrice_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  servicePrice_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  servicePrice_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  servicePrice_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  servicePrice_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  servicePrice_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  servicePrice_starts_with?: InputMaybe<Scalars['String']>;
  serviceType?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  serviceType_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  serviceType_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  serviceType_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  serviceType_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  serviceType_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  serviceType_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  serviceType_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  serviceType_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  serviceType_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum SectionSalonServiceBlockOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  ServiceDescriptionAsc = 'serviceDescription_ASC',
  ServiceDescriptionDesc = 'serviceDescription_DESC',
  ServiceNameAsc = 'serviceName_ASC',
  ServiceNameDesc = 'serviceName_DESC',
  ServicePriceAsc = 'servicePrice_ASC',
  ServicePriceDesc = 'servicePrice_DESC',
  ServiceTypeAsc = 'serviceType_ASC',
  ServiceTypeDesc = 'serviceType_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type SectionSalonServiceBlockUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  cli47e9a21ytm01t7g6t4ce6q?: InputMaybe<ConfigSalonMenuUpdateManyInlineInput>;
  serviceBookNowCta?: InputMaybe<CtaUpdateOneInlineInput>;
  serviceDescription?: InputMaybe<Scalars['String']>;
  serviceName?: InputMaybe<Scalars['String']>;
  servicePrice?: InputMaybe<Scalars['String']>;
  serviceType?: InputMaybe<Scalars['String']>;
};

export type SectionSalonServiceBlockUpdateManyInlineInput = {
  /** Connect multiple existing SectionSalonServiceBlock documents */
  connect?: InputMaybe<Array<SectionSalonServiceBlockConnectInput>>;
  /** Create and connect multiple SectionSalonServiceBlock documents */
  create?: InputMaybe<Array<SectionSalonServiceBlockCreateInput>>;
  /** Delete multiple SectionSalonServiceBlock documents */
  delete?: InputMaybe<Array<SectionSalonServiceBlockWhereUniqueInput>>;
  /** Disconnect multiple SectionSalonServiceBlock documents */
  disconnect?: InputMaybe<Array<SectionSalonServiceBlockWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SectionSalonServiceBlock documents */
  set?: InputMaybe<Array<SectionSalonServiceBlockWhereUniqueInput>>;
  /** Update multiple SectionSalonServiceBlock documents */
  update?: InputMaybe<Array<SectionSalonServiceBlockUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SectionSalonServiceBlock documents */
  upsert?: InputMaybe<Array<SectionSalonServiceBlockUpsertWithNestedWhereUniqueInput>>;
};

export type SectionSalonServiceBlockUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  serviceDescription?: InputMaybe<Scalars['String']>;
  serviceName?: InputMaybe<Scalars['String']>;
  servicePrice?: InputMaybe<Scalars['String']>;
  serviceType?: InputMaybe<Scalars['String']>;
};

export type SectionSalonServiceBlockUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SectionSalonServiceBlockUpdateManyInput;
  /** Document search */
  where: SectionSalonServiceBlockWhereInput;
};

export type SectionSalonServiceBlockUpdateOneInlineInput = {
  /** Connect existing SectionSalonServiceBlock document */
  connect?: InputMaybe<SectionSalonServiceBlockWhereUniqueInput>;
  /** Create and connect one SectionSalonServiceBlock document */
  create?: InputMaybe<SectionSalonServiceBlockCreateInput>;
  /** Delete currently connected SectionSalonServiceBlock document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SectionSalonServiceBlock document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SectionSalonServiceBlock document */
  update?: InputMaybe<SectionSalonServiceBlockUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SectionSalonServiceBlock document */
  upsert?: InputMaybe<SectionSalonServiceBlockUpsertWithNestedWhereUniqueInput>;
};

export type SectionSalonServiceBlockUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SectionSalonServiceBlockUpdateInput;
  /** Unique document search */
  where: SectionSalonServiceBlockWhereUniqueInput;
};

export type SectionSalonServiceBlockUpsertInput = {
  /** Create document if it didn't exist */
  create: SectionSalonServiceBlockCreateInput;
  /** Update document if it exists */
  update: SectionSalonServiceBlockUpdateInput;
};

export type SectionSalonServiceBlockUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SectionSalonServiceBlockUpsertInput;
  /** Unique document search */
  where: SectionSalonServiceBlockWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SectionSalonServiceBlockWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type SectionSalonServiceBlockWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionSalonServiceBlockWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionSalonServiceBlockWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionSalonServiceBlockWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionSalonServiceBlockWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionSalonServiceBlockWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionSalonServiceBlockWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  serviceBookNowCta?: InputMaybe<CtaWhereInput>;
  serviceDescription?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  serviceDescription_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  serviceDescription_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  serviceDescription_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  serviceDescription_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  serviceDescription_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  serviceDescription_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  serviceDescription_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  serviceDescription_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  serviceDescription_starts_with?: InputMaybe<Scalars['String']>;
  serviceName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  serviceName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  serviceName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  serviceName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  serviceName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  serviceName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  serviceName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  serviceName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  serviceName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  serviceName_starts_with?: InputMaybe<Scalars['String']>;
  servicePrice?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  servicePrice_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  servicePrice_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  servicePrice_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  servicePrice_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  servicePrice_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  servicePrice_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  servicePrice_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  servicePrice_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  servicePrice_starts_with?: InputMaybe<Scalars['String']>;
  serviceType?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  serviceType_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  serviceType_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  serviceType_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  serviceType_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  serviceType_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  serviceType_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  serviceType_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  serviceType_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  serviceType_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SectionSalonServiceBlockWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionSalonServiceBlockWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionSalonServiceBlockWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionSalonServiceBlockWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SectionSalonServiceBlockWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References SectionSalonServiceBlock record uniquely */
export type SectionSalonServiceBlockWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SectionSearchTermList = Node & {
  __typename?: 'SectionSearchTermList';
  adminTitle?: Maybe<Scalars['String']>;
  collectionPages: Array<CollectionPage>;
  configSearches: Array<ConfigSearch>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<SectionSearchTermList>;
  fullWidthTemplates: Array<CmsPage>;
  headline?: Maybe<Scalars['String']>;
  /** List of SectionSearchTermList versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  searchTerms: Array<Scalars['String']>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type SectionSearchTermListCollectionPagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CollectionPageWhereInput>;
};


export type SectionSearchTermListConfigSearchesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigSearchWhereInput>;
};


export type SectionSearchTermListCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionSearchTermListDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type SectionSearchTermListFullWidthTemplatesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsPageWhereInput>;
};


export type SectionSearchTermListHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type SectionSearchTermListPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionSearchTermListScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type SectionSearchTermListUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type SectionSearchTermListConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SectionSearchTermListWhereUniqueInput;
};

/** A connection to a list of items. */
export type SectionSearchTermListConnection = {
  __typename?: 'SectionSearchTermListConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SectionSearchTermListEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SectionSearchTermListCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  collectionPages?: InputMaybe<CollectionPageCreateManyInlineInput>;
  configSearches?: InputMaybe<ConfigSearchCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  fullWidthTemplates?: InputMaybe<CmsPageCreateManyInlineInput>;
  headline?: InputMaybe<Scalars['String']>;
  searchTerms?: InputMaybe<Array<Scalars['String']>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type SectionSearchTermListCreateManyInlineInput = {
  /** Connect multiple existing SectionSearchTermList documents */
  connect?: InputMaybe<Array<SectionSearchTermListWhereUniqueInput>>;
  /** Create and connect multiple existing SectionSearchTermList documents */
  create?: InputMaybe<Array<SectionSearchTermListCreateInput>>;
};

export type SectionSearchTermListCreateOneInlineInput = {
  /** Connect one existing SectionSearchTermList document */
  connect?: InputMaybe<SectionSearchTermListWhereUniqueInput>;
  /** Create and connect one SectionSearchTermList document */
  create?: InputMaybe<SectionSearchTermListCreateInput>;
};

/** An edge in a connection. */
export type SectionSearchTermListEdge = {
  __typename?: 'SectionSearchTermListEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SectionSearchTermList;
};

/** Identifies documents */
export type SectionSearchTermListManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionSearchTermListWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionSearchTermListWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionSearchTermListWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  collectionPages_every?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_none?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_some?: InputMaybe<CollectionPageWhereInput>;
  configSearches_every?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_none?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_some?: InputMaybe<ConfigSearchWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionSearchTermListWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionSearchTermListWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionSearchTermListWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  searchTerms?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains *all* items provided to the filter */
  searchTerms_contains_all?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  searchTerms_contains_none?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains at least one item provided to the filter */
  searchTerms_contains_some?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  searchTerms_not?: InputMaybe<Array<Scalars['String']>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum SectionSearchTermListOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  HeadlineAsc = 'headline_ASC',
  HeadlineDesc = 'headline_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  SearchTermsAsc = 'searchTerms_ASC',
  SearchTermsDesc = 'searchTerms_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type SectionSearchTermListUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  collectionPages?: InputMaybe<CollectionPageUpdateManyInlineInput>;
  configSearches?: InputMaybe<ConfigSearchUpdateManyInlineInput>;
  fullWidthTemplates?: InputMaybe<CmsPageUpdateManyInlineInput>;
  headline?: InputMaybe<Scalars['String']>;
  searchTerms?: InputMaybe<Array<Scalars['String']>>;
};

export type SectionSearchTermListUpdateManyInlineInput = {
  /** Connect multiple existing SectionSearchTermList documents */
  connect?: InputMaybe<Array<SectionSearchTermListConnectInput>>;
  /** Create and connect multiple SectionSearchTermList documents */
  create?: InputMaybe<Array<SectionSearchTermListCreateInput>>;
  /** Delete multiple SectionSearchTermList documents */
  delete?: InputMaybe<Array<SectionSearchTermListWhereUniqueInput>>;
  /** Disconnect multiple SectionSearchTermList documents */
  disconnect?: InputMaybe<Array<SectionSearchTermListWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SectionSearchTermList documents */
  set?: InputMaybe<Array<SectionSearchTermListWhereUniqueInput>>;
  /** Update multiple SectionSearchTermList documents */
  update?: InputMaybe<Array<SectionSearchTermListUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SectionSearchTermList documents */
  upsert?: InputMaybe<Array<SectionSearchTermListUpsertWithNestedWhereUniqueInput>>;
};

export type SectionSearchTermListUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  headline?: InputMaybe<Scalars['String']>;
  searchTerms?: InputMaybe<Array<Scalars['String']>>;
};

export type SectionSearchTermListUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SectionSearchTermListUpdateManyInput;
  /** Document search */
  where: SectionSearchTermListWhereInput;
};

export type SectionSearchTermListUpdateOneInlineInput = {
  /** Connect existing SectionSearchTermList document */
  connect?: InputMaybe<SectionSearchTermListWhereUniqueInput>;
  /** Create and connect one SectionSearchTermList document */
  create?: InputMaybe<SectionSearchTermListCreateInput>;
  /** Delete currently connected SectionSearchTermList document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SectionSearchTermList document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SectionSearchTermList document */
  update?: InputMaybe<SectionSearchTermListUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SectionSearchTermList document */
  upsert?: InputMaybe<SectionSearchTermListUpsertWithNestedWhereUniqueInput>;
};

export type SectionSearchTermListUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SectionSearchTermListUpdateInput;
  /** Unique document search */
  where: SectionSearchTermListWhereUniqueInput;
};

export type SectionSearchTermListUpsertInput = {
  /** Create document if it didn't exist */
  create: SectionSearchTermListCreateInput;
  /** Update document if it exists */
  update: SectionSearchTermListUpdateInput;
};

export type SectionSearchTermListUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SectionSearchTermListUpsertInput;
  /** Unique document search */
  where: SectionSearchTermListWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SectionSearchTermListWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type SectionSearchTermListWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionSearchTermListWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionSearchTermListWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionSearchTermListWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  collectionPages_every?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_none?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_some?: InputMaybe<CollectionPageWhereInput>;
  configSearches_every?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_none?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_some?: InputMaybe<ConfigSearchWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionSearchTermListWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionSearchTermListWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionSearchTermListWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  searchTerms?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains *all* items provided to the filter */
  searchTerms_contains_all?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contain any of the items provided to the filter */
  searchTerms_contains_none?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array contains at least one item provided to the filter */
  searchTerms_contains_some?: InputMaybe<Array<Scalars['String']>>;
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  searchTerms_not?: InputMaybe<Array<Scalars['String']>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SectionSearchTermListWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionSearchTermListWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionSearchTermListWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionSearchTermListWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SectionSearchTermListWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References SectionSearchTermList record uniquely */
export type SectionSearchTermListWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SectionSeoText = Node & {
  __typename?: 'SectionSeoText';
  adminTitle?: Maybe<Scalars['String']>;
  collectionPages: Array<CollectionPage>;
  content?: Maybe<RichText>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<SectionSeoText>;
  fullWidthTemplates: Array<CmsPage>;
  /** List of SectionSeoText versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  textLayout?: Maybe<TextLayout>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type SectionSeoTextCollectionPagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CollectionPageWhereInput>;
};


export type SectionSeoTextCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionSeoTextDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type SectionSeoTextFullWidthTemplatesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsPageWhereInput>;
};


export type SectionSeoTextHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type SectionSeoTextPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionSeoTextScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type SectionSeoTextUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type SectionSeoTextConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SectionSeoTextWhereUniqueInput;
};

/** A connection to a list of items. */
export type SectionSeoTextConnection = {
  __typename?: 'SectionSeoTextConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SectionSeoTextEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SectionSeoTextCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  collectionPages?: InputMaybe<CollectionPageCreateManyInlineInput>;
  content?: InputMaybe<Scalars['RichTextAST']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  fullWidthTemplates?: InputMaybe<CmsPageCreateManyInlineInput>;
  textLayout?: InputMaybe<TextLayout>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type SectionSeoTextCreateManyInlineInput = {
  /** Connect multiple existing SectionSeoText documents */
  connect?: InputMaybe<Array<SectionSeoTextWhereUniqueInput>>;
  /** Create and connect multiple existing SectionSeoText documents */
  create?: InputMaybe<Array<SectionSeoTextCreateInput>>;
};

export type SectionSeoTextCreateOneInlineInput = {
  /** Connect one existing SectionSeoText document */
  connect?: InputMaybe<SectionSeoTextWhereUniqueInput>;
  /** Create and connect one SectionSeoText document */
  create?: InputMaybe<SectionSeoTextCreateInput>;
};

/** An edge in a connection. */
export type SectionSeoTextEdge = {
  __typename?: 'SectionSeoTextEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SectionSeoText;
};

/** Identifies documents */
export type SectionSeoTextManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionSeoTextWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionSeoTextWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionSeoTextWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  collectionPages_every?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_none?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_some?: InputMaybe<CollectionPageWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionSeoTextWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionSeoTextWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionSeoTextWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  textLayout?: InputMaybe<TextLayout>;
  /** All values that are contained in given list. */
  textLayout_in?: InputMaybe<Array<InputMaybe<TextLayout>>>;
  /** Any other value that exists and is not equal to the given value. */
  textLayout_not?: InputMaybe<TextLayout>;
  /** All values that are not contained in given list. */
  textLayout_not_in?: InputMaybe<Array<InputMaybe<TextLayout>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum SectionSeoTextOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TextLayoutAsc = 'textLayout_ASC',
  TextLayoutDesc = 'textLayout_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type SectionSeoTextUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  collectionPages?: InputMaybe<CollectionPageUpdateManyInlineInput>;
  content?: InputMaybe<Scalars['RichTextAST']>;
  fullWidthTemplates?: InputMaybe<CmsPageUpdateManyInlineInput>;
  textLayout?: InputMaybe<TextLayout>;
};

export type SectionSeoTextUpdateManyInlineInput = {
  /** Connect multiple existing SectionSeoText documents */
  connect?: InputMaybe<Array<SectionSeoTextConnectInput>>;
  /** Create and connect multiple SectionSeoText documents */
  create?: InputMaybe<Array<SectionSeoTextCreateInput>>;
  /** Delete multiple SectionSeoText documents */
  delete?: InputMaybe<Array<SectionSeoTextWhereUniqueInput>>;
  /** Disconnect multiple SectionSeoText documents */
  disconnect?: InputMaybe<Array<SectionSeoTextWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SectionSeoText documents */
  set?: InputMaybe<Array<SectionSeoTextWhereUniqueInput>>;
  /** Update multiple SectionSeoText documents */
  update?: InputMaybe<Array<SectionSeoTextUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SectionSeoText documents */
  upsert?: InputMaybe<Array<SectionSeoTextUpsertWithNestedWhereUniqueInput>>;
};

export type SectionSeoTextUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  content?: InputMaybe<Scalars['RichTextAST']>;
  textLayout?: InputMaybe<TextLayout>;
};

export type SectionSeoTextUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SectionSeoTextUpdateManyInput;
  /** Document search */
  where: SectionSeoTextWhereInput;
};

export type SectionSeoTextUpdateOneInlineInput = {
  /** Connect existing SectionSeoText document */
  connect?: InputMaybe<SectionSeoTextWhereUniqueInput>;
  /** Create and connect one SectionSeoText document */
  create?: InputMaybe<SectionSeoTextCreateInput>;
  /** Delete currently connected SectionSeoText document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SectionSeoText document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SectionSeoText document */
  update?: InputMaybe<SectionSeoTextUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SectionSeoText document */
  upsert?: InputMaybe<SectionSeoTextUpsertWithNestedWhereUniqueInput>;
};

export type SectionSeoTextUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SectionSeoTextUpdateInput;
  /** Unique document search */
  where: SectionSeoTextWhereUniqueInput;
};

export type SectionSeoTextUpsertInput = {
  /** Create document if it didn't exist */
  create: SectionSeoTextCreateInput;
  /** Update document if it exists */
  update: SectionSeoTextUpdateInput;
};

export type SectionSeoTextUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SectionSeoTextUpsertInput;
  /** Unique document search */
  where: SectionSeoTextWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SectionSeoTextWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type SectionSeoTextWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionSeoTextWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionSeoTextWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionSeoTextWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  collectionPages_every?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_none?: InputMaybe<CollectionPageWhereInput>;
  collectionPages_some?: InputMaybe<CollectionPageWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionSeoTextWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionSeoTextWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionSeoTextWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  textLayout?: InputMaybe<TextLayout>;
  /** All values that are contained in given list. */
  textLayout_in?: InputMaybe<Array<InputMaybe<TextLayout>>>;
  /** Any other value that exists and is not equal to the given value. */
  textLayout_not?: InputMaybe<TextLayout>;
  /** All values that are not contained in given list. */
  textLayout_not_in?: InputMaybe<Array<InputMaybe<TextLayout>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SectionSeoTextWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionSeoTextWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionSeoTextWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionSeoTextWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SectionSeoTextWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References SectionSeoText record uniquely */
export type SectionSeoTextWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SectionSocialMediaCtaSmall = Node & {
  __typename?: 'SectionSocialMediaCtaSmall';
  adminTitle?: Maybe<Scalars['String']>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<SectionSocialMediaCtaSmall>;
  /** List of SectionSocialMediaCtaSmall versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** At least six images */
  images: Array<Asset>;
  instagramLink?: Maybe<Scalars['String']>;
  linkText?: Maybe<Scalars['String']>;
  products: Array<ProductPage>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type SectionSocialMediaCtaSmallCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionSocialMediaCtaSmallDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type SectionSocialMediaCtaSmallHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type SectionSocialMediaCtaSmallImagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetWhereInput>;
};


export type SectionSocialMediaCtaSmallProductsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProductPageWhereInput>;
};


export type SectionSocialMediaCtaSmallPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionSocialMediaCtaSmallScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type SectionSocialMediaCtaSmallUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type SectionSocialMediaCtaSmallConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SectionSocialMediaCtaSmallWhereUniqueInput;
};

/** A connection to a list of items. */
export type SectionSocialMediaCtaSmallConnection = {
  __typename?: 'SectionSocialMediaCtaSmallConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SectionSocialMediaCtaSmallEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SectionSocialMediaCtaSmallCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  images?: InputMaybe<AssetCreateManyInlineInput>;
  instagramLink?: InputMaybe<Scalars['String']>;
  linkText?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductPageCreateManyInlineInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type SectionSocialMediaCtaSmallCreateManyInlineInput = {
  /** Connect multiple existing SectionSocialMediaCtaSmall documents */
  connect?: InputMaybe<Array<SectionSocialMediaCtaSmallWhereUniqueInput>>;
  /** Create and connect multiple existing SectionSocialMediaCtaSmall documents */
  create?: InputMaybe<Array<SectionSocialMediaCtaSmallCreateInput>>;
};

export type SectionSocialMediaCtaSmallCreateOneInlineInput = {
  /** Connect one existing SectionSocialMediaCtaSmall document */
  connect?: InputMaybe<SectionSocialMediaCtaSmallWhereUniqueInput>;
  /** Create and connect one SectionSocialMediaCtaSmall document */
  create?: InputMaybe<SectionSocialMediaCtaSmallCreateInput>;
};

/** An edge in a connection. */
export type SectionSocialMediaCtaSmallEdge = {
  __typename?: 'SectionSocialMediaCtaSmallEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SectionSocialMediaCtaSmall;
};

/** Identifies documents */
export type SectionSocialMediaCtaSmallManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionSocialMediaCtaSmallWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionSocialMediaCtaSmallWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionSocialMediaCtaSmallWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionSocialMediaCtaSmallWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionSocialMediaCtaSmallWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionSocialMediaCtaSmallWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  images_every?: InputMaybe<AssetWhereInput>;
  images_none?: InputMaybe<AssetWhereInput>;
  images_some?: InputMaybe<AssetWhereInput>;
  instagramLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  instagramLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  instagramLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  instagramLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  instagramLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  instagramLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  instagramLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  instagramLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  instagramLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  instagramLink_starts_with?: InputMaybe<Scalars['String']>;
  linkText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  linkText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  linkText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  linkText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  linkText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  linkText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  linkText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  linkText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  linkText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  linkText_starts_with?: InputMaybe<Scalars['String']>;
  products_every?: InputMaybe<ProductPageWhereInput>;
  products_none?: InputMaybe<ProductPageWhereInput>;
  products_some?: InputMaybe<ProductPageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum SectionSocialMediaCtaSmallOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  InstagramLinkAsc = 'instagramLink_ASC',
  InstagramLinkDesc = 'instagramLink_DESC',
  LinkTextAsc = 'linkText_ASC',
  LinkTextDesc = 'linkText_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type SectionSocialMediaCtaSmallUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  images?: InputMaybe<AssetUpdateManyInlineInput>;
  instagramLink?: InputMaybe<Scalars['String']>;
  linkText?: InputMaybe<Scalars['String']>;
  products?: InputMaybe<ProductPageUpdateManyInlineInput>;
};

export type SectionSocialMediaCtaSmallUpdateManyInlineInput = {
  /** Connect multiple existing SectionSocialMediaCtaSmall documents */
  connect?: InputMaybe<Array<SectionSocialMediaCtaSmallConnectInput>>;
  /** Create and connect multiple SectionSocialMediaCtaSmall documents */
  create?: InputMaybe<Array<SectionSocialMediaCtaSmallCreateInput>>;
  /** Delete multiple SectionSocialMediaCtaSmall documents */
  delete?: InputMaybe<Array<SectionSocialMediaCtaSmallWhereUniqueInput>>;
  /** Disconnect multiple SectionSocialMediaCtaSmall documents */
  disconnect?: InputMaybe<Array<SectionSocialMediaCtaSmallWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SectionSocialMediaCtaSmall documents */
  set?: InputMaybe<Array<SectionSocialMediaCtaSmallWhereUniqueInput>>;
  /** Update multiple SectionSocialMediaCtaSmall documents */
  update?: InputMaybe<Array<SectionSocialMediaCtaSmallUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SectionSocialMediaCtaSmall documents */
  upsert?: InputMaybe<Array<SectionSocialMediaCtaSmallUpsertWithNestedWhereUniqueInput>>;
};

export type SectionSocialMediaCtaSmallUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  linkText?: InputMaybe<Scalars['String']>;
};

export type SectionSocialMediaCtaSmallUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SectionSocialMediaCtaSmallUpdateManyInput;
  /** Document search */
  where: SectionSocialMediaCtaSmallWhereInput;
};

export type SectionSocialMediaCtaSmallUpdateOneInlineInput = {
  /** Connect existing SectionSocialMediaCtaSmall document */
  connect?: InputMaybe<SectionSocialMediaCtaSmallWhereUniqueInput>;
  /** Create and connect one SectionSocialMediaCtaSmall document */
  create?: InputMaybe<SectionSocialMediaCtaSmallCreateInput>;
  /** Delete currently connected SectionSocialMediaCtaSmall document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SectionSocialMediaCtaSmall document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SectionSocialMediaCtaSmall document */
  update?: InputMaybe<SectionSocialMediaCtaSmallUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SectionSocialMediaCtaSmall document */
  upsert?: InputMaybe<SectionSocialMediaCtaSmallUpsertWithNestedWhereUniqueInput>;
};

export type SectionSocialMediaCtaSmallUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SectionSocialMediaCtaSmallUpdateInput;
  /** Unique document search */
  where: SectionSocialMediaCtaSmallWhereUniqueInput;
};

export type SectionSocialMediaCtaSmallUpsertInput = {
  /** Create document if it didn't exist */
  create: SectionSocialMediaCtaSmallCreateInput;
  /** Update document if it exists */
  update: SectionSocialMediaCtaSmallUpdateInput;
};

export type SectionSocialMediaCtaSmallUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SectionSocialMediaCtaSmallUpsertInput;
  /** Unique document search */
  where: SectionSocialMediaCtaSmallWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SectionSocialMediaCtaSmallWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type SectionSocialMediaCtaSmallWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionSocialMediaCtaSmallWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionSocialMediaCtaSmallWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionSocialMediaCtaSmallWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionSocialMediaCtaSmallWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionSocialMediaCtaSmallWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionSocialMediaCtaSmallWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  images_every?: InputMaybe<AssetWhereInput>;
  images_none?: InputMaybe<AssetWhereInput>;
  images_some?: InputMaybe<AssetWhereInput>;
  instagramLink?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  instagramLink_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  instagramLink_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  instagramLink_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  instagramLink_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  instagramLink_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  instagramLink_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  instagramLink_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  instagramLink_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  instagramLink_starts_with?: InputMaybe<Scalars['String']>;
  linkText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  linkText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  linkText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  linkText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  linkText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  linkText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  linkText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  linkText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  linkText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  linkText_starts_with?: InputMaybe<Scalars['String']>;
  products_every?: InputMaybe<ProductPageWhereInput>;
  products_none?: InputMaybe<ProductPageWhereInput>;
  products_some?: InputMaybe<ProductPageWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SectionSocialMediaCtaSmallWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionSocialMediaCtaSmallWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionSocialMediaCtaSmallWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionSocialMediaCtaSmallWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SectionSocialMediaCtaSmallWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References SectionSocialMediaCtaSmall record uniquely */
export type SectionSocialMediaCtaSmallWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  instagramLink?: InputMaybe<Scalars['String']>;
};

export type SectionTextBlock = Node & {
  __typename?: 'SectionTextBlock';
  adminTitle?: Maybe<Scalars['String']>;
  backgroundColour?: Maybe<BackgroundColour>;
  buttonCta?: Maybe<Cta>;
  configSearches: Array<ConfigSearch>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<SectionTextBlock>;
  fullWidthTemplates: Array<CmsPage>;
  /** List of SectionTextBlock versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  pageBlogArticles: Array<BlogArticle>;
  pageBuyingGuides: Array<PageBuyingGuide>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  textAlignment?: Maybe<TextAlignment>;
  textContent?: Maybe<RichText>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type SectionTextBlockButtonCtaArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionTextBlockConfigSearchesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigSearchWhereInput>;
};


export type SectionTextBlockCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionTextBlockDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type SectionTextBlockFullWidthTemplatesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsPageWhereInput>;
};


export type SectionTextBlockHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type SectionTextBlockPageBlogArticlesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<BlogArticleWhereInput>;
};


export type SectionTextBlockPageBuyingGuidesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PageBuyingGuideWhereInput>;
};


export type SectionTextBlockPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionTextBlockScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type SectionTextBlockUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type SectionTextBlockConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SectionTextBlockWhereUniqueInput;
};

/** A connection to a list of items. */
export type SectionTextBlockConnection = {
  __typename?: 'SectionTextBlockConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SectionTextBlockEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SectionTextBlockCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  backgroundColour?: InputMaybe<BackgroundColour>;
  buttonCta?: InputMaybe<CtaCreateOneInlineInput>;
  configSearches?: InputMaybe<ConfigSearchCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  fullWidthTemplates?: InputMaybe<CmsPageCreateManyInlineInput>;
  pageBlogArticles?: InputMaybe<BlogArticleCreateManyInlineInput>;
  pageBuyingGuides?: InputMaybe<PageBuyingGuideCreateManyInlineInput>;
  textAlignment?: InputMaybe<TextAlignment>;
  textContent?: InputMaybe<Scalars['RichTextAST']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type SectionTextBlockCreateManyInlineInput = {
  /** Connect multiple existing SectionTextBlock documents */
  connect?: InputMaybe<Array<SectionTextBlockWhereUniqueInput>>;
  /** Create and connect multiple existing SectionTextBlock documents */
  create?: InputMaybe<Array<SectionTextBlockCreateInput>>;
};

export type SectionTextBlockCreateOneInlineInput = {
  /** Connect one existing SectionTextBlock document */
  connect?: InputMaybe<SectionTextBlockWhereUniqueInput>;
  /** Create and connect one SectionTextBlock document */
  create?: InputMaybe<SectionTextBlockCreateInput>;
};

/** An edge in a connection. */
export type SectionTextBlockEdge = {
  __typename?: 'SectionTextBlockEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SectionTextBlock;
};

/** Identifies documents */
export type SectionTextBlockManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionTextBlockWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionTextBlockWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionTextBlockWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  backgroundColour?: InputMaybe<BackgroundColour>;
  /** All values that are contained in given list. */
  backgroundColour_in?: InputMaybe<Array<InputMaybe<BackgroundColour>>>;
  /** Any other value that exists and is not equal to the given value. */
  backgroundColour_not?: InputMaybe<BackgroundColour>;
  /** All values that are not contained in given list. */
  backgroundColour_not_in?: InputMaybe<Array<InputMaybe<BackgroundColour>>>;
  buttonCta?: InputMaybe<CtaWhereInput>;
  configSearches_every?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_none?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_some?: InputMaybe<ConfigSearchWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionTextBlockWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionTextBlockWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionTextBlockWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  pageBlogArticles_every?: InputMaybe<BlogArticleWhereInput>;
  pageBlogArticles_none?: InputMaybe<BlogArticleWhereInput>;
  pageBlogArticles_some?: InputMaybe<BlogArticleWhereInput>;
  pageBuyingGuides_every?: InputMaybe<PageBuyingGuideWhereInput>;
  pageBuyingGuides_none?: InputMaybe<PageBuyingGuideWhereInput>;
  pageBuyingGuides_some?: InputMaybe<PageBuyingGuideWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  textAlignment?: InputMaybe<TextAlignment>;
  /** All values that are contained in given list. */
  textAlignment_in?: InputMaybe<Array<InputMaybe<TextAlignment>>>;
  /** Any other value that exists and is not equal to the given value. */
  textAlignment_not?: InputMaybe<TextAlignment>;
  /** All values that are not contained in given list. */
  textAlignment_not_in?: InputMaybe<Array<InputMaybe<TextAlignment>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum SectionTextBlockOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  BackgroundColourAsc = 'backgroundColour_ASC',
  BackgroundColourDesc = 'backgroundColour_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  TextAlignmentAsc = 'textAlignment_ASC',
  TextAlignmentDesc = 'textAlignment_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type SectionTextBlockUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  backgroundColour?: InputMaybe<BackgroundColour>;
  buttonCta?: InputMaybe<CtaUpdateOneInlineInput>;
  configSearches?: InputMaybe<ConfigSearchUpdateManyInlineInput>;
  fullWidthTemplates?: InputMaybe<CmsPageUpdateManyInlineInput>;
  pageBlogArticles?: InputMaybe<BlogArticleUpdateManyInlineInput>;
  pageBuyingGuides?: InputMaybe<PageBuyingGuideUpdateManyInlineInput>;
  textAlignment?: InputMaybe<TextAlignment>;
  textContent?: InputMaybe<Scalars['RichTextAST']>;
};

export type SectionTextBlockUpdateManyInlineInput = {
  /** Connect multiple existing SectionTextBlock documents */
  connect?: InputMaybe<Array<SectionTextBlockConnectInput>>;
  /** Create and connect multiple SectionTextBlock documents */
  create?: InputMaybe<Array<SectionTextBlockCreateInput>>;
  /** Delete multiple SectionTextBlock documents */
  delete?: InputMaybe<Array<SectionTextBlockWhereUniqueInput>>;
  /** Disconnect multiple SectionTextBlock documents */
  disconnect?: InputMaybe<Array<SectionTextBlockWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SectionTextBlock documents */
  set?: InputMaybe<Array<SectionTextBlockWhereUniqueInput>>;
  /** Update multiple SectionTextBlock documents */
  update?: InputMaybe<Array<SectionTextBlockUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SectionTextBlock documents */
  upsert?: InputMaybe<Array<SectionTextBlockUpsertWithNestedWhereUniqueInput>>;
};

export type SectionTextBlockUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  backgroundColour?: InputMaybe<BackgroundColour>;
  textAlignment?: InputMaybe<TextAlignment>;
  textContent?: InputMaybe<Scalars['RichTextAST']>;
};

export type SectionTextBlockUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SectionTextBlockUpdateManyInput;
  /** Document search */
  where: SectionTextBlockWhereInput;
};

export type SectionTextBlockUpdateOneInlineInput = {
  /** Connect existing SectionTextBlock document */
  connect?: InputMaybe<SectionTextBlockWhereUniqueInput>;
  /** Create and connect one SectionTextBlock document */
  create?: InputMaybe<SectionTextBlockCreateInput>;
  /** Delete currently connected SectionTextBlock document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SectionTextBlock document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SectionTextBlock document */
  update?: InputMaybe<SectionTextBlockUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SectionTextBlock document */
  upsert?: InputMaybe<SectionTextBlockUpsertWithNestedWhereUniqueInput>;
};

export type SectionTextBlockUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SectionTextBlockUpdateInput;
  /** Unique document search */
  where: SectionTextBlockWhereUniqueInput;
};

export type SectionTextBlockUpsertInput = {
  /** Create document if it didn't exist */
  create: SectionTextBlockCreateInput;
  /** Update document if it exists */
  update: SectionTextBlockUpdateInput;
};

export type SectionTextBlockUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SectionTextBlockUpsertInput;
  /** Unique document search */
  where: SectionTextBlockWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SectionTextBlockWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type SectionTextBlockWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionTextBlockWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionTextBlockWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionTextBlockWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  backgroundColour?: InputMaybe<BackgroundColour>;
  /** All values that are contained in given list. */
  backgroundColour_in?: InputMaybe<Array<InputMaybe<BackgroundColour>>>;
  /** Any other value that exists and is not equal to the given value. */
  backgroundColour_not?: InputMaybe<BackgroundColour>;
  /** All values that are not contained in given list. */
  backgroundColour_not_in?: InputMaybe<Array<InputMaybe<BackgroundColour>>>;
  buttonCta?: InputMaybe<CtaWhereInput>;
  configSearches_every?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_none?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_some?: InputMaybe<ConfigSearchWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionTextBlockWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionTextBlockWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionTextBlockWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  pageBlogArticles_every?: InputMaybe<BlogArticleWhereInput>;
  pageBlogArticles_none?: InputMaybe<BlogArticleWhereInput>;
  pageBlogArticles_some?: InputMaybe<BlogArticleWhereInput>;
  pageBuyingGuides_every?: InputMaybe<PageBuyingGuideWhereInput>;
  pageBuyingGuides_none?: InputMaybe<PageBuyingGuideWhereInput>;
  pageBuyingGuides_some?: InputMaybe<PageBuyingGuideWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  textAlignment?: InputMaybe<TextAlignment>;
  /** All values that are contained in given list. */
  textAlignment_in?: InputMaybe<Array<InputMaybe<TextAlignment>>>;
  /** Any other value that exists and is not equal to the given value. */
  textAlignment_not?: InputMaybe<TextAlignment>;
  /** All values that are not contained in given list. */
  textAlignment_not_in?: InputMaybe<Array<InputMaybe<TextAlignment>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SectionTextBlockWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionTextBlockWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionTextBlockWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionTextBlockWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SectionTextBlockWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References SectionTextBlock record uniquely */
export type SectionTextBlockWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SectionVideoCarousel = Node & {
  __typename?: 'SectionVideoCarousel';
  adminTitle?: Maybe<Scalars['String']>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<SectionVideoCarousel>;
  headline?: Maybe<Scalars['String']>;
  /** List of SectionVideoCarousel versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  videos: Array<Asset>;
};


export type SectionVideoCarouselCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionVideoCarouselDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type SectionVideoCarouselHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type SectionVideoCarouselPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionVideoCarouselScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type SectionVideoCarouselUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionVideoCarouselVideosArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetWhereInput>;
};

export type SectionVideoCarouselConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SectionVideoCarouselWhereUniqueInput;
};

/** A connection to a list of items. */
export type SectionVideoCarouselConnection = {
  __typename?: 'SectionVideoCarouselConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SectionVideoCarouselEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SectionVideoCarouselCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  headline?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  videos?: InputMaybe<AssetCreateManyInlineInput>;
};

export type SectionVideoCarouselCreateManyInlineInput = {
  /** Connect multiple existing SectionVideoCarousel documents */
  connect?: InputMaybe<Array<SectionVideoCarouselWhereUniqueInput>>;
  /** Create and connect multiple existing SectionVideoCarousel documents */
  create?: InputMaybe<Array<SectionVideoCarouselCreateInput>>;
};

export type SectionVideoCarouselCreateOneInlineInput = {
  /** Connect one existing SectionVideoCarousel document */
  connect?: InputMaybe<SectionVideoCarouselWhereUniqueInput>;
  /** Create and connect one SectionVideoCarousel document */
  create?: InputMaybe<SectionVideoCarouselCreateInput>;
};

/** An edge in a connection. */
export type SectionVideoCarouselEdge = {
  __typename?: 'SectionVideoCarouselEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SectionVideoCarousel;
};

/** Identifies documents */
export type SectionVideoCarouselManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionVideoCarouselWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionVideoCarouselWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionVideoCarouselWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionVideoCarouselWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionVideoCarouselWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionVideoCarouselWhereStageInput>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  videos_every?: InputMaybe<AssetWhereInput>;
  videos_none?: InputMaybe<AssetWhereInput>;
  videos_some?: InputMaybe<AssetWhereInput>;
};

export enum SectionVideoCarouselOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  HeadlineAsc = 'headline_ASC',
  HeadlineDesc = 'headline_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type SectionVideoCarouselUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  headline?: InputMaybe<Scalars['String']>;
  videos?: InputMaybe<AssetUpdateManyInlineInput>;
};

export type SectionVideoCarouselUpdateManyInlineInput = {
  /** Connect multiple existing SectionVideoCarousel documents */
  connect?: InputMaybe<Array<SectionVideoCarouselConnectInput>>;
  /** Create and connect multiple SectionVideoCarousel documents */
  create?: InputMaybe<Array<SectionVideoCarouselCreateInput>>;
  /** Delete multiple SectionVideoCarousel documents */
  delete?: InputMaybe<Array<SectionVideoCarouselWhereUniqueInput>>;
  /** Disconnect multiple SectionVideoCarousel documents */
  disconnect?: InputMaybe<Array<SectionVideoCarouselWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SectionVideoCarousel documents */
  set?: InputMaybe<Array<SectionVideoCarouselWhereUniqueInput>>;
  /** Update multiple SectionVideoCarousel documents */
  update?: InputMaybe<Array<SectionVideoCarouselUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SectionVideoCarousel documents */
  upsert?: InputMaybe<Array<SectionVideoCarouselUpsertWithNestedWhereUniqueInput>>;
};

export type SectionVideoCarouselUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  headline?: InputMaybe<Scalars['String']>;
};

export type SectionVideoCarouselUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SectionVideoCarouselUpdateManyInput;
  /** Document search */
  where: SectionVideoCarouselWhereInput;
};

export type SectionVideoCarouselUpdateOneInlineInput = {
  /** Connect existing SectionVideoCarousel document */
  connect?: InputMaybe<SectionVideoCarouselWhereUniqueInput>;
  /** Create and connect one SectionVideoCarousel document */
  create?: InputMaybe<SectionVideoCarouselCreateInput>;
  /** Delete currently connected SectionVideoCarousel document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SectionVideoCarousel document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SectionVideoCarousel document */
  update?: InputMaybe<SectionVideoCarouselUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SectionVideoCarousel document */
  upsert?: InputMaybe<SectionVideoCarouselUpsertWithNestedWhereUniqueInput>;
};

export type SectionVideoCarouselUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SectionVideoCarouselUpdateInput;
  /** Unique document search */
  where: SectionVideoCarouselWhereUniqueInput;
};

export type SectionVideoCarouselUpsertInput = {
  /** Create document if it didn't exist */
  create: SectionVideoCarouselCreateInput;
  /** Update document if it exists */
  update: SectionVideoCarouselUpdateInput;
};

export type SectionVideoCarouselUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SectionVideoCarouselUpsertInput;
  /** Unique document search */
  where: SectionVideoCarouselWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SectionVideoCarouselWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type SectionVideoCarouselWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionVideoCarouselWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionVideoCarouselWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionVideoCarouselWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionVideoCarouselWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionVideoCarouselWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionVideoCarouselWhereStageInput>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  videos_every?: InputMaybe<AssetWhereInput>;
  videos_none?: InputMaybe<AssetWhereInput>;
  videos_some?: InputMaybe<AssetWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SectionVideoCarouselWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionVideoCarouselWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionVideoCarouselWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionVideoCarouselWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SectionVideoCarouselWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References SectionVideoCarousel record uniquely */
export type SectionVideoCarouselWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SectionsAccordion = Node & {
  __typename?: 'SectionsAccordion';
  accordionSections: Array<AccordionContent>;
  configSearches: Array<ConfigSearch>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<SectionsAccordion>;
  fullWidthTemplates: Array<CmsPage>;
  headline?: Maybe<Scalars['String']>;
  /** List of SectionsAccordion versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type SectionsAccordionAccordionSectionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<AccordionContentOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AccordionContentWhereInput>;
};


export type SectionsAccordionConfigSearchesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ConfigSearchWhereInput>;
};


export type SectionsAccordionCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionsAccordionDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type SectionsAccordionFullWidthTemplatesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsPageWhereInput>;
};


export type SectionsAccordionHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type SectionsAccordionPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SectionsAccordionScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type SectionsAccordionUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type SectionsAccordionConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SectionsAccordionWhereUniqueInput;
};

/** A connection to a list of items. */
export type SectionsAccordionConnection = {
  __typename?: 'SectionsAccordionConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SectionsAccordionEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SectionsAccordionCreateInput = {
  accordionSections?: InputMaybe<AccordionContentCreateManyInlineInput>;
  configSearches?: InputMaybe<ConfigSearchCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  fullWidthTemplates?: InputMaybe<CmsPageCreateManyInlineInput>;
  headline?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type SectionsAccordionCreateManyInlineInput = {
  /** Connect multiple existing SectionsAccordion documents */
  connect?: InputMaybe<Array<SectionsAccordionWhereUniqueInput>>;
  /** Create and connect multiple existing SectionsAccordion documents */
  create?: InputMaybe<Array<SectionsAccordionCreateInput>>;
};

export type SectionsAccordionCreateOneInlineInput = {
  /** Connect one existing SectionsAccordion document */
  connect?: InputMaybe<SectionsAccordionWhereUniqueInput>;
  /** Create and connect one SectionsAccordion document */
  create?: InputMaybe<SectionsAccordionCreateInput>;
};

/** An edge in a connection. */
export type SectionsAccordionEdge = {
  __typename?: 'SectionsAccordionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SectionsAccordion;
};

/** Identifies documents */
export type SectionsAccordionManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionsAccordionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionsAccordionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionsAccordionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  accordionSections_every?: InputMaybe<AccordionContentWhereInput>;
  accordionSections_none?: InputMaybe<AccordionContentWhereInput>;
  accordionSections_some?: InputMaybe<AccordionContentWhereInput>;
  configSearches_every?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_none?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_some?: InputMaybe<ConfigSearchWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionsAccordionWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionsAccordionWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionsAccordionWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum SectionsAccordionOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  HeadlineAsc = 'headline_ASC',
  HeadlineDesc = 'headline_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type SectionsAccordionUpdateInput = {
  accordionSections?: InputMaybe<AccordionContentUpdateManyInlineInput>;
  configSearches?: InputMaybe<ConfigSearchUpdateManyInlineInput>;
  fullWidthTemplates?: InputMaybe<CmsPageUpdateManyInlineInput>;
  headline?: InputMaybe<Scalars['String']>;
};

export type SectionsAccordionUpdateManyInlineInput = {
  /** Connect multiple existing SectionsAccordion documents */
  connect?: InputMaybe<Array<SectionsAccordionConnectInput>>;
  /** Create and connect multiple SectionsAccordion documents */
  create?: InputMaybe<Array<SectionsAccordionCreateInput>>;
  /** Delete multiple SectionsAccordion documents */
  delete?: InputMaybe<Array<SectionsAccordionWhereUniqueInput>>;
  /** Disconnect multiple SectionsAccordion documents */
  disconnect?: InputMaybe<Array<SectionsAccordionWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SectionsAccordion documents */
  set?: InputMaybe<Array<SectionsAccordionWhereUniqueInput>>;
  /** Update multiple SectionsAccordion documents */
  update?: InputMaybe<Array<SectionsAccordionUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SectionsAccordion documents */
  upsert?: InputMaybe<Array<SectionsAccordionUpsertWithNestedWhereUniqueInput>>;
};

export type SectionsAccordionUpdateManyInput = {
  headline?: InputMaybe<Scalars['String']>;
};

export type SectionsAccordionUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SectionsAccordionUpdateManyInput;
  /** Document search */
  where: SectionsAccordionWhereInput;
};

export type SectionsAccordionUpdateOneInlineInput = {
  /** Connect existing SectionsAccordion document */
  connect?: InputMaybe<SectionsAccordionWhereUniqueInput>;
  /** Create and connect one SectionsAccordion document */
  create?: InputMaybe<SectionsAccordionCreateInput>;
  /** Delete currently connected SectionsAccordion document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SectionsAccordion document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SectionsAccordion document */
  update?: InputMaybe<SectionsAccordionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SectionsAccordion document */
  upsert?: InputMaybe<SectionsAccordionUpsertWithNestedWhereUniqueInput>;
};

export type SectionsAccordionUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SectionsAccordionUpdateInput;
  /** Unique document search */
  where: SectionsAccordionWhereUniqueInput;
};

export type SectionsAccordionUpsertInput = {
  /** Create document if it didn't exist */
  create: SectionsAccordionCreateInput;
  /** Update document if it exists */
  update: SectionsAccordionUpdateInput;
};

export type SectionsAccordionUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SectionsAccordionUpsertInput;
  /** Unique document search */
  where: SectionsAccordionWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SectionsAccordionWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type SectionsAccordionWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionsAccordionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionsAccordionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionsAccordionWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  accordionSections_every?: InputMaybe<AccordionContentWhereInput>;
  accordionSections_none?: InputMaybe<AccordionContentWhereInput>;
  accordionSections_some?: InputMaybe<AccordionContentWhereInput>;
  configSearches_every?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_none?: InputMaybe<ConfigSearchWhereInput>;
  configSearches_some?: InputMaybe<ConfigSearchWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<SectionsAccordionWhereStageInput>;
  documentInStages_none?: InputMaybe<SectionsAccordionWhereStageInput>;
  documentInStages_some?: InputMaybe<SectionsAccordionWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  headline?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  headline_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  headline_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  headline_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  headline_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  headline_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  headline_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  headline_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  headline_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  headline_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SectionsAccordionWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SectionsAccordionWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SectionsAccordionWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SectionsAccordionWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SectionsAccordionWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References SectionsAccordion record uniquely */
export type SectionsAccordionWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Details about the gift card used on the checkout. */
export type ShopifyStorefront_AppliedGiftCard = ShopifyStorefront_Node & {
  __typename?: 'ShopifyStorefront_AppliedGiftCard';
  /** The amount that was taken from the gift card by applying it. */
  amountUsed: ShopifyStorefront_MoneyV2;
  /**
   * The amount that was taken from the gift card by applying it.
   * @deprecated Use `amountUsed` instead.
   */
  amountUsedV2: ShopifyStorefront_MoneyV2;
  /** The amount left on the gift card. */
  balance: ShopifyStorefront_MoneyV2;
  /**
   * The amount left on the gift card.
   * @deprecated Use `balance` instead.
   */
  balanceV2: ShopifyStorefront_MoneyV2;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The last characters of the gift card. */
  lastCharacters: Scalars['String'];
  /** The amount that was applied to the checkout in its currency. */
  presentmentAmountUsed: ShopifyStorefront_MoneyV2;
};

/** An article in an online store blog. */
export type ShopifyStorefront_Article = ShopifyStorefront_HasMetafields & ShopifyStorefront_Node & ShopifyStorefront_OnlineStorePublishable & {
  __typename?: 'ShopifyStorefront_Article';
  /**
   * The article's author.
   * @deprecated Use `authorV2` instead.
   */
  author: ShopifyStorefront_ArticleAuthor;
  /** The article's author. */
  authorV2?: Maybe<ShopifyStorefront_ArticleAuthor>;
  /** The blog that the article belongs to. */
  blog: ShopifyStorefront_Blog;
  /** List of comments posted on the article. */
  comments: ShopifyStorefront_CommentConnection;
  /** Stripped content of the article, single line with HTML tags removed. */
  content: Scalars['String'];
  /** The content of the article, complete with HTML formatting. */
  contentHtml: Scalars['ShopifyStorefront_HTML'];
  /** Stripped excerpt of the article, single line with HTML tags removed. */
  excerpt?: Maybe<Scalars['String']>;
  /** The excerpt of the article, complete with HTML formatting. */
  excerptHtml?: Maybe<Scalars['ShopifyStorefront_HTML']>;
  /** A human-friendly unique string for the Article automatically generated from its title. */
  handle: Scalars['String'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The image associated with the article. */
  image?: Maybe<ShopifyStorefront_Image>;
  /** Returns a metafield found by namespace and key. */
  metafield?: Maybe<ShopifyStorefront_Metafield>;
  /** The metafields associated with the resource matching the supplied list of namespaces and keys. */
  metafields: Array<Maybe<ShopifyStorefront_Metafield>>;
  /** The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel. */
  onlineStoreUrl?: Maybe<Scalars['ShopifyStorefront_URL']>;
  /** The date and time when the article was published. */
  publishedAt: Scalars['DateTime'];
  /** The article’s SEO information. */
  seo?: Maybe<ShopifyStorefront_Seo>;
  /** A categorization that a article can be tagged with. */
  tags: Array<Scalars['String']>;
  /** The article’s name. */
  title: Scalars['String'];
};


/** An article in an online store blog. */
export type ShopifyStorefront_ArticleCommentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** An article in an online store blog. */
export type ShopifyStorefront_ArticleContentArgs = {
  truncateAt?: InputMaybe<Scalars['Int']>;
};


/** An article in an online store blog. */
export type ShopifyStorefront_ArticleExcerptArgs = {
  truncateAt?: InputMaybe<Scalars['Int']>;
};


/** An article in an online store blog. */
export type ShopifyStorefront_ArticleMetafieldArgs = {
  key: Scalars['String'];
  namespace: Scalars['String'];
};


/** An article in an online store blog. */
export type ShopifyStorefront_ArticleMetafieldsArgs = {
  identifiers: Array<ShopifyStorefront_HasMetafieldsIdentifier>;
};

/** The author of an article. */
export type ShopifyStorefront_ArticleAuthor = {
  __typename?: 'ShopifyStorefront_ArticleAuthor';
  /** The author's bio. */
  bio?: Maybe<Scalars['String']>;
  /** The author’s email. */
  email: Scalars['String'];
  /** The author's first name. */
  firstName: Scalars['String'];
  /** The author's last name. */
  lastName: Scalars['String'];
  /** The author's full name. */
  name: Scalars['String'];
};

/** An auto-generated type for paginating through multiple Articles. */
export type ShopifyStorefront_ArticleConnection = {
  __typename?: 'ShopifyStorefront_ArticleConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_ArticleEdge>;
  /** A list of the nodes contained in ArticleEdge. */
  nodes: Array<ShopifyStorefront_Article>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one Article and a cursor during pagination. */
export type ShopifyStorefront_ArticleEdge = {
  __typename?: 'ShopifyStorefront_ArticleEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of ArticleEdge. */
  node: ShopifyStorefront_Article;
};

/** The set of valid sort keys for the Article query. */
export enum ShopifyStorefront_ArticleSortKeys {
  /** Sort by the `author` value. */
  Author = 'AUTHOR',
  /** Sort by the `blog_title` value. */
  BlogTitle = 'BLOG_TITLE',
  /** Sort by the `id` value. */
  Id = 'ID',
  /** Sort by the `published_at` value. */
  PublishedAt = 'PUBLISHED_AT',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE',
  /** Sort by the `title` value. */
  Title = 'TITLE',
  /** Sort by the `updated_at` value. */
  UpdatedAt = 'UPDATED_AT'
}

/** Represents a generic custom attribute. */
export type ShopifyStorefront_Attribute = {
  __typename?: 'ShopifyStorefront_Attribute';
  /** Key or name of the attribute. */
  key: Scalars['String'];
  /** Value of the attribute. */
  value?: Maybe<Scalars['String']>;
};

/** Automatic discount applications capture the intentions of a discount that was automatically applied. */
export type ShopifyStorefront_AutomaticDiscountApplication = ShopifyStorefront_DiscountApplication & {
  __typename?: 'ShopifyStorefront_AutomaticDiscountApplication';
  /** The method by which the discount's value is allocated to its entitled items. */
  allocationMethod: ShopifyStorefront_DiscountApplicationAllocationMethod;
  /** Which lines of targetType that the discount is allocated over. */
  targetSelection: ShopifyStorefront_DiscountApplicationTargetSelection;
  /** The type of line that the discount is applicable towards. */
  targetType: ShopifyStorefront_DiscountApplicationTargetType;
  /** The title of the application. */
  title: Scalars['String'];
  /** The value of the discount application. */
  value: ShopifyStorefront_PricingValue;
};

/** A collection of available shipping rates for a checkout. */
export type ShopifyStorefront_AvailableShippingRates = {
  __typename?: 'ShopifyStorefront_AvailableShippingRates';
  /**
   * Whether or not the shipping rates are ready.
   * The `shippingRates` field is `null` when this value is `false`.
   * This field should be polled until its value becomes `true`.
   */
  ready: Scalars['Boolean'];
  /** The fetched shipping rates. `null` until the `ready` field is `true`. */
  shippingRates?: Maybe<Array<ShopifyStorefront_ShippingRate>>;
};

/** An online store blog. */
export type ShopifyStorefront_Blog = ShopifyStorefront_HasMetafields & ShopifyStorefront_Node & ShopifyStorefront_OnlineStorePublishable & {
  __typename?: 'ShopifyStorefront_Blog';
  /** Find an article by its handle. */
  articleByHandle?: Maybe<ShopifyStorefront_Article>;
  /** List of the blog's articles. */
  articles: ShopifyStorefront_ArticleConnection;
  /** The authors who have contributed to the blog. */
  authors: Array<ShopifyStorefront_ArticleAuthor>;
  /** A human-friendly unique string for the Blog automatically generated from its title. */
  handle: Scalars['String'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** Returns a metafield found by namespace and key. */
  metafield?: Maybe<ShopifyStorefront_Metafield>;
  /** The metafields associated with the resource matching the supplied list of namespaces and keys. */
  metafields: Array<Maybe<ShopifyStorefront_Metafield>>;
  /** The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel. */
  onlineStoreUrl?: Maybe<Scalars['ShopifyStorefront_URL']>;
  /** The blog's SEO information. */
  seo?: Maybe<ShopifyStorefront_Seo>;
  /** The blogs’s title. */
  title: Scalars['String'];
};


/** An online store blog. */
export type ShopifyStorefront_BlogArticleByHandleArgs = {
  handle: Scalars['String'];
};


/** An online store blog. */
export type ShopifyStorefront_BlogArticlesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  query?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<ShopifyStorefront_ArticleSortKeys>;
};


/** An online store blog. */
export type ShopifyStorefront_BlogMetafieldArgs = {
  key: Scalars['String'];
  namespace: Scalars['String'];
};


/** An online store blog. */
export type ShopifyStorefront_BlogMetafieldsArgs = {
  identifiers: Array<ShopifyStorefront_HasMetafieldsIdentifier>;
};

/** The store's branding configuration. */
export type ShopifyStorefront_Brand = {
  __typename?: 'ShopifyStorefront_Brand';
  /** The colors of the store's brand. */
  colors: ShopifyStorefront_BrandColors;
  /** The store's cover image. */
  coverImage?: Maybe<ShopifyStorefront_MediaImage>;
  /** The store's default logo. */
  logo?: Maybe<ShopifyStorefront_MediaImage>;
  /** The store's short description. */
  shortDescription?: Maybe<Scalars['String']>;
  /** The store's slogan. */
  slogan?: Maybe<Scalars['String']>;
  /** The store's preferred logo for square UI elements. */
  squareLogo?: Maybe<ShopifyStorefront_MediaImage>;
};

/** A group of related colors for the shop's brand. */
export type ShopifyStorefront_BrandColorGroup = {
  __typename?: 'ShopifyStorefront_BrandColorGroup';
  /** The background color. */
  background?: Maybe<Scalars['ShopifyStorefront_Color']>;
  /** The foreground color. */
  foreground?: Maybe<Scalars['ShopifyStorefront_Color']>;
};

/** The colors of the shop's brand. */
export type ShopifyStorefront_BrandColors = {
  __typename?: 'ShopifyStorefront_BrandColors';
  /** The shop's primary brand colors. */
  primary: Array<ShopifyStorefront_BrandColorGroup>;
  /** The shop's secondary brand colors. */
  secondary: Array<ShopifyStorefront_BrandColorGroup>;
};

/** Card brand, such as Visa or Mastercard, which can be used for payments. */
export enum ShopifyStorefront_CardBrand {
  /** American Express. */
  AmericanExpress = 'AMERICAN_EXPRESS',
  /** Diners Club. */
  DinersClub = 'DINERS_CLUB',
  /** Discover. */
  Discover = 'DISCOVER',
  /** JCB. */
  Jcb = 'JCB',
  /** Mastercard. */
  Mastercard = 'MASTERCARD',
  /** Visa. */
  Visa = 'VISA'
}

/**
 * A cart represents the merchandise that a buyer intends to purchase,
 * and the estimated cost associated with the cart. Learn how to
 * [interact with a cart](https://shopify.dev/custom-storefronts/internationalization/international-pricing)
 * during a customer's session.
 */
export type ShopifyStorefront_Cart = ShopifyStorefront_Node & {
  __typename?: 'ShopifyStorefront_Cart';
  /** An attribute associated with the cart. */
  attribute?: Maybe<ShopifyStorefront_Attribute>;
  /** The attributes associated with the cart. Attributes are represented as key-value pairs. */
  attributes: Array<ShopifyStorefront_Attribute>;
  /** Information about the buyer that is interacting with the cart. */
  buyerIdentity: ShopifyStorefront_CartBuyerIdentity;
  /** The URL of the checkout for the cart. */
  checkoutUrl: Scalars['ShopifyStorefront_URL'];
  /** The estimated costs that the buyer will pay at checkout. The costs are subject to change and changes will be reflected at checkout. The `cost` field uses the `buyerIdentity` field to determine [international pricing](https://shopify.dev/custom-storefronts/internationalization/international-pricing). */
  cost: ShopifyStorefront_CartCost;
  /** The date and time when the cart was created. */
  createdAt: Scalars['DateTime'];
  /**
   * The delivery groups available for the cart, based on the buyer identity default
   * delivery address preference or the default address of the logged-in customer.
   */
  deliveryGroups: ShopifyStorefront_CartDeliveryGroupConnection;
  /** The discounts that have been applied to the entire cart. */
  discountAllocations: Array<ShopifyStorefront_CartDiscountAllocation>;
  /** The case-insensitive discount codes that the customer added at checkout. */
  discountCodes: Array<ShopifyStorefront_CartDiscountCode>;
  /**
   * The estimated costs that the buyer will pay at checkout.
   * The estimated costs are subject to change and changes will be reflected at checkout.
   * The `estimatedCost` field uses the `buyerIdentity` field to determine
   * [international pricing](https://shopify.dev/custom-storefronts/internationalization/international-pricing).
   * @deprecated Use `cost` instead.
   */
  estimatedCost: ShopifyStorefront_CartEstimatedCost;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** A list of lines containing information about the items the customer intends to purchase. */
  lines: ShopifyStorefront_CartLineConnection;
  /** A note that is associated with the cart. For example, the note can be a personalized message to the buyer. */
  note?: Maybe<Scalars['String']>;
  /** The total number of items in the cart. */
  totalQuantity: Scalars['Int'];
  /** The date and time when the cart was updated. */
  updatedAt: Scalars['DateTime'];
};


/**
 * A cart represents the merchandise that a buyer intends to purchase,
 * and the estimated cost associated with the cart. Learn how to
 * [interact with a cart](https://shopify.dev/custom-storefronts/internationalization/international-pricing)
 * during a customer's session.
 */
export type ShopifyStorefront_CartAttributeArgs = {
  key: Scalars['String'];
};


/**
 * A cart represents the merchandise that a buyer intends to purchase,
 * and the estimated cost associated with the cart. Learn how to
 * [interact with a cart](https://shopify.dev/custom-storefronts/internationalization/international-pricing)
 * during a customer's session.
 */
export type ShopifyStorefront_CartDeliveryGroupsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/**
 * A cart represents the merchandise that a buyer intends to purchase,
 * and the estimated cost associated with the cart. Learn how to
 * [interact with a cart](https://shopify.dev/custom-storefronts/internationalization/international-pricing)
 * during a customer's session.
 */
export type ShopifyStorefront_CartLinesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};

/** The discounts automatically applied to the cart line based on prerequisites that have been met. */
export type ShopifyStorefront_CartAutomaticDiscountAllocation = ShopifyStorefront_CartDiscountAllocation & {
  __typename?: 'ShopifyStorefront_CartAutomaticDiscountAllocation';
  /** The discounted amount that has been applied to the cart line. */
  discountedAmount: ShopifyStorefront_MoneyV2;
  /** The title of the allocated discount. */
  title: Scalars['String'];
};

/** Represents information about the buyer that is interacting with the cart. */
export type ShopifyStorefront_CartBuyerIdentity = {
  __typename?: 'ShopifyStorefront_CartBuyerIdentity';
  /** The country where the buyer is located. */
  countryCode?: Maybe<ShopifyStorefront_CountryCode>;
  /** The customer account associated with the cart. */
  customer?: Maybe<ShopifyStorefront_Customer>;
  /**
   * An ordered set of delivery addresses tied to the buyer that is interacting with the cart.
   * The rank of the preferences is determined by the order of the addresses in the array. Preferences
   * can be used to populate relevant fields in the checkout flow.
   */
  deliveryAddressPreferences: Array<ShopifyStorefront_DeliveryAddress>;
  /** The email address of the buyer that is interacting with the cart. */
  email?: Maybe<Scalars['String']>;
  /** The phone number of the buyer that is interacting with the cart. */
  phone?: Maybe<Scalars['String']>;
};

/** The discount that has been applied to the cart line using a discount code. */
export type ShopifyStorefront_CartCodeDiscountAllocation = ShopifyStorefront_CartDiscountAllocation & {
  __typename?: 'ShopifyStorefront_CartCodeDiscountAllocation';
  /** The code used to apply the discount. */
  code: Scalars['String'];
  /** The discounted amount that has been applied to the cart line. */
  discountedAmount: ShopifyStorefront_MoneyV2;
};

/**
 * The costs that the buyer will pay at checkout.
 * The cart cost uses [`CartBuyerIdentity`](https://shopify.dev/api/storefront/reference/cart/cartbuyeridentity) to determine
 * [international pricing](https://shopify.dev/custom-storefronts/internationalization/international-pricing).
 */
export type ShopifyStorefront_CartCost = {
  __typename?: 'ShopifyStorefront_CartCost';
  /** The estimated amount, before taxes and discounts, for the customer to pay at checkout. The checkout charge amount doesn't include any deferred payments that'll be paid at a later date. If the cart has no deferred payments, then the checkout charge amount is equivalent to `subtotalAmount`. */
  checkoutChargeAmount: ShopifyStorefront_MoneyV2;
  /** The amount, before taxes and cart-level discounts, for the customer to pay. */
  subtotalAmount: ShopifyStorefront_MoneyV2;
  /** Whether the subtotal amount is estimated. */
  subtotalAmountEstimated: Scalars['Boolean'];
  /** The total amount for the customer to pay. */
  totalAmount: ShopifyStorefront_MoneyV2;
  /** Whether the total amount is estimated. */
  totalAmountEstimated: Scalars['Boolean'];
  /** The duty amount for the customer to pay at checkout. */
  totalDutyAmount?: Maybe<ShopifyStorefront_MoneyV2>;
  /** Whether the total duty amount is estimated. */
  totalDutyAmountEstimated: Scalars['Boolean'];
  /** The tax amount for the customer to pay at checkout. */
  totalTaxAmount?: Maybe<ShopifyStorefront_MoneyV2>;
  /** Whether the total tax amount is estimated. */
  totalTaxAmountEstimated: Scalars['Boolean'];
};

/** The discounts automatically applied to the cart line based on prerequisites that have been met. */
export type ShopifyStorefront_CartCustomDiscountAllocation = ShopifyStorefront_CartDiscountAllocation & {
  __typename?: 'ShopifyStorefront_CartCustomDiscountAllocation';
  /** The discounted amount that has been applied to the cart line. */
  discountedAmount: ShopifyStorefront_MoneyV2;
  /** The title of the allocated discount. */
  title: Scalars['String'];
};

/** Information about the options available for one or more line items to be delivered to a specific address. */
export type ShopifyStorefront_CartDeliveryGroup = {
  __typename?: 'ShopifyStorefront_CartDeliveryGroup';
  /** A list of cart lines for the delivery group. */
  cartLines: ShopifyStorefront_CartLineConnection;
  /** The destination address for the delivery group. */
  deliveryAddress: ShopifyStorefront_MailingAddress;
  /** The delivery options available for the delivery group. */
  deliveryOptions: Array<ShopifyStorefront_CartDeliveryOption>;
  /** The ID for the delivery group. */
  id: Scalars['ID'];
  /** The selected delivery option for the delivery group. */
  selectedDeliveryOption?: Maybe<ShopifyStorefront_CartDeliveryOption>;
};


/** Information about the options available for one or more line items to be delivered to a specific address. */
export type ShopifyStorefront_CartDeliveryGroupCartLinesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};

/** An auto-generated type for paginating through multiple CartDeliveryGroups. */
export type ShopifyStorefront_CartDeliveryGroupConnection = {
  __typename?: 'ShopifyStorefront_CartDeliveryGroupConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_CartDeliveryGroupEdge>;
  /** A list of the nodes contained in CartDeliveryGroupEdge. */
  nodes: Array<ShopifyStorefront_CartDeliveryGroup>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one CartDeliveryGroup and a cursor during pagination. */
export type ShopifyStorefront_CartDeliveryGroupEdge = {
  __typename?: 'ShopifyStorefront_CartDeliveryGroupEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of CartDeliveryGroupEdge. */
  node: ShopifyStorefront_CartDeliveryGroup;
};

/** Information about a delivery option. */
export type ShopifyStorefront_CartDeliveryOption = {
  __typename?: 'ShopifyStorefront_CartDeliveryOption';
  /** The code of the delivery option. */
  code?: Maybe<Scalars['String']>;
  /** The method for the delivery option. */
  deliveryMethodType: ShopifyStorefront_DeliveryMethodType;
  /** The description of the delivery option. */
  description?: Maybe<Scalars['String']>;
  /** The estimated cost for the delivery option. */
  estimatedCost: ShopifyStorefront_MoneyV2;
  /** The unique identifier of the delivery option. */
  handle: Scalars['String'];
  /** The title of the delivery option. */
  title?: Maybe<Scalars['String']>;
};

/** The discounts that have been applied to the cart line. */
export type ShopifyStorefront_CartDiscountAllocation = {
  /** The discounted amount that has been applied to the cart line. */
  discountedAmount: ShopifyStorefront_MoneyV2;
};

/** The discount codes applied to the cart. */
export type ShopifyStorefront_CartDiscountCode = {
  __typename?: 'ShopifyStorefront_CartDiscountCode';
  /** Whether the discount code is applicable to the cart's current contents. */
  applicable: Scalars['Boolean'];
  /** The code for the discount. */
  code: Scalars['String'];
};

/**
 * The estimated costs that the buyer will pay at checkout.
 * The estimated cost uses
 * [`CartBuyerIdentity`](https://shopify.dev/api/storefront/reference/cart/cartbuyeridentity)
 * to determine
 * [international pricing](https://shopify.dev/custom-storefronts/internationalization/international-pricing).
 */
export type ShopifyStorefront_CartEstimatedCost = {
  __typename?: 'ShopifyStorefront_CartEstimatedCost';
  /** The estimated amount, before taxes and discounts, for the customer to pay at checkout. The checkout charge amount doesn't include any deferred payments that'll be paid at a later date. If the cart has no deferred payments, then the checkout charge amount is equivalent to`subtotal_amount`. */
  checkoutChargeAmount: ShopifyStorefront_MoneyV2;
  /** The estimated amount, before taxes and discounts, for the customer to pay. */
  subtotalAmount: ShopifyStorefront_MoneyV2;
  /** The estimated total amount for the customer to pay. */
  totalAmount: ShopifyStorefront_MoneyV2;
  /** The estimated duty amount for the customer to pay at checkout. */
  totalDutyAmount?: Maybe<ShopifyStorefront_MoneyV2>;
  /** The estimated tax amount for the customer to pay at checkout. */
  totalTaxAmount?: Maybe<ShopifyStorefront_MoneyV2>;
};

/** Represents information about the merchandise in the cart. */
export type ShopifyStorefront_CartLine = ShopifyStorefront_Node & {
  __typename?: 'ShopifyStorefront_CartLine';
  /** An attribute associated with the cart line. */
  attribute?: Maybe<ShopifyStorefront_Attribute>;
  /** The attributes associated with the cart line. Attributes are represented as key-value pairs. */
  attributes: Array<ShopifyStorefront_Attribute>;
  /** The cost of the merchandise that the buyer will pay for at checkout. The costs are subject to change and changes will be reflected at checkout. */
  cost: ShopifyStorefront_CartLineCost;
  /** The discounts that have been applied to the cart line. */
  discountAllocations: Array<ShopifyStorefront_CartDiscountAllocation>;
  /**
   * The estimated cost of the merchandise that the buyer will pay for at checkout. The estimated costs are subject to change and changes will be reflected at checkout.
   * @deprecated Use `cost` instead.
   */
  estimatedCost: ShopifyStorefront_CartLineEstimatedCost;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The merchandise that the buyer intends to purchase. */
  merchandise: ShopifyStorefront_Merchandise;
  /** The quantity of the merchandise that the customer intends to purchase. */
  quantity: Scalars['Int'];
  /** The selling plan associated with the cart line and the effect that each selling plan has on variants when they're purchased. */
  sellingPlanAllocation?: Maybe<ShopifyStorefront_SellingPlanAllocation>;
};


/** Represents information about the merchandise in the cart. */
export type ShopifyStorefront_CartLineAttributeArgs = {
  key: Scalars['String'];
};

/** An auto-generated type for paginating through multiple CartLines. */
export type ShopifyStorefront_CartLineConnection = {
  __typename?: 'ShopifyStorefront_CartLineConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_CartLineEdge>;
  /** A list of the nodes contained in CartLineEdge. */
  nodes: Array<ShopifyStorefront_CartLine>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** The cost of the merchandise line that the buyer will pay at checkout. */
export type ShopifyStorefront_CartLineCost = {
  __typename?: 'ShopifyStorefront_CartLineCost';
  /** The amount of the merchandise line. */
  amountPerQuantity: ShopifyStorefront_MoneyV2;
  /** The compare at amount of the merchandise line. */
  compareAtAmountPerQuantity?: Maybe<ShopifyStorefront_MoneyV2>;
  /** The cost of the merchandise line before line-level discounts. */
  subtotalAmount: ShopifyStorefront_MoneyV2;
  /** The total cost of the merchandise line. */
  totalAmount: ShopifyStorefront_MoneyV2;
};

/** An auto-generated type which holds one CartLine and a cursor during pagination. */
export type ShopifyStorefront_CartLineEdge = {
  __typename?: 'ShopifyStorefront_CartLineEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of CartLineEdge. */
  node: ShopifyStorefront_CartLine;
};

/** The estimated cost of the merchandise line that the buyer will pay at checkout. */
export type ShopifyStorefront_CartLineEstimatedCost = {
  __typename?: 'ShopifyStorefront_CartLineEstimatedCost';
  /** The amount of the merchandise line. */
  amount: ShopifyStorefront_MoneyV2;
  /** The compare at amount of the merchandise line. */
  compareAtAmount?: Maybe<ShopifyStorefront_MoneyV2>;
  /** The estimated cost of the merchandise line before discounts. */
  subtotalAmount: ShopifyStorefront_MoneyV2;
  /** The estimated total cost of the merchandise line. */
  totalAmount: ShopifyStorefront_MoneyV2;
};

/** A container for all the information required to checkout items and pay. */
export type ShopifyStorefront_Checkout = ShopifyStorefront_Node & {
  __typename?: 'ShopifyStorefront_Checkout';
  /** The gift cards used on the checkout. */
  appliedGiftCards: Array<ShopifyStorefront_AppliedGiftCard>;
  /**
   * The available shipping rates for this Checkout.
   * Should only be used when checkout `requiresShipping` is `true` and
   * the shipping address is valid.
   */
  availableShippingRates?: Maybe<ShopifyStorefront_AvailableShippingRates>;
  /** The identity of the customer associated with the checkout. */
  buyerIdentity: ShopifyStorefront_CheckoutBuyerIdentity;
  /** The date and time when the checkout was completed. */
  completedAt?: Maybe<Scalars['DateTime']>;
  /** The date and time when the checkout was created. */
  createdAt: Scalars['DateTime'];
  /** The currency code for the checkout. */
  currencyCode: ShopifyStorefront_CurrencyCode;
  /** A list of extra information that is added to the checkout. */
  customAttributes: Array<ShopifyStorefront_Attribute>;
  /** Discounts that have been applied on the checkout. */
  discountApplications: ShopifyStorefront_DiscountApplicationConnection;
  /** The email attached to this checkout. */
  email?: Maybe<Scalars['String']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** A list of line item objects, each one containing information about an item in the checkout. */
  lineItems: ShopifyStorefront_CheckoutLineItemConnection;
  /** The sum of all the prices of all the items in the checkout. Duties, taxes, shipping and discounts excluded. */
  lineItemsSubtotalPrice: ShopifyStorefront_MoneyV2;
  /** The note associated with the checkout. */
  note?: Maybe<Scalars['String']>;
  /** The resulting order from a paid checkout. */
  order?: Maybe<ShopifyStorefront_Order>;
  /** The Order Status Page for this Checkout, null when checkout is not completed. */
  orderStatusUrl?: Maybe<Scalars['ShopifyStorefront_URL']>;
  /** The amount left to be paid. This is equal to the cost of the line items, taxes, and shipping, minus discounts and gift cards. */
  paymentDue: ShopifyStorefront_MoneyV2;
  /**
   * The amount left to be paid. This is equal to the cost of the line items, duties, taxes, and shipping, minus discounts and gift cards.
   * @deprecated Use `paymentDue` instead.
   */
  paymentDueV2: ShopifyStorefront_MoneyV2;
  /**
   * Whether or not the Checkout is ready and can be completed. Checkouts may
   * have asynchronous operations that can take time to finish. If you want
   * to complete a checkout or ensure all the fields are populated and up to
   * date, polling is required until the value is true.
   */
  ready: Scalars['Boolean'];
  /** States whether or not the fulfillment requires shipping. */
  requiresShipping: Scalars['Boolean'];
  /** The shipping address to where the line items will be shipped. */
  shippingAddress?: Maybe<ShopifyStorefront_MailingAddress>;
  /** The discounts that have been allocated onto the shipping line by discount applications. */
  shippingDiscountAllocations: Array<ShopifyStorefront_DiscountAllocation>;
  /** Once a shipping rate is selected by the customer it is transitioned to a `shipping_line` object. */
  shippingLine?: Maybe<ShopifyStorefront_ShippingRate>;
  /** The price at checkout before shipping and taxes. */
  subtotalPrice: ShopifyStorefront_MoneyV2;
  /**
   * The price at checkout before duties, shipping, and taxes.
   * @deprecated Use `subtotalPrice` instead.
   */
  subtotalPriceV2: ShopifyStorefront_MoneyV2;
  /** Whether the checkout is tax exempt. */
  taxExempt: Scalars['Boolean'];
  /** Whether taxes are included in the line item and shipping line prices. */
  taxesIncluded: Scalars['Boolean'];
  /** The sum of all the duties applied to the line items in the checkout. */
  totalDuties?: Maybe<ShopifyStorefront_MoneyV2>;
  /** The sum of all the prices of all the items in the checkout, including taxes and duties. */
  totalPrice: ShopifyStorefront_MoneyV2;
  /**
   * The sum of all the prices of all the items in the checkout, including taxes and duties.
   * @deprecated Use `totalPrice` instead.
   */
  totalPriceV2: ShopifyStorefront_MoneyV2;
  /** The sum of all the taxes applied to the line items and shipping lines in the checkout. */
  totalTax: ShopifyStorefront_MoneyV2;
  /**
   * The sum of all the taxes applied to the line items and shipping lines in the checkout.
   * @deprecated Use `totalTax` instead.
   */
  totalTaxV2: ShopifyStorefront_MoneyV2;
  /** The date and time when the checkout was last updated. */
  updatedAt: Scalars['DateTime'];
  /** The url pointing to the checkout accessible from the web. */
  webUrl: Scalars['ShopifyStorefront_URL'];
};


/** A container for all the information required to checkout items and pay. */
export type ShopifyStorefront_CheckoutDiscountApplicationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** A container for all the information required to checkout items and pay. */
export type ShopifyStorefront_CheckoutLineItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};

/** The identity of the customer associated with the checkout. */
export type ShopifyStorefront_CheckoutBuyerIdentity = {
  __typename?: 'ShopifyStorefront_CheckoutBuyerIdentity';
  /** The country code for the checkout. For example, `CA`. */
  countryCode?: Maybe<ShopifyStorefront_CountryCode>;
};

/** A single line item in the checkout, grouped by variant and attributes. */
export type ShopifyStorefront_CheckoutLineItem = ShopifyStorefront_Node & {
  __typename?: 'ShopifyStorefront_CheckoutLineItem';
  /** Extra information in the form of an array of Key-Value pairs about the line item. */
  customAttributes: Array<ShopifyStorefront_Attribute>;
  /** The discounts that have been allocated onto the checkout line item by discount applications. */
  discountAllocations: Array<ShopifyStorefront_DiscountAllocation>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The quantity of the line item. */
  quantity: Scalars['Int'];
  /** Title of the line item. Defaults to the product's title. */
  title: Scalars['String'];
  /** Unit price of the line item. */
  unitPrice?: Maybe<ShopifyStorefront_MoneyV2>;
  /** Product variant of the line item. */
  variant?: Maybe<ShopifyStorefront_ProductVariant>;
};

/** An auto-generated type for paginating through multiple CheckoutLineItems. */
export type ShopifyStorefront_CheckoutLineItemConnection = {
  __typename?: 'ShopifyStorefront_CheckoutLineItemConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_CheckoutLineItemEdge>;
  /** A list of the nodes contained in CheckoutLineItemEdge. */
  nodes: Array<ShopifyStorefront_CheckoutLineItem>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one CheckoutLineItem and a cursor during pagination. */
export type ShopifyStorefront_CheckoutLineItemEdge = {
  __typename?: 'ShopifyStorefront_CheckoutLineItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of CheckoutLineItemEdge. */
  node: ShopifyStorefront_CheckoutLineItem;
};

/** A collection represents a grouping of products that a shop owner can create to organize them or make their shops easier to browse. */
export type ShopifyStorefront_Collection = ShopifyStorefront_HasMetafields & ShopifyStorefront_Node & ShopifyStorefront_OnlineStorePublishable & {
  __typename?: 'ShopifyStorefront_Collection';
  /** Stripped description of the collection, single line with HTML tags removed. */
  description: Scalars['String'];
  /** The description of the collection, complete with HTML formatting. */
  descriptionHtml: Scalars['ShopifyStorefront_HTML'];
  /**
   * A human-friendly unique string for the collection automatically generated from its title.
   * Limit of 255 characters.
   */
  handle: Scalars['String'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** Image associated with the collection. */
  image?: Maybe<ShopifyStorefront_Image>;
  /** Returns a metafield found by namespace and key. */
  metafield?: Maybe<ShopifyStorefront_Metafield>;
  /** The metafields associated with the resource matching the supplied list of namespaces and keys. */
  metafields: Array<Maybe<ShopifyStorefront_Metafield>>;
  /** The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel. */
  onlineStoreUrl?: Maybe<Scalars['ShopifyStorefront_URL']>;
  /** List of products in the collection. */
  products: ShopifyStorefront_ProductConnection;
  /** The collection's SEO information. */
  seo: ShopifyStorefront_Seo;
  /** The collection’s name. Limit of 255 characters. */
  title: Scalars['String'];
  /** The date and time when the collection was last modified. */
  updatedAt: Scalars['DateTime'];
};


/** A collection represents a grouping of products that a shop owner can create to organize them or make their shops easier to browse. */
export type ShopifyStorefront_CollectionDescriptionArgs = {
  truncateAt?: InputMaybe<Scalars['Int']>;
};


/** A collection represents a grouping of products that a shop owner can create to organize them or make their shops easier to browse. */
export type ShopifyStorefront_CollectionMetafieldArgs = {
  key: Scalars['String'];
  namespace: Scalars['String'];
};


/** A collection represents a grouping of products that a shop owner can create to organize them or make their shops easier to browse. */
export type ShopifyStorefront_CollectionMetafieldsArgs = {
  identifiers: Array<ShopifyStorefront_HasMetafieldsIdentifier>;
};


/** A collection represents a grouping of products that a shop owner can create to organize them or make their shops easier to browse. */
export type ShopifyStorefront_CollectionProductsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  filters?: InputMaybe<Array<ShopifyStorefront_ProductFilter>>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<ShopifyStorefront_ProductCollectionSortKeys>;
};

/** An auto-generated type for paginating through multiple Collections. */
export type ShopifyStorefront_CollectionConnection = {
  __typename?: 'ShopifyStorefront_CollectionConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_CollectionEdge>;
  /** A list of the nodes contained in CollectionEdge. */
  nodes: Array<ShopifyStorefront_Collection>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one Collection and a cursor during pagination. */
export type ShopifyStorefront_CollectionEdge = {
  __typename?: 'ShopifyStorefront_CollectionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of CollectionEdge. */
  node: ShopifyStorefront_Collection;
};

/** A comment on an article. */
export type ShopifyStorefront_Comment = ShopifyStorefront_Node & {
  __typename?: 'ShopifyStorefront_Comment';
  /** The comment’s author. */
  author: ShopifyStorefront_CommentAuthor;
  /** Stripped content of the comment, single line with HTML tags removed. */
  content: Scalars['String'];
  /** The content of the comment, complete with HTML formatting. */
  contentHtml: Scalars['ShopifyStorefront_HTML'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
};


/** A comment on an article. */
export type ShopifyStorefront_CommentContentArgs = {
  truncateAt?: InputMaybe<Scalars['Int']>;
};

/** The author of a comment. */
export type ShopifyStorefront_CommentAuthor = {
  __typename?: 'ShopifyStorefront_CommentAuthor';
  /** The author's email. */
  email: Scalars['String'];
  /** The author’s name. */
  name: Scalars['String'];
};

/** An auto-generated type for paginating through multiple Comments. */
export type ShopifyStorefront_CommentConnection = {
  __typename?: 'ShopifyStorefront_CommentConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_CommentEdge>;
  /** A list of the nodes contained in CommentEdge. */
  nodes: Array<ShopifyStorefront_Comment>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one Comment and a cursor during pagination. */
export type ShopifyStorefront_CommentEdge = {
  __typename?: 'ShopifyStorefront_CommentEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of CommentEdge. */
  node: ShopifyStorefront_Comment;
};

/**
 * The code designating a country/region, which generally follows ISO 3166-1 alpha-2 guidelines.
 * If a territory doesn't have a country code value in the `CountryCode` enum, then it might be considered a subdivision
 * of another country. For example, the territories associated with Spain are represented by the country code `ES`,
 * and the territories associated with the United States of America are represented by the country code `US`.
 */
export enum ShopifyStorefront_CountryCode {
  /** Ascension Island. */
  Ac = 'AC',
  /** Andorra. */
  Ad = 'AD',
  /** United Arab Emirates. */
  Ae = 'AE',
  /** Afghanistan. */
  Af = 'AF',
  /** Antigua & Barbuda. */
  Ag = 'AG',
  /** Anguilla. */
  Ai = 'AI',
  /** Albania. */
  Al = 'AL',
  /** Armenia. */
  Am = 'AM',
  /** Netherlands Antilles. */
  An = 'AN',
  /** Angola. */
  Ao = 'AO',
  /** Argentina. */
  Ar = 'AR',
  /** Austria. */
  At = 'AT',
  /** Australia. */
  Au = 'AU',
  /** Aruba. */
  Aw = 'AW',
  /** Åland Islands. */
  Ax = 'AX',
  /** Azerbaijan. */
  Az = 'AZ',
  /** Bosnia & Herzegovina. */
  Ba = 'BA',
  /** Barbados. */
  Bb = 'BB',
  /** Bangladesh. */
  Bd = 'BD',
  /** Belgium. */
  Be = 'BE',
  /** Burkina Faso. */
  Bf = 'BF',
  /** Bulgaria. */
  Bg = 'BG',
  /** Bahrain. */
  Bh = 'BH',
  /** Burundi. */
  Bi = 'BI',
  /** Benin. */
  Bj = 'BJ',
  /** St. Barthélemy. */
  Bl = 'BL',
  /** Bermuda. */
  Bm = 'BM',
  /** Brunei. */
  Bn = 'BN',
  /** Bolivia. */
  Bo = 'BO',
  /** Caribbean Netherlands. */
  Bq = 'BQ',
  /** Brazil. */
  Br = 'BR',
  /** Bahamas. */
  Bs = 'BS',
  /** Bhutan. */
  Bt = 'BT',
  /** Bouvet Island. */
  Bv = 'BV',
  /** Botswana. */
  Bw = 'BW',
  /** Belarus. */
  By = 'BY',
  /** Belize. */
  Bz = 'BZ',
  /** Canada. */
  Ca = 'CA',
  /** Cocos (Keeling) Islands. */
  Cc = 'CC',
  /** Congo - Kinshasa. */
  Cd = 'CD',
  /** Central African Republic. */
  Cf = 'CF',
  /** Congo - Brazzaville. */
  Cg = 'CG',
  /** Switzerland. */
  Ch = 'CH',
  /** Côte d’Ivoire. */
  Ci = 'CI',
  /** Cook Islands. */
  Ck = 'CK',
  /** Chile. */
  Cl = 'CL',
  /** Cameroon. */
  Cm = 'CM',
  /** China. */
  Cn = 'CN',
  /** Colombia. */
  Co = 'CO',
  /** Costa Rica. */
  Cr = 'CR',
  /** Cuba. */
  Cu = 'CU',
  /** Cape Verde. */
  Cv = 'CV',
  /** Curaçao. */
  Cw = 'CW',
  /** Christmas Island. */
  Cx = 'CX',
  /** Cyprus. */
  Cy = 'CY',
  /** Czechia. */
  Cz = 'CZ',
  /** Germany. */
  De = 'DE',
  /** Djibouti. */
  Dj = 'DJ',
  /** Denmark. */
  Dk = 'DK',
  /** Dominica. */
  Dm = 'DM',
  /** Dominican Republic. */
  Do = 'DO',
  /** Algeria. */
  Dz = 'DZ',
  /** Ecuador. */
  Ec = 'EC',
  /** Estonia. */
  Ee = 'EE',
  /** Egypt. */
  Eg = 'EG',
  /** Western Sahara. */
  Eh = 'EH',
  /** Eritrea. */
  Er = 'ER',
  /** Spain. */
  Es = 'ES',
  /** Ethiopia. */
  Et = 'ET',
  /** Finland. */
  Fi = 'FI',
  /** Fiji. */
  Fj = 'FJ',
  /** Falkland Islands. */
  Fk = 'FK',
  /** Faroe Islands. */
  Fo = 'FO',
  /** France. */
  Fr = 'FR',
  /** Gabon. */
  Ga = 'GA',
  /** United Kingdom. */
  Gb = 'GB',
  /** Grenada. */
  Gd = 'GD',
  /** Georgia. */
  Ge = 'GE',
  /** French Guiana. */
  Gf = 'GF',
  /** Guernsey. */
  Gg = 'GG',
  /** Ghana. */
  Gh = 'GH',
  /** Gibraltar. */
  Gi = 'GI',
  /** Greenland. */
  Gl = 'GL',
  /** Gambia. */
  Gm = 'GM',
  /** Guinea. */
  Gn = 'GN',
  /** Guadeloupe. */
  Gp = 'GP',
  /** Equatorial Guinea. */
  Gq = 'GQ',
  /** Greece. */
  Gr = 'GR',
  /** South Georgia & South Sandwich Islands. */
  Gs = 'GS',
  /** Guatemala. */
  Gt = 'GT',
  /** Guinea-Bissau. */
  Gw = 'GW',
  /** Guyana. */
  Gy = 'GY',
  /** Hong Kong SAR. */
  Hk = 'HK',
  /** Heard & McDonald Islands. */
  Hm = 'HM',
  /** Honduras. */
  Hn = 'HN',
  /** Croatia. */
  Hr = 'HR',
  /** Haiti. */
  Ht = 'HT',
  /** Hungary. */
  Hu = 'HU',
  /** Indonesia. */
  Id = 'ID',
  /** Ireland. */
  Ie = 'IE',
  /** Israel. */
  Il = 'IL',
  /** Isle of Man. */
  Im = 'IM',
  /** India. */
  In = 'IN',
  /** British Indian Ocean Territory. */
  Io = 'IO',
  /** Iraq. */
  Iq = 'IQ',
  /** Iran. */
  Ir = 'IR',
  /** Iceland. */
  Is = 'IS',
  /** Italy. */
  It = 'IT',
  /** Jersey. */
  Je = 'JE',
  /** Jamaica. */
  Jm = 'JM',
  /** Jordan. */
  Jo = 'JO',
  /** Japan. */
  Jp = 'JP',
  /** Kenya. */
  Ke = 'KE',
  /** Kyrgyzstan. */
  Kg = 'KG',
  /** Cambodia. */
  Kh = 'KH',
  /** Kiribati. */
  Ki = 'KI',
  /** Comoros. */
  Km = 'KM',
  /** St. Kitts & Nevis. */
  Kn = 'KN',
  /** North Korea. */
  Kp = 'KP',
  /** South Korea. */
  Kr = 'KR',
  /** Kuwait. */
  Kw = 'KW',
  /** Cayman Islands. */
  Ky = 'KY',
  /** Kazakhstan. */
  Kz = 'KZ',
  /** Laos. */
  La = 'LA',
  /** Lebanon. */
  Lb = 'LB',
  /** St. Lucia. */
  Lc = 'LC',
  /** Liechtenstein. */
  Li = 'LI',
  /** Sri Lanka. */
  Lk = 'LK',
  /** Liberia. */
  Lr = 'LR',
  /** Lesotho. */
  Ls = 'LS',
  /** Lithuania. */
  Lt = 'LT',
  /** Luxembourg. */
  Lu = 'LU',
  /** Latvia. */
  Lv = 'LV',
  /** Libya. */
  Ly = 'LY',
  /** Morocco. */
  Ma = 'MA',
  /** Monaco. */
  Mc = 'MC',
  /** Moldova. */
  Md = 'MD',
  /** Montenegro. */
  Me = 'ME',
  /** St. Martin. */
  Mf = 'MF',
  /** Madagascar. */
  Mg = 'MG',
  /** North Macedonia. */
  Mk = 'MK',
  /** Mali. */
  Ml = 'ML',
  /** Myanmar (Burma). */
  Mm = 'MM',
  /** Mongolia. */
  Mn = 'MN',
  /** Macao SAR. */
  Mo = 'MO',
  /** Martinique. */
  Mq = 'MQ',
  /** Mauritania. */
  Mr = 'MR',
  /** Montserrat. */
  Ms = 'MS',
  /** Malta. */
  Mt = 'MT',
  /** Mauritius. */
  Mu = 'MU',
  /** Maldives. */
  Mv = 'MV',
  /** Malawi. */
  Mw = 'MW',
  /** Mexico. */
  Mx = 'MX',
  /** Malaysia. */
  My = 'MY',
  /** Mozambique. */
  Mz = 'MZ',
  /** Namibia. */
  Na = 'NA',
  /** New Caledonia. */
  Nc = 'NC',
  /** Niger. */
  Ne = 'NE',
  /** Norfolk Island. */
  Nf = 'NF',
  /** Nigeria. */
  Ng = 'NG',
  /** Nicaragua. */
  Ni = 'NI',
  /** Netherlands. */
  Nl = 'NL',
  /** Norway. */
  No = 'NO',
  /** Nepal. */
  Np = 'NP',
  /** Nauru. */
  Nr = 'NR',
  /** Niue. */
  Nu = 'NU',
  /** New Zealand. */
  Nz = 'NZ',
  /** Oman. */
  Om = 'OM',
  /** Panama. */
  Pa = 'PA',
  /** Peru. */
  Pe = 'PE',
  /** French Polynesia. */
  Pf = 'PF',
  /** Papua New Guinea. */
  Pg = 'PG',
  /** Philippines. */
  Ph = 'PH',
  /** Pakistan. */
  Pk = 'PK',
  /** Poland. */
  Pl = 'PL',
  /** St. Pierre & Miquelon. */
  Pm = 'PM',
  /** Pitcairn Islands. */
  Pn = 'PN',
  /** Palestinian Territories. */
  Ps = 'PS',
  /** Portugal. */
  Pt = 'PT',
  /** Paraguay. */
  Py = 'PY',
  /** Qatar. */
  Qa = 'QA',
  /** Réunion. */
  Re = 'RE',
  /** Romania. */
  Ro = 'RO',
  /** Serbia. */
  Rs = 'RS',
  /** Russia. */
  Ru = 'RU',
  /** Rwanda. */
  Rw = 'RW',
  /** Saudi Arabia. */
  Sa = 'SA',
  /** Solomon Islands. */
  Sb = 'SB',
  /** Seychelles. */
  Sc = 'SC',
  /** Sudan. */
  Sd = 'SD',
  /** Sweden. */
  Se = 'SE',
  /** Singapore. */
  Sg = 'SG',
  /** St. Helena. */
  Sh = 'SH',
  /** Slovenia. */
  Si = 'SI',
  /** Svalbard & Jan Mayen. */
  Sj = 'SJ',
  /** Slovakia. */
  Sk = 'SK',
  /** Sierra Leone. */
  Sl = 'SL',
  /** San Marino. */
  Sm = 'SM',
  /** Senegal. */
  Sn = 'SN',
  /** Somalia. */
  So = 'SO',
  /** Suriname. */
  Sr = 'SR',
  /** South Sudan. */
  Ss = 'SS',
  /** São Tomé & Príncipe. */
  St = 'ST',
  /** El Salvador. */
  Sv = 'SV',
  /** Sint Maarten. */
  Sx = 'SX',
  /** Syria. */
  Sy = 'SY',
  /** Eswatini. */
  Sz = 'SZ',
  /** Tristan da Cunha. */
  Ta = 'TA',
  /** Turks & Caicos Islands. */
  Tc = 'TC',
  /** Chad. */
  Td = 'TD',
  /** French Southern Territories. */
  Tf = 'TF',
  /** Togo. */
  Tg = 'TG',
  /** Thailand. */
  Th = 'TH',
  /** Tajikistan. */
  Tj = 'TJ',
  /** Tokelau. */
  Tk = 'TK',
  /** Timor-Leste. */
  Tl = 'TL',
  /** Turkmenistan. */
  Tm = 'TM',
  /** Tunisia. */
  Tn = 'TN',
  /** Tonga. */
  To = 'TO',
  /** Turkey. */
  Tr = 'TR',
  /** Trinidad & Tobago. */
  Tt = 'TT',
  /** Tuvalu. */
  Tv = 'TV',
  /** Taiwan. */
  Tw = 'TW',
  /** Tanzania. */
  Tz = 'TZ',
  /** Ukraine. */
  Ua = 'UA',
  /** Uganda. */
  Ug = 'UG',
  /** U.S. Outlying Islands. */
  Um = 'UM',
  /** United States. */
  Us = 'US',
  /** Uruguay. */
  Uy = 'UY',
  /** Uzbekistan. */
  Uz = 'UZ',
  /** Vatican City. */
  Va = 'VA',
  /** St. Vincent & Grenadines. */
  Vc = 'VC',
  /** Venezuela. */
  Ve = 'VE',
  /** British Virgin Islands. */
  Vg = 'VG',
  /** Vietnam. */
  Vn = 'VN',
  /** Vanuatu. */
  Vu = 'VU',
  /** Wallis & Futuna. */
  Wf = 'WF',
  /** Samoa. */
  Ws = 'WS',
  /** Kosovo. */
  Xk = 'XK',
  /** Yemen. */
  Ye = 'YE',
  /** Mayotte. */
  Yt = 'YT',
  /** South Africa. */
  Za = 'ZA',
  /** Zambia. */
  Zm = 'ZM',
  /** Zimbabwe. */
  Zw = 'ZW',
  /** Unknown Region. */
  Zz = 'ZZ'
}

/** Credit card information used for a payment. */
export type ShopifyStorefront_CreditCard = {
  __typename?: 'ShopifyStorefront_CreditCard';
  /** The brand of the credit card. */
  brand?: Maybe<Scalars['String']>;
  /** The expiry month of the credit card. */
  expiryMonth?: Maybe<Scalars['Int']>;
  /** The expiry year of the credit card. */
  expiryYear?: Maybe<Scalars['Int']>;
  /** The credit card's BIN number. */
  firstDigits?: Maybe<Scalars['String']>;
  /** The first name of the card holder. */
  firstName?: Maybe<Scalars['String']>;
  /** The last 4 digits of the credit card. */
  lastDigits?: Maybe<Scalars['String']>;
  /** The last name of the card holder. */
  lastName?: Maybe<Scalars['String']>;
  /** The masked credit card number with only the last 4 digits displayed. */
  maskedNumber?: Maybe<Scalars['String']>;
};

/** The part of the image that should remain after cropping. */
export enum ShopifyStorefront_CropRegion {
  /** Keep the bottom of the image. */
  Bottom = 'BOTTOM',
  /** Keep the center of the image. */
  Center = 'CENTER',
  /** Keep the left of the image. */
  Left = 'LEFT',
  /** Keep the right of the image. */
  Right = 'RIGHT',
  /** Keep the top of the image. */
  Top = 'TOP'
}

/**
 * The three-letter currency codes that represent the world currencies used in stores. These include standard ISO 4217 codes, legacy codes,
 * and non-standard codes.
 */
export enum ShopifyStorefront_CurrencyCode {
  /** United Arab Emirates Dirham (AED). */
  Aed = 'AED',
  /** Afghan Afghani (AFN). */
  Afn = 'AFN',
  /** Albanian Lek (ALL). */
  All = 'ALL',
  /** Armenian Dram (AMD). */
  Amd = 'AMD',
  /** Netherlands Antillean Guilder. */
  Ang = 'ANG',
  /** Angolan Kwanza (AOA). */
  Aoa = 'AOA',
  /** Argentine Pesos (ARS). */
  Ars = 'ARS',
  /** Australian Dollars (AUD). */
  Aud = 'AUD',
  /** Aruban Florin (AWG). */
  Awg = 'AWG',
  /** Azerbaijani Manat (AZN). */
  Azn = 'AZN',
  /** Bosnia and Herzegovina Convertible Mark (BAM). */
  Bam = 'BAM',
  /** Barbadian Dollar (BBD). */
  Bbd = 'BBD',
  /** Bangladesh Taka (BDT). */
  Bdt = 'BDT',
  /** Bulgarian Lev (BGN). */
  Bgn = 'BGN',
  /** Bahraini Dinar (BHD). */
  Bhd = 'BHD',
  /** Burundian Franc (BIF). */
  Bif = 'BIF',
  /** Bermudian Dollar (BMD). */
  Bmd = 'BMD',
  /** Brunei Dollar (BND). */
  Bnd = 'BND',
  /** Bolivian Boliviano (BOB). */
  Bob = 'BOB',
  /** Brazilian Real (BRL). */
  Brl = 'BRL',
  /** Bahamian Dollar (BSD). */
  Bsd = 'BSD',
  /** Bhutanese Ngultrum (BTN). */
  Btn = 'BTN',
  /** Botswana Pula (BWP). */
  Bwp = 'BWP',
  /** Belarusian Ruble (BYN). */
  Byn = 'BYN',
  /**
   * Belarusian Ruble (BYR).
   * @deprecated `BYR` is deprecated. Use `BYN` available from version `2021-01` onwards instead.
   */
  Byr = 'BYR',
  /** Belize Dollar (BZD). */
  Bzd = 'BZD',
  /** Canadian Dollars (CAD). */
  Cad = 'CAD',
  /** Congolese franc (CDF). */
  Cdf = 'CDF',
  /** Swiss Francs (CHF). */
  Chf = 'CHF',
  /** Chilean Peso (CLP). */
  Clp = 'CLP',
  /** Chinese Yuan Renminbi (CNY). */
  Cny = 'CNY',
  /** Colombian Peso (COP). */
  Cop = 'COP',
  /** Costa Rican Colones (CRC). */
  Crc = 'CRC',
  /** Cape Verdean escudo (CVE). */
  Cve = 'CVE',
  /** Czech Koruny (CZK). */
  Czk = 'CZK',
  /** Djiboutian Franc (DJF). */
  Djf = 'DJF',
  /** Danish Kroner (DKK). */
  Dkk = 'DKK',
  /** Dominican Peso (DOP). */
  Dop = 'DOP',
  /** Algerian Dinar (DZD). */
  Dzd = 'DZD',
  /** Egyptian Pound (EGP). */
  Egp = 'EGP',
  /** Eritrean Nakfa (ERN). */
  Ern = 'ERN',
  /** Ethiopian Birr (ETB). */
  Etb = 'ETB',
  /** Euro (EUR). */
  Eur = 'EUR',
  /** Fijian Dollars (FJD). */
  Fjd = 'FJD',
  /** Falkland Islands Pounds (FKP). */
  Fkp = 'FKP',
  /** United Kingdom Pounds (GBP). */
  Gbp = 'GBP',
  /** Georgian Lari (GEL). */
  Gel = 'GEL',
  /** Ghanaian Cedi (GHS). */
  Ghs = 'GHS',
  /** Gibraltar Pounds (GIP). */
  Gip = 'GIP',
  /** Gambian Dalasi (GMD). */
  Gmd = 'GMD',
  /** Guinean Franc (GNF). */
  Gnf = 'GNF',
  /** Guatemalan Quetzal (GTQ). */
  Gtq = 'GTQ',
  /** Guyanese Dollar (GYD). */
  Gyd = 'GYD',
  /** Hong Kong Dollars (HKD). */
  Hkd = 'HKD',
  /** Honduran Lempira (HNL). */
  Hnl = 'HNL',
  /** Croatian Kuna (HRK). */
  Hrk = 'HRK',
  /** Haitian Gourde (HTG). */
  Htg = 'HTG',
  /** Hungarian Forint (HUF). */
  Huf = 'HUF',
  /** Indonesian Rupiah (IDR). */
  Idr = 'IDR',
  /** Israeli New Shekel (NIS). */
  Ils = 'ILS',
  /** Indian Rupees (INR). */
  Inr = 'INR',
  /** Iraqi Dinar (IQD). */
  Iqd = 'IQD',
  /** Iranian Rial (IRR). */
  Irr = 'IRR',
  /** Icelandic Kronur (ISK). */
  Isk = 'ISK',
  /** Jersey Pound. */
  Jep = 'JEP',
  /** Jamaican Dollars (JMD). */
  Jmd = 'JMD',
  /** Jordanian Dinar (JOD). */
  Jod = 'JOD',
  /** Japanese Yen (JPY). */
  Jpy = 'JPY',
  /** Kenyan Shilling (KES). */
  Kes = 'KES',
  /** Kyrgyzstani Som (KGS). */
  Kgs = 'KGS',
  /** Cambodian Riel. */
  Khr = 'KHR',
  /** Kiribati Dollar (KID). */
  Kid = 'KID',
  /** Comorian Franc (KMF). */
  Kmf = 'KMF',
  /** South Korean Won (KRW). */
  Krw = 'KRW',
  /** Kuwaiti Dinar (KWD). */
  Kwd = 'KWD',
  /** Cayman Dollars (KYD). */
  Kyd = 'KYD',
  /** Kazakhstani Tenge (KZT). */
  Kzt = 'KZT',
  /** Laotian Kip (LAK). */
  Lak = 'LAK',
  /** Lebanese Pounds (LBP). */
  Lbp = 'LBP',
  /** Sri Lankan Rupees (LKR). */
  Lkr = 'LKR',
  /** Liberian Dollar (LRD). */
  Lrd = 'LRD',
  /** Lesotho Loti (LSL). */
  Lsl = 'LSL',
  /** Lithuanian Litai (LTL). */
  Ltl = 'LTL',
  /** Latvian Lati (LVL). */
  Lvl = 'LVL',
  /** Libyan Dinar (LYD). */
  Lyd = 'LYD',
  /** Moroccan Dirham. */
  Mad = 'MAD',
  /** Moldovan Leu (MDL). */
  Mdl = 'MDL',
  /** Malagasy Ariary (MGA). */
  Mga = 'MGA',
  /** Macedonia Denar (MKD). */
  Mkd = 'MKD',
  /** Burmese Kyat (MMK). */
  Mmk = 'MMK',
  /** Mongolian Tugrik. */
  Mnt = 'MNT',
  /** Macanese Pataca (MOP). */
  Mop = 'MOP',
  /** Mauritanian Ouguiya (MRU). */
  Mru = 'MRU',
  /** Mauritian Rupee (MUR). */
  Mur = 'MUR',
  /** Maldivian Rufiyaa (MVR). */
  Mvr = 'MVR',
  /** Malawian Kwacha (MWK). */
  Mwk = 'MWK',
  /** Mexican Pesos (MXN). */
  Mxn = 'MXN',
  /** Malaysian Ringgits (MYR). */
  Myr = 'MYR',
  /** Mozambican Metical. */
  Mzn = 'MZN',
  /** Namibian Dollar. */
  Nad = 'NAD',
  /** Nigerian Naira (NGN). */
  Ngn = 'NGN',
  /** Nicaraguan Córdoba (NIO). */
  Nio = 'NIO',
  /** Norwegian Kroner (NOK). */
  Nok = 'NOK',
  /** Nepalese Rupee (NPR). */
  Npr = 'NPR',
  /** New Zealand Dollars (NZD). */
  Nzd = 'NZD',
  /** Omani Rial (OMR). */
  Omr = 'OMR',
  /** Panamian Balboa (PAB). */
  Pab = 'PAB',
  /** Peruvian Nuevo Sol (PEN). */
  Pen = 'PEN',
  /** Papua New Guinean Kina (PGK). */
  Pgk = 'PGK',
  /** Philippine Peso (PHP). */
  Php = 'PHP',
  /** Pakistani Rupee (PKR). */
  Pkr = 'PKR',
  /** Polish Zlotych (PLN). */
  Pln = 'PLN',
  /** Paraguayan Guarani (PYG). */
  Pyg = 'PYG',
  /** Qatari Rial (QAR). */
  Qar = 'QAR',
  /** Romanian Lei (RON). */
  Ron = 'RON',
  /** Serbian dinar (RSD). */
  Rsd = 'RSD',
  /** Russian Rubles (RUB). */
  Rub = 'RUB',
  /** Rwandan Franc (RWF). */
  Rwf = 'RWF',
  /** Saudi Riyal (SAR). */
  Sar = 'SAR',
  /** Solomon Islands Dollar (SBD). */
  Sbd = 'SBD',
  /** Seychellois Rupee (SCR). */
  Scr = 'SCR',
  /** Sudanese Pound (SDG). */
  Sdg = 'SDG',
  /** Swedish Kronor (SEK). */
  Sek = 'SEK',
  /** Singapore Dollars (SGD). */
  Sgd = 'SGD',
  /** Saint Helena Pounds (SHP). */
  Shp = 'SHP',
  /** Sierra Leonean Leone (SLL). */
  Sll = 'SLL',
  /** Somali Shilling (SOS). */
  Sos = 'SOS',
  /** Surinamese Dollar (SRD). */
  Srd = 'SRD',
  /** South Sudanese Pound (SSP). */
  Ssp = 'SSP',
  /**
   * Sao Tome And Principe Dobra (STD).
   * @deprecated `STD` is deprecated. Use `STN` available from version `2022-07` onwards instead.
   */
  Std = 'STD',
  /** Sao Tome And Principe Dobra (STN). */
  Stn = 'STN',
  /** Syrian Pound (SYP). */
  Syp = 'SYP',
  /** Swazi Lilangeni (SZL). */
  Szl = 'SZL',
  /** Thai baht (THB). */
  Thb = 'THB',
  /** Tajikistani Somoni (TJS). */
  Tjs = 'TJS',
  /** Turkmenistani Manat (TMT). */
  Tmt = 'TMT',
  /** Tunisian Dinar (TND). */
  Tnd = 'TND',
  /** Tongan Pa'anga (TOP). */
  Top = 'TOP',
  /** Turkish Lira (TRY). */
  Try = 'TRY',
  /** Trinidad and Tobago Dollars (TTD). */
  Ttd = 'TTD',
  /** Taiwan Dollars (TWD). */
  Twd = 'TWD',
  /** Tanzanian Shilling (TZS). */
  Tzs = 'TZS',
  /** Ukrainian Hryvnia (UAH). */
  Uah = 'UAH',
  /** Ugandan Shilling (UGX). */
  Ugx = 'UGX',
  /** United States Dollars (USD). */
  Usd = 'USD',
  /** Uruguayan Pesos (UYU). */
  Uyu = 'UYU',
  /** Uzbekistan som (UZS). */
  Uzs = 'UZS',
  /** Venezuelan Bolivares (VED). */
  Ved = 'VED',
  /**
   * Venezuelan Bolivares (VEF).
   * @deprecated `VEF` is deprecated. Use `VES` available from version `2020-10` onwards instead.
   */
  Vef = 'VEF',
  /** Venezuelan Bolivares (VES). */
  Ves = 'VES',
  /** Vietnamese đồng (VND). */
  Vnd = 'VND',
  /** Vanuatu Vatu (VUV). */
  Vuv = 'VUV',
  /** Samoan Tala (WST). */
  Wst = 'WST',
  /** Central African CFA Franc (XAF). */
  Xaf = 'XAF',
  /** East Caribbean Dollar (XCD). */
  Xcd = 'XCD',
  /** West African CFA franc (XOF). */
  Xof = 'XOF',
  /** CFP Franc (XPF). */
  Xpf = 'XPF',
  /** Unrecognized currency. */
  Xxx = 'XXX',
  /** Yemeni Rial (YER). */
  Yer = 'YER',
  /** South African Rand (ZAR). */
  Zar = 'ZAR',
  /** Zambian Kwacha (ZMW). */
  Zmw = 'ZMW'
}

/** A customer represents a customer account with the shop. Customer accounts store contact information for the customer, saving logged-in customers the trouble of having to provide it at every checkout. */
export type ShopifyStorefront_Customer = ShopifyStorefront_HasMetafields & {
  __typename?: 'ShopifyStorefront_Customer';
  /** Indicates whether the customer has consented to be sent marketing material via email. */
  acceptsMarketing: Scalars['Boolean'];
  /** A list of addresses for the customer. */
  addresses: ShopifyStorefront_MailingAddressConnection;
  /** The date and time when the customer was created. */
  createdAt: Scalars['DateTime'];
  /** The customer’s default address. */
  defaultAddress?: Maybe<ShopifyStorefront_MailingAddress>;
  /** The customer’s name, email or phone number. */
  displayName: Scalars['String'];
  /** The customer’s email address. */
  email?: Maybe<Scalars['String']>;
  /** The customer’s first name. */
  firstName?: Maybe<Scalars['String']>;
  /** A unique identifier for the customer. */
  id: Scalars['ID'];
  /** The customer's most recently updated, incomplete checkout. */
  lastIncompleteCheckout?: Maybe<ShopifyStorefront_Checkout>;
  /** The customer’s last name. */
  lastName?: Maybe<Scalars['String']>;
  /** Returns a metafield found by namespace and key. */
  metafield?: Maybe<ShopifyStorefront_Metafield>;
  /** The metafields associated with the resource matching the supplied list of namespaces and keys. */
  metafields: Array<Maybe<ShopifyStorefront_Metafield>>;
  /** The number of orders that the customer has made at the store in their lifetime. */
  numberOfOrders: Scalars['ShopifyStorefront_UnsignedInt64'];
  /** The orders associated with the customer. */
  orders: ShopifyStorefront_OrderConnection;
  /** The customer’s phone number. */
  phone?: Maybe<Scalars['String']>;
  /**
   * A comma separated list of tags that have been added to the customer.
   * Additional access scope required: unauthenticated_read_customer_tags.
   */
  tags: Array<Scalars['String']>;
  /** The date and time when the customer information was updated. */
  updatedAt: Scalars['DateTime'];
};


/** A customer represents a customer account with the shop. Customer accounts store contact information for the customer, saving logged-in customers the trouble of having to provide it at every checkout. */
export type ShopifyStorefront_CustomerAddressesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** A customer represents a customer account with the shop. Customer accounts store contact information for the customer, saving logged-in customers the trouble of having to provide it at every checkout. */
export type ShopifyStorefront_CustomerMetafieldArgs = {
  key: Scalars['String'];
  namespace: Scalars['String'];
};


/** A customer represents a customer account with the shop. Customer accounts store contact information for the customer, saving logged-in customers the trouble of having to provide it at every checkout. */
export type ShopifyStorefront_CustomerMetafieldsArgs = {
  identifiers: Array<ShopifyStorefront_HasMetafieldsIdentifier>;
};


/** A customer represents a customer account with the shop. Customer accounts store contact information for the customer, saving logged-in customers the trouble of having to provide it at every checkout. */
export type ShopifyStorefront_CustomerOrdersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  query?: InputMaybe<Scalars['String']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<ShopifyStorefront_OrderSortKeys>;
};

/** A delivery address of the buyer that is interacting with the cart. */
export type ShopifyStorefront_DeliveryAddress = ShopifyStorefront_MailingAddress;

/** List of different delivery method types. */
export enum ShopifyStorefront_DeliveryMethodType {
  /** Local Delivery. */
  Local = 'LOCAL',
  /** None. */
  None = 'NONE',
  /** Shipping to a Pickup Point. */
  PickupPoint = 'PICKUP_POINT',
  /** Local Pickup. */
  PickUp = 'PICK_UP',
  /** Retail. */
  Retail = 'RETAIL',
  /** Shipping. */
  Shipping = 'SHIPPING'
}

/** Digital wallet, such as Apple Pay, which can be used for accelerated checkouts. */
export enum ShopifyStorefront_DigitalWallet {
  /** Android Pay. */
  AndroidPay = 'ANDROID_PAY',
  /** Apple Pay. */
  ApplePay = 'APPLE_PAY',
  /** Google Pay. */
  GooglePay = 'GOOGLE_PAY',
  /** Shopify Pay. */
  ShopifyPay = 'SHOPIFY_PAY'
}

/** An amount discounting the line that has been allocated by a discount. */
export type ShopifyStorefront_DiscountAllocation = {
  __typename?: 'ShopifyStorefront_DiscountAllocation';
  /** Amount of discount allocated. */
  allocatedAmount: ShopifyStorefront_MoneyV2;
  /** The discount this allocated amount originated from. */
  discountApplication: ShopifyStorefront_DiscountApplication;
};

/**
 * Discount applications capture the intentions of a discount source at
 * the time of application.
 */
export type ShopifyStorefront_DiscountApplication = {
  /** The method by which the discount's value is allocated to its entitled items. */
  allocationMethod: ShopifyStorefront_DiscountApplicationAllocationMethod;
  /** Which lines of targetType that the discount is allocated over. */
  targetSelection: ShopifyStorefront_DiscountApplicationTargetSelection;
  /** The type of line that the discount is applicable towards. */
  targetType: ShopifyStorefront_DiscountApplicationTargetType;
  /** The value of the discount application. */
  value: ShopifyStorefront_PricingValue;
};

/** The method by which the discount's value is allocated onto its entitled lines. */
export enum ShopifyStorefront_DiscountApplicationAllocationMethod {
  /** The value is spread across all entitled lines. */
  Across = 'ACROSS',
  /** The value is applied onto every entitled line. */
  Each = 'EACH',
  /**
   * The value is specifically applied onto a particular line.
   * @deprecated Use ACROSS instead.
   */
  One = 'ONE'
}

/** An auto-generated type for paginating through multiple DiscountApplications. */
export type ShopifyStorefront_DiscountApplicationConnection = {
  __typename?: 'ShopifyStorefront_DiscountApplicationConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_DiscountApplicationEdge>;
  /** A list of the nodes contained in DiscountApplicationEdge. */
  nodes: Array<ShopifyStorefront_DiscountApplication>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one DiscountApplication and a cursor during pagination. */
export type ShopifyStorefront_DiscountApplicationEdge = {
  __typename?: 'ShopifyStorefront_DiscountApplicationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of DiscountApplicationEdge. */
  node: ShopifyStorefront_DiscountApplication;
};

/**
 * The lines on the order to which the discount is applied, of the type defined by
 * the discount application's `targetType`. For example, the value `ENTITLED`, combined with a `targetType` of
 * `LINE_ITEM`, applies the discount on all line items that are entitled to the discount.
 * The value `ALL`, combined with a `targetType` of `SHIPPING_LINE`, applies the discount on all shipping lines.
 */
export enum ShopifyStorefront_DiscountApplicationTargetSelection {
  /** The discount is allocated onto all the lines. */
  All = 'ALL',
  /** The discount is allocated onto only the lines that it's entitled for. */
  Entitled = 'ENTITLED',
  /** The discount is allocated onto explicitly chosen lines. */
  Explicit = 'EXPLICIT'
}

/** The type of line (i.e. line item or shipping line) on an order that the discount is applicable towards. */
export enum ShopifyStorefront_DiscountApplicationTargetType {
  /** The discount applies onto line items. */
  LineItem = 'LINE_ITEM',
  /** The discount applies onto shipping lines. */
  ShippingLine = 'SHIPPING_LINE'
}

/**
 * Discount code applications capture the intentions of a discount code at
 * the time that it is applied.
 */
export type ShopifyStorefront_DiscountCodeApplication = ShopifyStorefront_DiscountApplication & {
  __typename?: 'ShopifyStorefront_DiscountCodeApplication';
  /** The method by which the discount's value is allocated to its entitled items. */
  allocationMethod: ShopifyStorefront_DiscountApplicationAllocationMethod;
  /** Specifies whether the discount code was applied successfully. */
  applicable: Scalars['Boolean'];
  /** The string identifying the discount code that was used at the time of application. */
  code: Scalars['String'];
  /** Which lines of targetType that the discount is allocated over. */
  targetSelection: ShopifyStorefront_DiscountApplicationTargetSelection;
  /** The type of line that the discount is applicable towards. */
  targetType: ShopifyStorefront_DiscountApplicationTargetType;
  /** The value of the discount application. */
  value: ShopifyStorefront_PricingValue;
};

/** Represents a web address. */
export type ShopifyStorefront_Domain = {
  __typename?: 'ShopifyStorefront_Domain';
  /** The host name of the domain (eg: `example.com`). */
  host: Scalars['String'];
  /** Whether SSL is enabled or not. */
  sslEnabled: Scalars['Boolean'];
  /** The URL of the domain (eg: `https://example.com`). */
  url: Scalars['ShopifyStorefront_URL'];
};

/** Represents a video hosted outside of Shopify. */
export type ShopifyStorefront_ExternalVideo = ShopifyStorefront_Media & ShopifyStorefront_Node & {
  __typename?: 'ShopifyStorefront_ExternalVideo';
  /** A word or phrase to share the nature or contents of a media. */
  alt?: Maybe<Scalars['String']>;
  /** The embed URL of the video for the respective host. */
  embedUrl: Scalars['ShopifyStorefront_URL'];
  /**
   * The URL.
   * @deprecated Use `originUrl` instead.
   */
  embeddedUrl: Scalars['ShopifyStorefront_URL'];
  /** The host of the external video. */
  host: ShopifyStorefront_MediaHost;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The media content type. */
  mediaContentType: ShopifyStorefront_MediaContentType;
  /** The origin URL of the video on the respective host. */
  originUrl: Scalars['ShopifyStorefront_URL'];
  /** The preview image for the media. */
  previewImage?: Maybe<ShopifyStorefront_Image>;
};

/** A filter that is supported on the parent field. */
export type ShopifyStorefront_Filter = {
  __typename?: 'ShopifyStorefront_Filter';
  /** A unique identifier. */
  id: Scalars['String'];
  /** A human-friendly string for this filter. */
  label: Scalars['String'];
  /** An enumeration that denotes the type of data this filter represents. */
  type: ShopifyStorefront_FilterType;
  /** The list of values for this filter. */
  values: Array<ShopifyStorefront_FilterValue>;
};

/**
 * The type of data that the filter group represents.
 *
 * For more information, refer to [Filter products in a collection with the Storefront API]
 * (https://shopify.dev/custom-storefronts/products-collections/filter-products).
 */
export enum ShopifyStorefront_FilterType {
  /** A boolean value. */
  Boolean = 'BOOLEAN',
  /** A list of selectable values. */
  List = 'LIST',
  /** A range of prices. */
  PriceRange = 'PRICE_RANGE'
}

/** A selectable value within a filter. */
export type ShopifyStorefront_FilterValue = {
  __typename?: 'ShopifyStorefront_FilterValue';
  /** The number of results that match this filter value. */
  count: Scalars['Int'];
  /** A unique identifier. */
  id: Scalars['String'];
  /**
   * An input object that can be used to filter by this value on the parent field.
   *
   * The value is provided as a helper for building dynamic filtering UI. For example, if you have a list of selected `FilterValue` objects, you can combine their respective `input` values to use in a subsequent query.
   */
  input: Scalars['ShopifyStorefront_JSON'];
  /** A human-friendly string for this filter value. */
  label: Scalars['String'];
};

/** Represents a single fulfillment in an order. */
export type ShopifyStorefront_Fulfillment = {
  __typename?: 'ShopifyStorefront_Fulfillment';
  /** List of the fulfillment's line items. */
  fulfillmentLineItems: ShopifyStorefront_FulfillmentLineItemConnection;
  /** The name of the tracking company. */
  trackingCompany?: Maybe<Scalars['String']>;
  /**
   * Tracking information associated with the fulfillment,
   * such as the tracking number and tracking URL.
   */
  trackingInfo: Array<ShopifyStorefront_FulfillmentTrackingInfo>;
};


/** Represents a single fulfillment in an order. */
export type ShopifyStorefront_FulfillmentFulfillmentLineItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** Represents a single fulfillment in an order. */
export type ShopifyStorefront_FulfillmentTrackingInfoArgs = {
  first?: InputMaybe<Scalars['Int']>;
};

/** Represents a single line item in a fulfillment. There is at most one fulfillment line item for each order line item. */
export type ShopifyStorefront_FulfillmentLineItem = {
  __typename?: 'ShopifyStorefront_FulfillmentLineItem';
  /** The associated order's line item. */
  lineItem: ShopifyStorefront_OrderLineItem;
  /** The amount fulfilled in this fulfillment. */
  quantity: Scalars['Int'];
};

/** An auto-generated type for paginating through multiple FulfillmentLineItems. */
export type ShopifyStorefront_FulfillmentLineItemConnection = {
  __typename?: 'ShopifyStorefront_FulfillmentLineItemConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_FulfillmentLineItemEdge>;
  /** A list of the nodes contained in FulfillmentLineItemEdge. */
  nodes: Array<ShopifyStorefront_FulfillmentLineItem>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one FulfillmentLineItem and a cursor during pagination. */
export type ShopifyStorefront_FulfillmentLineItemEdge = {
  __typename?: 'ShopifyStorefront_FulfillmentLineItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of FulfillmentLineItemEdge. */
  node: ShopifyStorefront_FulfillmentLineItem;
};

/** Tracking information associated with the fulfillment. */
export type ShopifyStorefront_FulfillmentTrackingInfo = {
  __typename?: 'ShopifyStorefront_FulfillmentTrackingInfo';
  /** The tracking number of the fulfillment. */
  number?: Maybe<Scalars['String']>;
  /** The URL to track the fulfillment. */
  url?: Maybe<Scalars['ShopifyStorefront_URL']>;
};

/** The generic file resource lets you manage files in a merchant’s store. Generic files include any file that doesn’t fit into a designated type such as image or video. Example: PDF, JSON. */
export type ShopifyStorefront_GenericFile = ShopifyStorefront_Node & {
  __typename?: 'ShopifyStorefront_GenericFile';
  /** A word or phrase to indicate the contents of a file. */
  alt?: Maybe<Scalars['String']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The MIME type of the file. */
  mimeType?: Maybe<Scalars['String']>;
  /** The size of the original file in bytes. */
  originalFileSize?: Maybe<Scalars['Int']>;
  /** The preview image for the file. */
  previewImage?: Maybe<ShopifyStorefront_Image>;
  /** The URL of the file. */
  url?: Maybe<Scalars['ShopifyStorefront_URL']>;
};

/** Used to specify a geographical location. */
export type ShopifyStorefront_GeoCoordinateInput = {
  /** The coordinate's latitude value. */
  latitude: Scalars['Float'];
  /** The coordinate's longitude value. */
  longitude: Scalars['Float'];
};

/** Represents information about the metafields associated to the specified resource. */
export type ShopifyStorefront_HasMetafields = {
  /** Returns a metafield found by namespace and key. */
  metafield?: Maybe<ShopifyStorefront_Metafield>;
  /** The metafields associated with the resource matching the supplied list of namespaces and keys. */
  metafields: Array<Maybe<ShopifyStorefront_Metafield>>;
};


/** Represents information about the metafields associated to the specified resource. */
export type ShopifyStorefront_HasMetafieldsMetafieldArgs = {
  key: Scalars['String'];
  namespace: Scalars['String'];
};


/** Represents information about the metafields associated to the specified resource. */
export type ShopifyStorefront_HasMetafieldsMetafieldsArgs = {
  identifiers: Array<ShopifyStorefront_HasMetafieldsIdentifier>;
};

/** Identifies a metafield on an owner resource by namespace and key. */
export type ShopifyStorefront_HasMetafieldsIdentifier = {
  /** The identifier for the metafield. */
  key: Scalars['String'];
  /** A container for a set of metafields. */
  namespace: Scalars['String'];
};

/** Represents an image resource. */
export type ShopifyStorefront_Image = {
  __typename?: 'ShopifyStorefront_Image';
  /** A word or phrase to share the nature or contents of an image. */
  altText?: Maybe<Scalars['String']>;
  /** The original height of the image in pixels. Returns `null` if the image is not hosted by Shopify. */
  height?: Maybe<Scalars['Int']>;
  /** A unique identifier for the image. */
  id?: Maybe<Scalars['ID']>;
  /**
   * The location of the original image as a URL.
   *
   * If there are any existing transformations in the original source URL, they will remain and not be stripped.
   * @deprecated Use `url` instead.
   */
  originalSrc: Scalars['ShopifyStorefront_URL'];
  /**
   * The location of the image as a URL.
   * @deprecated Use `url` instead.
   */
  src: Scalars['ShopifyStorefront_URL'];
  /**
   * The location of the transformed image as a URL.
   *
   * All transformation arguments are considered "best-effort". If they can be applied to an image, they will be.
   * Otherwise any transformations which an image type does not support will be ignored.
   * @deprecated Use `url(transform:)` instead
   */
  transformedSrc: Scalars['ShopifyStorefront_URL'];
  /**
   * The location of the image as a URL.
   *
   * If no transform options are specified, then the original image will be preserved including any pre-applied transforms.
   *
   * All transformation options are considered "best-effort". Any transformation that the original image type doesn't support will be ignored.
   *
   * If you need multiple variations of the same image, then you can use [GraphQL aliases](https://graphql.org/learn/queries/#aliases).
   */
  url: Scalars['ShopifyStorefront_URL'];
  /** The original width of the image in pixels. Returns `null` if the image is not hosted by Shopify. */
  width?: Maybe<Scalars['Int']>;
};


/** Represents an image resource. */
export type ShopifyStorefront_ImageTransformedSrcArgs = {
  crop?: InputMaybe<ShopifyStorefront_CropRegion>;
  maxHeight?: InputMaybe<Scalars['Int']>;
  maxWidth?: InputMaybe<Scalars['Int']>;
  preferredContentType?: InputMaybe<ShopifyStorefront_ImageContentType>;
  scale?: InputMaybe<Scalars['Int']>;
};


/** Represents an image resource. */
export type ShopifyStorefront_ImageUrlArgs = {
  transform?: InputMaybe<ShopifyStorefront_ImageTransformInput>;
};

/** An auto-generated type for paginating through multiple Images. */
export type ShopifyStorefront_ImageConnection = {
  __typename?: 'ShopifyStorefront_ImageConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_ImageEdge>;
  /** A list of the nodes contained in ImageEdge. */
  nodes: Array<ShopifyStorefront_Image>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** List of supported image content types. */
export enum ShopifyStorefront_ImageContentType {
  /** A JPG image. */
  Jpg = 'JPG',
  /** A PNG image. */
  Png = 'PNG',
  /** A WEBP image. */
  Webp = 'WEBP'
}

/** An auto-generated type which holds one Image and a cursor during pagination. */
export type ShopifyStorefront_ImageEdge = {
  __typename?: 'ShopifyStorefront_ImageEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of ImageEdge. */
  node: ShopifyStorefront_Image;
};

/**
 * The available options for transforming an image.
 *
 * All transformation options are considered best effort. Any transformation that the original image type doesn't support will be ignored.
 */
export type ShopifyStorefront_ImageTransformInput = {
  /**
   * The region of the image to remain after cropping.
   * Must be used in conjunction with the `maxWidth` and/or `maxHeight` fields, where the `maxWidth` and `maxHeight` aren't equal.
   * The `crop` argument should coincide with the smaller value. A smaller `maxWidth` indicates a `LEFT` or `RIGHT` crop, while
   * a smaller `maxHeight` indicates a `TOP` or `BOTTOM` crop. For example, `{ maxWidth: 5, maxHeight: 10, crop: LEFT }` will result
   * in an image with a width of 5 and height of 10, where the right side of the image is removed.
   */
  crop?: InputMaybe<ShopifyStorefront_CropRegion>;
  /** Image height in pixels between 1 and 5760. */
  maxHeight?: InputMaybe<Scalars['Int']>;
  /** Image width in pixels between 1 and 5760. */
  maxWidth?: InputMaybe<Scalars['Int']>;
  /**
   * Convert the source image into the preferred content type.
   * Supported conversions: `.svg` to `.png`, any file type to `.jpg`, and any file type to `.webp`.
   */
  preferredContentType?: InputMaybe<ShopifyStorefront_ImageContentType>;
  /** Image size multiplier for high-resolution retina displays. Must be within 1..3. */
  scale?: InputMaybe<Scalars['Int']>;
};

/** Represents a location where product inventory is held. */
export type ShopifyStorefront_Location = ShopifyStorefront_Node & {
  __typename?: 'ShopifyStorefront_Location';
  /** The address of the location. */
  address: ShopifyStorefront_LocationAddress;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The name of the location. */
  name: Scalars['String'];
};

/** Represents the address of a location. */
export type ShopifyStorefront_LocationAddress = {
  __typename?: 'ShopifyStorefront_LocationAddress';
  /** The first line of the address for the location. */
  address1?: Maybe<Scalars['String']>;
  /** The second line of the address for the location. */
  address2?: Maybe<Scalars['String']>;
  /** The city of the location. */
  city?: Maybe<Scalars['String']>;
  /** The country of the location. */
  country?: Maybe<Scalars['String']>;
  /** The country code of the location. */
  countryCode?: Maybe<Scalars['String']>;
  /** A formatted version of the address for the location. */
  formatted: Array<Scalars['String']>;
  /** The latitude coordinates of the location. */
  latitude?: Maybe<Scalars['Float']>;
  /** The longitude coordinates of the location. */
  longitude?: Maybe<Scalars['Float']>;
  /** The phone number of the location. */
  phone?: Maybe<Scalars['String']>;
  /** The province of the location. */
  province?: Maybe<Scalars['String']>;
  /** The code for the province, state, or district of the address of the location. */
  provinceCode?: Maybe<Scalars['String']>;
  /** The ZIP code of the location. */
  zip?: Maybe<Scalars['String']>;
};

/** Represents a mailing address for customers and shipping. */
export type ShopifyStorefront_MailingAddress = ShopifyStorefront_Node & {
  __typename?: 'ShopifyStorefront_MailingAddress';
  /** The first line of the address. Typically the street address or PO Box number. */
  address1?: Maybe<Scalars['String']>;
  /** The second line of the address. Typically the number of the apartment, suite, or unit. */
  address2?: Maybe<Scalars['String']>;
  /** The name of the city, district, village, or town. */
  city?: Maybe<Scalars['String']>;
  /** The name of the customer's company or organization. */
  company?: Maybe<Scalars['String']>;
  /** The name of the country. */
  country?: Maybe<Scalars['String']>;
  /**
   * The two-letter code for the country of the address.
   *
   * For example, US.
   * @deprecated Use `countryCodeV2` instead.
   */
  countryCode?: Maybe<Scalars['String']>;
  /**
   * The two-letter code for the country of the address.
   *
   * For example, US.
   */
  countryCodeV2?: Maybe<ShopifyStorefront_CountryCode>;
  /** The first name of the customer. */
  firstName?: Maybe<Scalars['String']>;
  /** A formatted version of the address, customized by the provided arguments. */
  formatted: Array<Scalars['String']>;
  /** A comma-separated list of the values for city, province, and country. */
  formattedArea?: Maybe<Scalars['String']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The last name of the customer. */
  lastName?: Maybe<Scalars['String']>;
  /** The latitude coordinate of the customer address. */
  latitude?: Maybe<Scalars['Float']>;
  /** The longitude coordinate of the customer address. */
  longitude?: Maybe<Scalars['Float']>;
  /** The full name of the customer, based on firstName and lastName. */
  name?: Maybe<Scalars['String']>;
  /**
   * A unique phone number for the customer.
   *
   * Formatted using E.164 standard. For example, _+16135551111_.
   */
  phone?: Maybe<Scalars['String']>;
  /** The region of the address, such as the province, state, or district. */
  province?: Maybe<Scalars['String']>;
  /**
   * The two-letter code for the region.
   *
   * For example, ON.
   */
  provinceCode?: Maybe<Scalars['String']>;
  /** The zip or postal code of the address. */
  zip?: Maybe<Scalars['String']>;
};


/** Represents a mailing address for customers and shipping. */
export type ShopifyStorefront_MailingAddressFormattedArgs = {
  withCompany?: InputMaybe<Scalars['Boolean']>;
  withName?: InputMaybe<Scalars['Boolean']>;
};

/** An auto-generated type for paginating through multiple MailingAddresses. */
export type ShopifyStorefront_MailingAddressConnection = {
  __typename?: 'ShopifyStorefront_MailingAddressConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_MailingAddressEdge>;
  /** A list of the nodes contained in MailingAddressEdge. */
  nodes: Array<ShopifyStorefront_MailingAddress>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one MailingAddress and a cursor during pagination. */
export type ShopifyStorefront_MailingAddressEdge = {
  __typename?: 'ShopifyStorefront_MailingAddressEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of MailingAddressEdge. */
  node: ShopifyStorefront_MailingAddress;
};

/** Manual discount applications capture the intentions of a discount that was manually created. */
export type ShopifyStorefront_ManualDiscountApplication = ShopifyStorefront_DiscountApplication & {
  __typename?: 'ShopifyStorefront_ManualDiscountApplication';
  /** The method by which the discount's value is allocated to its entitled items. */
  allocationMethod: ShopifyStorefront_DiscountApplicationAllocationMethod;
  /** The description of the application. */
  description?: Maybe<Scalars['String']>;
  /** Which lines of targetType that the discount is allocated over. */
  targetSelection: ShopifyStorefront_DiscountApplicationTargetSelection;
  /** The type of line that the discount is applicable towards. */
  targetType: ShopifyStorefront_DiscountApplicationTargetType;
  /** The title of the application. */
  title: Scalars['String'];
  /** The value of the discount application. */
  value: ShopifyStorefront_PricingValue;
};

/** Represents a media interface. */
export type ShopifyStorefront_Media = {
  /** A word or phrase to share the nature or contents of a media. */
  alt?: Maybe<Scalars['String']>;
  /** The media content type. */
  mediaContentType: ShopifyStorefront_MediaContentType;
  /** The preview image for the media. */
  previewImage?: Maybe<ShopifyStorefront_Image>;
};

/** An auto-generated type for paginating through multiple Media. */
export type ShopifyStorefront_MediaConnection = {
  __typename?: 'ShopifyStorefront_MediaConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_MediaEdge>;
  /** A list of the nodes contained in MediaEdge. */
  nodes: Array<ShopifyStorefront_Media>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** The possible content types for a media object. */
export enum ShopifyStorefront_MediaContentType {
  /** An externally hosted video. */
  ExternalVideo = 'EXTERNAL_VIDEO',
  /** A Shopify hosted image. */
  Image = 'IMAGE',
  /** A 3d model. */
  Model_3D = 'MODEL_3D',
  /** A Shopify hosted video. */
  Video = 'VIDEO'
}

/** An auto-generated type which holds one Media and a cursor during pagination. */
export type ShopifyStorefront_MediaEdge = {
  __typename?: 'ShopifyStorefront_MediaEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of MediaEdge. */
  node: ShopifyStorefront_Media;
};

/** Host for a Media Resource. */
export enum ShopifyStorefront_MediaHost {
  /** Host for Vimeo embedded videos. */
  Vimeo = 'VIMEO',
  /** Host for YouTube embedded videos. */
  Youtube = 'YOUTUBE'
}

/** Represents a Shopify hosted image. */
export type ShopifyStorefront_MediaImage = ShopifyStorefront_Media & ShopifyStorefront_Node & {
  __typename?: 'ShopifyStorefront_MediaImage';
  /** A word or phrase to share the nature or contents of a media. */
  alt?: Maybe<Scalars['String']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The image for the media. */
  image?: Maybe<ShopifyStorefront_Image>;
  /** The media content type. */
  mediaContentType: ShopifyStorefront_MediaContentType;
  /** The preview image for the media. */
  previewImage?: Maybe<ShopifyStorefront_Image>;
};

/** A menu used for navigation within a storefront. */
export type ShopifyStorefront_Menu = ShopifyStorefront_Node & {
  __typename?: 'ShopifyStorefront_Menu';
  /** The menu's handle. */
  handle: Scalars['String'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The menu's child items. */
  items: Array<ShopifyStorefront_MenuItem>;
  /** The count of items on the menu. */
  itemsCount: Scalars['Int'];
  /** The menu's title. */
  title: Scalars['String'];
};

/** A menu item within a parent menu. */
export type ShopifyStorefront_MenuItem = ShopifyStorefront_Node & {
  __typename?: 'ShopifyStorefront_MenuItem';
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The menu item's child items. */
  items: Array<ShopifyStorefront_MenuItem>;
  /** The ID of the linked resource. */
  resourceId?: Maybe<Scalars['ID']>;
  /** The menu item's tags to filter a collection. */
  tags: Array<Scalars['String']>;
  /** The menu item's title. */
  title: Scalars['String'];
  /** The menu item's type. */
  type: ShopifyStorefront_MenuItemType;
  /** The menu item's URL. */
  url?: Maybe<Scalars['ShopifyStorefront_URL']>;
};

/** A menu item type. */
export enum ShopifyStorefront_MenuItemType {
  /** An article link. */
  Article = 'ARTICLE',
  /** A blog link. */
  Blog = 'BLOG',
  /** A catalog link. */
  Catalog = 'CATALOG',
  /** A collection link. */
  Collection = 'COLLECTION',
  /** A collection link. */
  Collections = 'COLLECTIONS',
  /** A frontpage link. */
  Frontpage = 'FRONTPAGE',
  /** An http link. */
  Http = 'HTTP',
  /** A page link. */
  Page = 'PAGE',
  /** A product link. */
  Product = 'PRODUCT',
  /** A search link. */
  Search = 'SEARCH',
  /** A shop policy link. */
  ShopPolicy = 'SHOP_POLICY'
}

/** The merchandise to be purchased at checkout. */
export type ShopifyStorefront_Merchandise = ShopifyStorefront_ProductVariant;

/**
 * Metafields represent custom metadata attached to a resource. Metafields can be sorted into namespaces and are
 * comprised of keys, values, and value types.
 */
export type ShopifyStorefront_Metafield = ShopifyStorefront_Node & {
  __typename?: 'ShopifyStorefront_Metafield';
  /** The date and time when the storefront metafield was created. */
  createdAt: Scalars['DateTime'];
  /** The description of a metafield. */
  description?: Maybe<Scalars['String']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The key name for a metafield. */
  key: Scalars['String'];
  /** The namespace for a metafield. */
  namespace: Scalars['String'];
  /** The parent object that the metafield belongs to. */
  parentResource: ShopifyStorefront_MetafieldParentResource;
  /** Returns a reference object if the metafield definition's type is a resource reference. */
  reference?: Maybe<ShopifyStorefront_MetafieldReference>;
  /** A list of reference objects if the metafield's type is a resource reference list. */
  references?: Maybe<ShopifyStorefront_MetafieldReferenceConnection>;
  /**
   * The type name of the metafield.
   * See the list of [supported types](https://shopify.dev/apps/metafields/definitions/types).
   */
  type: Scalars['String'];
  /** The date and time when the storefront metafield was updated. */
  updatedAt: Scalars['DateTime'];
  /** The value of a metafield. */
  value: Scalars['String'];
};


/**
 * Metafields represent custom metadata attached to a resource. Metafields can be sorted into namespaces and are
 * comprised of keys, values, and value types.
 */
export type ShopifyStorefront_MetafieldReferencesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/**
 * A filter used to view a subset of products in a collection matching a specific metafield value.
 *
 * Only the following metafield types are currently supported:
 * - `number_integer`
 * - `number_decimal`
 * - `single_line_text_field`
 * - `boolean` as of 2022-04.
 */
export type ShopifyStorefront_MetafieldFilter = {
  /** The key of the metafield to filter on. */
  key: Scalars['String'];
  /** The namespace of the metafield to filter on. */
  namespace: Scalars['String'];
  /** The value of the metafield. */
  value: Scalars['String'];
};

/** A resource that the metafield belongs to. */
export type ShopifyStorefront_MetafieldParentResource = ShopifyStorefront_Article | ShopifyStorefront_Blog | ShopifyStorefront_Collection | ShopifyStorefront_Customer | ShopifyStorefront_Order | ShopifyStorefront_Page | ShopifyStorefront_Product | ShopifyStorefront_ProductVariant | ShopifyStorefront_Shop;

/** Returns the resource which is being referred to by a metafield. */
export type ShopifyStorefront_MetafieldReference = ShopifyStorefront_Collection | ShopifyStorefront_GenericFile | ShopifyStorefront_MediaImage | ShopifyStorefront_Metaobject | ShopifyStorefront_Page | ShopifyStorefront_Product | ShopifyStorefront_ProductVariant | ShopifyStorefront_Video;

/** An auto-generated type for paginating through multiple MetafieldReferences. */
export type ShopifyStorefront_MetafieldReferenceConnection = {
  __typename?: 'ShopifyStorefront_MetafieldReferenceConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_MetafieldReferenceEdge>;
  /** A list of the nodes contained in MetafieldReferenceEdge. */
  nodes: Array<ShopifyStorefront_MetafieldReference>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one MetafieldReference and a cursor during pagination. */
export type ShopifyStorefront_MetafieldReferenceEdge = {
  __typename?: 'ShopifyStorefront_MetafieldReferenceEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of MetafieldReferenceEdge. */
  node: ShopifyStorefront_MetafieldReference;
};

/** An instance of a user-defined model based on a MetaobjectDefinition. */
export type ShopifyStorefront_Metaobject = ShopifyStorefront_Node & {
  __typename?: 'ShopifyStorefront_Metaobject';
  /** Accesses a field of the object by key. */
  field?: Maybe<ShopifyStorefront_MetaobjectField>;
  /**
   * All object fields with defined values.
   * Omitted object keys can be assumed null, and no guarantees are made about field order.
   */
  fields: Array<ShopifyStorefront_MetaobjectField>;
  /** The unique handle of the metaobject. Useful as a custom ID. */
  handle: Scalars['String'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The type of the metaobject. Defines the namespace of its associated metafields. */
  type: Scalars['String'];
  /** The date and time when the metaobject was last updated. */
  updatedAt: Scalars['DateTime'];
};


/** An instance of a user-defined model based on a MetaobjectDefinition. */
export type ShopifyStorefront_MetaobjectFieldArgs = {
  key: Scalars['String'];
};

/** Provides the value of a Metaobject field. */
export type ShopifyStorefront_MetaobjectField = {
  __typename?: 'ShopifyStorefront_MetaobjectField';
  /** The field key. */
  key: Scalars['String'];
  /** A referenced object if the field type is a resource reference. */
  reference?: Maybe<ShopifyStorefront_MetafieldReference>;
  /** A list of referenced objects if the field type is a resource reference list. */
  references?: Maybe<ShopifyStorefront_MetafieldReferenceConnection>;
  /**
   * The type name of the field.
   * See the list of [supported types](https://shopify.dev/apps/metafields/definitions/types).
   */
  type: Scalars['String'];
  /** The field value. */
  value?: Maybe<Scalars['String']>;
};


/** Provides the value of a Metaobject field. */
export type ShopifyStorefront_MetaobjectFieldReferencesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** Represents a Shopify hosted 3D model. */
export type ShopifyStorefront_Model3d = ShopifyStorefront_Media & ShopifyStorefront_Node & {
  __typename?: 'ShopifyStorefront_Model3d';
  /** A word or phrase to share the nature or contents of a media. */
  alt?: Maybe<Scalars['String']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The media content type. */
  mediaContentType: ShopifyStorefront_MediaContentType;
  /** The preview image for the media. */
  previewImage?: Maybe<ShopifyStorefront_Image>;
  /** The sources for a 3d model. */
  sources: Array<ShopifyStorefront_Model3dSource>;
};

/** Represents a source for a Shopify hosted 3d model. */
export type ShopifyStorefront_Model3dSource = {
  __typename?: 'ShopifyStorefront_Model3dSource';
  /** The filesize of the 3d model. */
  filesize: Scalars['Int'];
  /** The format of the 3d model. */
  format: Scalars['String'];
  /** The MIME type of the 3d model. */
  mimeType: Scalars['String'];
  /** The URL of the 3d model. */
  url: Scalars['String'];
};

/** A monetary value with currency. */
export type ShopifyStorefront_MoneyV2 = {
  __typename?: 'ShopifyStorefront_MoneyV2';
  /** Decimal money amount. */
  amount: Scalars['ShopifyStorefront_Decimal'];
  /** Currency of the money. */
  currencyCode: ShopifyStorefront_CurrencyCode;
};

/**
 * An object with an ID field to support global identification, in accordance with the
 * [Relay specification](https://relay.dev/graphql/objectidentification.htm#sec-Node-Interface).
 * This interface is used by the [node](https://shopify.dev/api/admin-graphql/unstable/queries/node)
 * and [nodes](https://shopify.dev/api/admin-graphql/unstable/queries/nodes) queries.
 */
export type ShopifyStorefront_Node = {
  /** A globally-unique identifier. */
  id: Scalars['ID'];
};

/** Represents a resource that can be published to the Online Store sales channel. */
export type ShopifyStorefront_OnlineStorePublishable = {
  /** The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel. */
  onlineStoreUrl?: Maybe<Scalars['ShopifyStorefront_URL']>;
};

/** An order is a customer’s completed request to purchase one or more products from a shop. An order is created when a customer completes the checkout process, during which time they provides an email address, billing address and payment information. */
export type ShopifyStorefront_Order = ShopifyStorefront_HasMetafields & ShopifyStorefront_Node & {
  __typename?: 'ShopifyStorefront_Order';
  /** The reason for the order's cancellation. Returns `null` if the order wasn't canceled. */
  cancelReason?: Maybe<ShopifyStorefront_OrderCancelReason>;
  /** The date and time when the order was canceled. Returns null if the order wasn't canceled. */
  canceledAt?: Maybe<Scalars['DateTime']>;
  /** The code of the currency used for the payment. */
  currencyCode: ShopifyStorefront_CurrencyCode;
  /** The subtotal of line items and their discounts, excluding line items that have been removed. Does not contain order-level discounts, duties, shipping costs, or shipping discounts. Taxes are not included unless the order is a taxes-included order. */
  currentSubtotalPrice: ShopifyStorefront_MoneyV2;
  /** The total cost of duties for the order, including refunds. */
  currentTotalDuties?: Maybe<ShopifyStorefront_MoneyV2>;
  /** The total amount of the order, including duties, taxes and discounts, minus amounts for line items that have been removed. */
  currentTotalPrice: ShopifyStorefront_MoneyV2;
  /** The total of all taxes applied to the order, excluding taxes for returned line items. */
  currentTotalTax: ShopifyStorefront_MoneyV2;
  /** A list of the custom attributes added to the order. */
  customAttributes: Array<ShopifyStorefront_Attribute>;
  /** The locale code in which this specific order happened. */
  customerLocale?: Maybe<Scalars['String']>;
  /** The unique URL that the customer can use to access the order. */
  customerUrl?: Maybe<Scalars['ShopifyStorefront_URL']>;
  /** Discounts that have been applied on the order. */
  discountApplications: ShopifyStorefront_DiscountApplicationConnection;
  /** Whether the order has had any edits applied or not. */
  edited: Scalars['Boolean'];
  /** The customer's email address. */
  email?: Maybe<Scalars['String']>;
  /** The financial status of the order. */
  financialStatus?: Maybe<ShopifyStorefront_OrderFinancialStatus>;
  /** The fulfillment status for the order. */
  fulfillmentStatus: ShopifyStorefront_OrderFulfillmentStatus;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** List of the order’s line items. */
  lineItems: ShopifyStorefront_OrderLineItemConnection;
  /** Returns a metafield found by namespace and key. */
  metafield?: Maybe<ShopifyStorefront_Metafield>;
  /** The metafields associated with the resource matching the supplied list of namespaces and keys. */
  metafields: Array<Maybe<ShopifyStorefront_Metafield>>;
  /**
   * Unique identifier for the order that appears on the order.
   * For example, _#1000_ or _Store1001.
   */
  name: Scalars['String'];
  /** A unique numeric identifier for the order for use by shop owner and customer. */
  orderNumber: Scalars['Int'];
  /** The total cost of duties charged at checkout. */
  originalTotalDuties?: Maybe<ShopifyStorefront_MoneyV2>;
  /** The total price of the order before any applied edits. */
  originalTotalPrice: ShopifyStorefront_MoneyV2;
  /** The customer's phone number for receiving SMS notifications. */
  phone?: Maybe<Scalars['String']>;
  /**
   * The date and time when the order was imported.
   * This value can be set to dates in the past when importing from other systems.
   * If no value is provided, it will be auto-generated based on current date and time.
   */
  processedAt: Scalars['DateTime'];
  /** The address to where the order will be shipped. */
  shippingAddress?: Maybe<ShopifyStorefront_MailingAddress>;
  /** The discounts that have been allocated onto the shipping line by discount applications. */
  shippingDiscountAllocations: Array<ShopifyStorefront_DiscountAllocation>;
  /** The unique URL for the order's status page. */
  statusUrl: Scalars['ShopifyStorefront_URL'];
  /** Price of the order before shipping and taxes. */
  subtotalPrice?: Maybe<ShopifyStorefront_MoneyV2>;
  /**
   * Price of the order before duties, shipping and taxes.
   * @deprecated Use `subtotalPrice` instead.
   */
  subtotalPriceV2?: Maybe<ShopifyStorefront_MoneyV2>;
  /** List of the order’s successful fulfillments. */
  successfulFulfillments?: Maybe<Array<ShopifyStorefront_Fulfillment>>;
  /** The sum of all the prices of all the items in the order, duties, taxes and discounts included (must be positive). */
  totalPrice: ShopifyStorefront_MoneyV2;
  /**
   * The sum of all the prices of all the items in the order, duties, taxes and discounts included (must be positive).
   * @deprecated Use `totalPrice` instead.
   */
  totalPriceV2: ShopifyStorefront_MoneyV2;
  /** The total amount that has been refunded. */
  totalRefunded: ShopifyStorefront_MoneyV2;
  /**
   * The total amount that has been refunded.
   * @deprecated Use `totalRefunded` instead.
   */
  totalRefundedV2: ShopifyStorefront_MoneyV2;
  /** The total cost of shipping. */
  totalShippingPrice: ShopifyStorefront_MoneyV2;
  /**
   * The total cost of shipping.
   * @deprecated Use `totalShippingPrice` instead.
   */
  totalShippingPriceV2: ShopifyStorefront_MoneyV2;
  /** The total cost of taxes. */
  totalTax?: Maybe<ShopifyStorefront_MoneyV2>;
  /**
   * The total cost of taxes.
   * @deprecated Use `totalTax` instead.
   */
  totalTaxV2?: Maybe<ShopifyStorefront_MoneyV2>;
};


/** An order is a customer’s completed request to purchase one or more products from a shop. An order is created when a customer completes the checkout process, during which time they provides an email address, billing address and payment information. */
export type ShopifyStorefront_OrderDiscountApplicationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** An order is a customer’s completed request to purchase one or more products from a shop. An order is created when a customer completes the checkout process, during which time they provides an email address, billing address and payment information. */
export type ShopifyStorefront_OrderLineItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** An order is a customer’s completed request to purchase one or more products from a shop. An order is created when a customer completes the checkout process, during which time they provides an email address, billing address and payment information. */
export type ShopifyStorefront_OrderMetafieldArgs = {
  key: Scalars['String'];
  namespace: Scalars['String'];
};


/** An order is a customer’s completed request to purchase one or more products from a shop. An order is created when a customer completes the checkout process, during which time they provides an email address, billing address and payment information. */
export type ShopifyStorefront_OrderMetafieldsArgs = {
  identifiers: Array<ShopifyStorefront_HasMetafieldsIdentifier>;
};


/** An order is a customer’s completed request to purchase one or more products from a shop. An order is created when a customer completes the checkout process, during which time they provides an email address, billing address and payment information. */
export type ShopifyStorefront_OrderSuccessfulFulfillmentsArgs = {
  first?: InputMaybe<Scalars['Int']>;
};

/** Represents the reason for the order's cancellation. */
export enum ShopifyStorefront_OrderCancelReason {
  /** The customer wanted to cancel the order. */
  Customer = 'CUSTOMER',
  /** Payment was declined. */
  Declined = 'DECLINED',
  /** The order was fraudulent. */
  Fraud = 'FRAUD',
  /** There was insufficient inventory. */
  Inventory = 'INVENTORY',
  /** The order was canceled for an unlisted reason. */
  Other = 'OTHER'
}

/** An auto-generated type for paginating through multiple Orders. */
export type ShopifyStorefront_OrderConnection = {
  __typename?: 'ShopifyStorefront_OrderConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_OrderEdge>;
  /** A list of the nodes contained in OrderEdge. */
  nodes: Array<ShopifyStorefront_Order>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
  /** The total count of Orders. */
  totalCount: Scalars['ShopifyStorefront_UnsignedInt64'];
};

/** An auto-generated type which holds one Order and a cursor during pagination. */
export type ShopifyStorefront_OrderEdge = {
  __typename?: 'ShopifyStorefront_OrderEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of OrderEdge. */
  node: ShopifyStorefront_Order;
};

/** Represents the order's current financial status. */
export enum ShopifyStorefront_OrderFinancialStatus {
  /** Displayed as **Authorized**. */
  Authorized = 'AUTHORIZED',
  /** Displayed as **Paid**. */
  Paid = 'PAID',
  /** Displayed as **Partially paid**. */
  PartiallyPaid = 'PARTIALLY_PAID',
  /** Displayed as **Partially refunded**. */
  PartiallyRefunded = 'PARTIALLY_REFUNDED',
  /** Displayed as **Pending**. */
  Pending = 'PENDING',
  /** Displayed as **Refunded**. */
  Refunded = 'REFUNDED',
  /** Displayed as **Voided**. */
  Voided = 'VOIDED'
}

/** Represents the order's aggregated fulfillment status for display purposes. */
export enum ShopifyStorefront_OrderFulfillmentStatus {
  /** Displayed as **Fulfilled**. All of the items in the order have been fulfilled. */
  Fulfilled = 'FULFILLED',
  /** Displayed as **In progress**. Some of the items in the order have been fulfilled, or a request for fulfillment has been sent to the fulfillment service. */
  InProgress = 'IN_PROGRESS',
  /** Displayed as **On hold**. All of the unfulfilled items in this order are on hold. */
  OnHold = 'ON_HOLD',
  /** Displayed as **Open**. None of the items in the order have been fulfilled. Replaced by "UNFULFILLED" status. */
  Open = 'OPEN',
  /** Displayed as **Partially fulfilled**. Some of the items in the order have been fulfilled. */
  PartiallyFulfilled = 'PARTIALLY_FULFILLED',
  /** Displayed as **Pending fulfillment**. A request for fulfillment of some items awaits a response from the fulfillment service. Replaced by "IN_PROGRESS" status. */
  PendingFulfillment = 'PENDING_FULFILLMENT',
  /** Displayed as **Restocked**. All of the items in the order have been restocked. Replaced by "UNFULFILLED" status. */
  Restocked = 'RESTOCKED',
  /** Displayed as **Scheduled**. All of the unfulfilled items in this order are scheduled for fulfillment at later time. */
  Scheduled = 'SCHEDULED',
  /** Displayed as **Unfulfilled**. None of the items in the order have been fulfilled. */
  Unfulfilled = 'UNFULFILLED'
}

/** Represents a single line in an order. There is one line item for each distinct product variant. */
export type ShopifyStorefront_OrderLineItem = {
  __typename?: 'ShopifyStorefront_OrderLineItem';
  /** The number of entries associated to the line item minus the items that have been removed. */
  currentQuantity: Scalars['Int'];
  /** List of custom attributes associated to the line item. */
  customAttributes: Array<ShopifyStorefront_Attribute>;
  /** The discounts that have been allocated onto the order line item by discount applications. */
  discountAllocations: Array<ShopifyStorefront_DiscountAllocation>;
  /** The total price of the line item, including discounts, and displayed in the presentment currency. */
  discountedTotalPrice: ShopifyStorefront_MoneyV2;
  /** The total price of the line item, not including any discounts. The total price is calculated using the original unit price multiplied by the quantity, and it is displayed in the presentment currency. */
  originalTotalPrice: ShopifyStorefront_MoneyV2;
  /** The number of products variants associated to the line item. */
  quantity: Scalars['Int'];
  /** The title of the product combined with title of the variant. */
  title: Scalars['String'];
  /** The product variant object associated to the line item. */
  variant?: Maybe<ShopifyStorefront_ProductVariant>;
};

/** An auto-generated type for paginating through multiple OrderLineItems. */
export type ShopifyStorefront_OrderLineItemConnection = {
  __typename?: 'ShopifyStorefront_OrderLineItemConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_OrderLineItemEdge>;
  /** A list of the nodes contained in OrderLineItemEdge. */
  nodes: Array<ShopifyStorefront_OrderLineItem>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one OrderLineItem and a cursor during pagination. */
export type ShopifyStorefront_OrderLineItemEdge = {
  __typename?: 'ShopifyStorefront_OrderLineItemEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of OrderLineItemEdge. */
  node: ShopifyStorefront_OrderLineItem;
};

/** The set of valid sort keys for the Order query. */
export enum ShopifyStorefront_OrderSortKeys {
  /** Sort by the `id` value. */
  Id = 'ID',
  /** Sort by the `processed_at` value. */
  ProcessedAt = 'PROCESSED_AT',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE',
  /** Sort by the `total_price` value. */
  TotalPrice = 'TOTAL_PRICE'
}

/** Shopify merchants can create pages to hold static HTML content. Each Page object represents a custom page on the online store. */
export type ShopifyStorefront_Page = ShopifyStorefront_HasMetafields & ShopifyStorefront_Node & ShopifyStorefront_OnlineStorePublishable & {
  __typename?: 'ShopifyStorefront_Page';
  /** The description of the page, complete with HTML formatting. */
  body: Scalars['ShopifyStorefront_HTML'];
  /** Summary of the page body. */
  bodySummary: Scalars['String'];
  /** The timestamp of the page creation. */
  createdAt: Scalars['DateTime'];
  /** A human-friendly unique string for the page automatically generated from its title. */
  handle: Scalars['String'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** Returns a metafield found by namespace and key. */
  metafield?: Maybe<ShopifyStorefront_Metafield>;
  /** The metafields associated with the resource matching the supplied list of namespaces and keys. */
  metafields: Array<Maybe<ShopifyStorefront_Metafield>>;
  /** The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel. */
  onlineStoreUrl?: Maybe<Scalars['ShopifyStorefront_URL']>;
  /** The page's SEO information. */
  seo?: Maybe<ShopifyStorefront_Seo>;
  /** The title of the page. */
  title: Scalars['String'];
  /** The timestamp of the latest page update. */
  updatedAt: Scalars['DateTime'];
};


/** Shopify merchants can create pages to hold static HTML content. Each Page object represents a custom page on the online store. */
export type ShopifyStorefront_PageMetafieldArgs = {
  key: Scalars['String'];
  namespace: Scalars['String'];
};


/** Shopify merchants can create pages to hold static HTML content. Each Page object represents a custom page on the online store. */
export type ShopifyStorefront_PageMetafieldsArgs = {
  identifiers: Array<ShopifyStorefront_HasMetafieldsIdentifier>;
};

/**
 * Returns information about pagination in a connection, in accordance with the
 * [Relay specification](https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo).
 * For more information, please read our [GraphQL Pagination Usage Guide](https://shopify.dev/api/usage/pagination-graphql).
 */
export type ShopifyStorefront_PageInfo = {
  __typename?: 'ShopifyStorefront_PageInfo';
  /** The cursor corresponding to the last node in edges. */
  endCursor?: Maybe<Scalars['String']>;
  /** Whether there are more pages to fetch following the current page. */
  hasNextPage: Scalars['Boolean'];
  /** Whether there are any pages prior to the current page. */
  hasPreviousPage: Scalars['Boolean'];
  /** The cursor corresponding to the first node in edges. */
  startCursor?: Maybe<Scalars['String']>;
};

/** A payment applied to a checkout. */
export type ShopifyStorefront_Payment = ShopifyStorefront_Node & {
  __typename?: 'ShopifyStorefront_Payment';
  /** The amount of the payment. */
  amount: ShopifyStorefront_MoneyV2;
  /**
   * The amount of the payment.
   * @deprecated Use `amount` instead.
   */
  amountV2: ShopifyStorefront_MoneyV2;
  /** The billing address for the payment. */
  billingAddress?: Maybe<ShopifyStorefront_MailingAddress>;
  /** The checkout to which the payment belongs. */
  checkout: ShopifyStorefront_Checkout;
  /** The credit card used for the payment in the case of direct payments. */
  creditCard?: Maybe<ShopifyStorefront_CreditCard>;
  /** A message describing a processing error during asynchronous processing. */
  errorMessage?: Maybe<Scalars['String']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /**
   * A client-side generated token to identify a payment and perform idempotent operations.
   * For more information, refer to
   * [Idempotent requests](https://shopify.dev/api/usage/idempotent-requests).
   */
  idempotencyKey?: Maybe<Scalars['String']>;
  /** The URL where the customer needs to be redirected so they can complete the 3D Secure payment flow. */
  nextActionUrl?: Maybe<Scalars['ShopifyStorefront_URL']>;
  /** Whether the payment is still processing asynchronously. */
  ready: Scalars['Boolean'];
  /** A flag to indicate if the payment is to be done in test mode for gateways that support it. */
  test: Scalars['Boolean'];
  /** The actual transaction recorded by Shopify after having processed the payment with the gateway. */
  transaction?: Maybe<ShopifyStorefront_Transaction>;
};

/** Settings related to payments. */
export type ShopifyStorefront_PaymentSettings = {
  __typename?: 'ShopifyStorefront_PaymentSettings';
  /** List of the card brands which the shop accepts. */
  acceptedCardBrands: Array<ShopifyStorefront_CardBrand>;
  /** The url pointing to the endpoint to vault credit cards. */
  cardVaultUrl: Scalars['ShopifyStorefront_URL'];
  /** The country where the shop is located. */
  countryCode: ShopifyStorefront_CountryCode;
  /** The three-letter code for the shop's primary currency. */
  currencyCode: ShopifyStorefront_CurrencyCode;
  /** A list of enabled currencies (ISO 4217 format) that the shop accepts. Merchants can enable currencies from their Shopify Payments settings in the Shopify admin. */
  enabledPresentmentCurrencies: Array<ShopifyStorefront_CurrencyCode>;
  /** The shop’s Shopify Payments account id. */
  shopifyPaymentsAccountId?: Maybe<Scalars['String']>;
  /** List of the digital wallets which the shop supports. */
  supportedDigitalWallets: Array<ShopifyStorefront_DigitalWallet>;
};

/** A filter used to view a subset of products in a collection matching a specific price range. */
export type ShopifyStorefront_PriceRangeFilter = {
  /** The maximum price in the range. Empty indicates no max price. */
  max?: InputMaybe<Scalars['Float']>;
  /** The minimum price in the range. Defaults to zero. */
  min?: InputMaybe<Scalars['Float']>;
};

/** The value of the percentage pricing object. */
export type ShopifyStorefront_PricingPercentageValue = {
  __typename?: 'ShopifyStorefront_PricingPercentageValue';
  /** The percentage value of the object. */
  percentage: Scalars['Float'];
};

/** The price value (fixed or percentage) for a discount application. */
export type ShopifyStorefront_PricingValue = ShopifyStorefront_MoneyV2 | ShopifyStorefront_PricingPercentageValue;

/**
 * A product represents an individual item for sale in a Shopify store. Products are often physical, but they don't have to be.
 * For example, a digital download (such as a movie, music or ebook file) also qualifies as a product, as do services (such as equipment rental, work for hire, customization of another product or an extended warranty).
 */
export type ShopifyStorefront_Product = ShopifyStorefront_HasMetafields & ShopifyStorefront_Node & ShopifyStorefront_OnlineStorePublishable & {
  __typename?: 'ShopifyStorefront_Product';
  /** Indicates if at least one product variant is available for sale. */
  availableForSale: Scalars['Boolean'];
  /** List of collections a product belongs to. */
  collections: ShopifyStorefront_CollectionConnection;
  /** The compare at price of the product across all variants. */
  compareAtPriceRange: ShopifyStorefront_ProductPriceRange;
  /** The date and time when the product was created. */
  createdAt: Scalars['DateTime'];
  /** Stripped description of the product, single line with HTML tags removed. */
  description: Scalars['String'];
  /** The description of the product, complete with HTML formatting. */
  descriptionHtml: Scalars['ShopifyStorefront_HTML'];
  /**
   * The featured image for the product.
   *
   * This field is functionally equivalent to `images(first: 1)`.
   */
  featuredImage?: Maybe<ShopifyStorefront_Image>;
  /**
   * A human-friendly unique string for the Product automatically generated from its title.
   * They are used by the Liquid templating language to refer to objects.
   */
  handle: Scalars['String'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** List of images associated with the product. */
  images: ShopifyStorefront_ImageConnection;
  /** Whether the product is a gift card. */
  isGiftCard: Scalars['Boolean'];
  /** The media associated with the product. */
  media: ShopifyStorefront_MediaConnection;
  /** Returns a metafield found by namespace and key. */
  metafield?: Maybe<ShopifyStorefront_Metafield>;
  /** The metafields associated with the resource matching the supplied list of namespaces and keys. */
  metafields: Array<Maybe<ShopifyStorefront_Metafield>>;
  /** The URL used for viewing the resource on the shop's Online Store. Returns `null` if the resource is currently not published to the Online Store sales channel. */
  onlineStoreUrl?: Maybe<Scalars['ShopifyStorefront_URL']>;
  /** List of product options. */
  options: Array<ShopifyStorefront_ProductOption>;
  /** The price range. */
  priceRange: ShopifyStorefront_ProductPriceRange;
  /** A categorization that a product can be tagged with, commonly used for filtering and searching. */
  productType: Scalars['String'];
  /** The date and time when the product was published to the channel. */
  publishedAt: Scalars['DateTime'];
  /** Whether the product can only be purchased with a selling plan. */
  requiresSellingPlan: Scalars['Boolean'];
  /** A list of a product's available selling plan groups. A selling plan group represents a selling method. For example, 'Subscribe and save' is a selling method where customers pay for goods or services per delivery. A selling plan group contains individual selling plans. */
  sellingPlanGroups: ShopifyStorefront_SellingPlanGroupConnection;
  /** The product's SEO information. */
  seo: ShopifyStorefront_Seo;
  /**
   * A comma separated list of tags that have been added to the product.
   * Additional access scope required for private apps: unauthenticated_read_product_tags.
   */
  tags: Array<Scalars['String']>;
  /** The product’s title. */
  title: Scalars['String'];
  /** The total quantity of inventory in stock for this Product. */
  totalInventory?: Maybe<Scalars['Int']>;
  /**
   * The date and time when the product was last modified.
   * A product's `updatedAt` value can change for different reasons. For example, if an order
   * is placed for a product that has inventory tracking set up, then the inventory adjustment
   * is counted as an update.
   */
  updatedAt: Scalars['DateTime'];
  /**
   * Find a product’s variant based on its selected options.
   * This is useful for converting a user’s selection of product options into a single matching variant.
   * If there is not a variant for the selected options, `null` will be returned.
   */
  variantBySelectedOptions?: Maybe<ShopifyStorefront_ProductVariant>;
  /** List of the product’s variants. */
  variants: ShopifyStorefront_ProductVariantConnection;
  /** The product’s vendor name. */
  vendor: Scalars['String'];
};


/**
 * A product represents an individual item for sale in a Shopify store. Products are often physical, but they don't have to be.
 * For example, a digital download (such as a movie, music or ebook file) also qualifies as a product, as do services (such as equipment rental, work for hire, customization of another product or an extended warranty).
 */
export type ShopifyStorefront_ProductCollectionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/**
 * A product represents an individual item for sale in a Shopify store. Products are often physical, but they don't have to be.
 * For example, a digital download (such as a movie, music or ebook file) also qualifies as a product, as do services (such as equipment rental, work for hire, customization of another product or an extended warranty).
 */
export type ShopifyStorefront_ProductDescriptionArgs = {
  truncateAt?: InputMaybe<Scalars['Int']>;
};


/**
 * A product represents an individual item for sale in a Shopify store. Products are often physical, but they don't have to be.
 * For example, a digital download (such as a movie, music or ebook file) also qualifies as a product, as do services (such as equipment rental, work for hire, customization of another product or an extended warranty).
 */
export type ShopifyStorefront_ProductImagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<ShopifyStorefront_ProductImageSortKeys>;
};


/**
 * A product represents an individual item for sale in a Shopify store. Products are often physical, but they don't have to be.
 * For example, a digital download (such as a movie, music or ebook file) also qualifies as a product, as do services (such as equipment rental, work for hire, customization of another product or an extended warranty).
 */
export type ShopifyStorefront_ProductMediaArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<ShopifyStorefront_ProductMediaSortKeys>;
};


/**
 * A product represents an individual item for sale in a Shopify store. Products are often physical, but they don't have to be.
 * For example, a digital download (such as a movie, music or ebook file) also qualifies as a product, as do services (such as equipment rental, work for hire, customization of another product or an extended warranty).
 */
export type ShopifyStorefront_ProductMetafieldArgs = {
  key: Scalars['String'];
  namespace: Scalars['String'];
};


/**
 * A product represents an individual item for sale in a Shopify store. Products are often physical, but they don't have to be.
 * For example, a digital download (such as a movie, music or ebook file) also qualifies as a product, as do services (such as equipment rental, work for hire, customization of another product or an extended warranty).
 */
export type ShopifyStorefront_ProductMetafieldsArgs = {
  identifiers: Array<ShopifyStorefront_HasMetafieldsIdentifier>;
};


/**
 * A product represents an individual item for sale in a Shopify store. Products are often physical, but they don't have to be.
 * For example, a digital download (such as a movie, music or ebook file) also qualifies as a product, as do services (such as equipment rental, work for hire, customization of another product or an extended warranty).
 */
export type ShopifyStorefront_ProductOptionsArgs = {
  first?: InputMaybe<Scalars['Int']>;
};


/**
 * A product represents an individual item for sale in a Shopify store. Products are often physical, but they don't have to be.
 * For example, a digital download (such as a movie, music or ebook file) also qualifies as a product, as do services (such as equipment rental, work for hire, customization of another product or an extended warranty).
 */
export type ShopifyStorefront_ProductSellingPlanGroupsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/**
 * A product represents an individual item for sale in a Shopify store. Products are often physical, but they don't have to be.
 * For example, a digital download (such as a movie, music or ebook file) also qualifies as a product, as do services (such as equipment rental, work for hire, customization of another product or an extended warranty).
 */
export type ShopifyStorefront_ProductVariantBySelectedOptionsArgs = {
  selectedOptions: Array<ShopifyStorefront_SelectedOptionInput>;
};


/**
 * A product represents an individual item for sale in a Shopify store. Products are often physical, but they don't have to be.
 * For example, a digital download (such as a movie, music or ebook file) also qualifies as a product, as do services (such as equipment rental, work for hire, customization of another product or an extended warranty).
 */
export type ShopifyStorefront_ProductVariantsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
  sortKey?: InputMaybe<ShopifyStorefront_ProductVariantSortKeys>;
};

/** The set of valid sort keys for the ProductCollection query. */
export enum ShopifyStorefront_ProductCollectionSortKeys {
  /** Sort by the `best-selling` value. */
  BestSelling = 'BEST_SELLING',
  /** Sort by the `collection-default` value. */
  CollectionDefault = 'COLLECTION_DEFAULT',
  /** Sort by the `created` value. */
  Created = 'CREATED',
  /** Sort by the `id` value. */
  Id = 'ID',
  /** Sort by the `manual` value. */
  Manual = 'MANUAL',
  /** Sort by the `price` value. */
  Price = 'PRICE',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE',
  /** Sort by the `title` value. */
  Title = 'TITLE'
}

/** An auto-generated type for paginating through multiple Products. */
export type ShopifyStorefront_ProductConnection = {
  __typename?: 'ShopifyStorefront_ProductConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_ProductEdge>;
  /** A list of available filters. */
  filters: Array<ShopifyStorefront_Filter>;
  /** A list of the nodes contained in ProductEdge. */
  nodes: Array<ShopifyStorefront_Product>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one Product and a cursor during pagination. */
export type ShopifyStorefront_ProductEdge = {
  __typename?: 'ShopifyStorefront_ProductEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of ProductEdge. */
  node: ShopifyStorefront_Product;
};

/** A filter used to view a subset of products in a collection. */
export type ShopifyStorefront_ProductFilter = {
  /** Filter on if the product is available for sale. */
  available?: InputMaybe<Scalars['Boolean']>;
  /** A range of prices to filter with-in. */
  price?: InputMaybe<ShopifyStorefront_PriceRangeFilter>;
  /** A product metafield to filter on. */
  productMetafield?: InputMaybe<ShopifyStorefront_MetafieldFilter>;
  /** The product type to filter on. */
  productType?: InputMaybe<Scalars['String']>;
  /** The product vendor to filter on. */
  productVendor?: InputMaybe<Scalars['String']>;
  /** A product tag to filter on. */
  tag?: InputMaybe<Scalars['String']>;
  /** A variant metafield to filter on. */
  variantMetafield?: InputMaybe<ShopifyStorefront_MetafieldFilter>;
  /** A variant option to filter on. */
  variantOption?: InputMaybe<ShopifyStorefront_VariantOptionFilter>;
};

/** The set of valid sort keys for the ProductImage query. */
export enum ShopifyStorefront_ProductImageSortKeys {
  /** Sort by the `created_at` value. */
  CreatedAt = 'CREATED_AT',
  /** Sort by the `id` value. */
  Id = 'ID',
  /** Sort by the `position` value. */
  Position = 'POSITION',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE'
}

/** The set of valid sort keys for the ProductMedia query. */
export enum ShopifyStorefront_ProductMediaSortKeys {
  /** Sort by the `id` value. */
  Id = 'ID',
  /** Sort by the `position` value. */
  Position = 'POSITION',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE'
}

/**
 * Product property names like "Size", "Color", and "Material" that the customers can select.
 * Variants are selected based on permutations of these options.
 * 255 characters limit each.
 */
export type ShopifyStorefront_ProductOption = ShopifyStorefront_Node & {
  __typename?: 'ShopifyStorefront_ProductOption';
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The product option’s name. */
  name: Scalars['String'];
  /** The corresponding value to the product option name. */
  values: Array<Scalars['String']>;
};

/** The price range of the product. */
export type ShopifyStorefront_ProductPriceRange = {
  __typename?: 'ShopifyStorefront_ProductPriceRange';
  /** The highest variant's price. */
  maxVariantPrice: ShopifyStorefront_MoneyV2;
  /** The lowest variant's price. */
  minVariantPrice: ShopifyStorefront_MoneyV2;
};

/** A product variant represents a different version of a product, such as differing sizes or differing colors. */
export type ShopifyStorefront_ProductVariant = ShopifyStorefront_HasMetafields & ShopifyStorefront_Node & {
  __typename?: 'ShopifyStorefront_ProductVariant';
  /** Indicates if the product variant is available for sale. */
  availableForSale: Scalars['Boolean'];
  /** The barcode (for example, ISBN, UPC, or GTIN) associated with the variant. */
  barcode?: Maybe<Scalars['String']>;
  /** The compare at price of the variant. This can be used to mark a variant as on sale, when `compareAtPrice` is higher than `price`. */
  compareAtPrice?: Maybe<ShopifyStorefront_MoneyV2>;
  /**
   * The compare at price of the variant. This can be used to mark a variant as on sale, when `compareAtPriceV2` is higher than `priceV2`.
   * @deprecated Use `compareAtPrice` instead.
   */
  compareAtPriceV2?: Maybe<ShopifyStorefront_MoneyV2>;
  /** Whether a product is out of stock but still available for purchase (used for backorders). */
  currentlyNotInStock: Scalars['Boolean'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** Image associated with the product variant. This field falls back to the product image if no image is available. */
  image?: Maybe<ShopifyStorefront_Image>;
  /** Returns a metafield found by namespace and key. */
  metafield?: Maybe<ShopifyStorefront_Metafield>;
  /** The metafields associated with the resource matching the supplied list of namespaces and keys. */
  metafields: Array<Maybe<ShopifyStorefront_Metafield>>;
  /** The product variant’s price. */
  price: ShopifyStorefront_MoneyV2;
  /**
   * The product variant’s price.
   * @deprecated Use `price` instead.
   */
  priceV2: ShopifyStorefront_MoneyV2;
  /** The product object that the product variant belongs to. */
  product: ShopifyStorefront_Product;
  /** The total sellable quantity of the variant for online sales channels. */
  quantityAvailable?: Maybe<Scalars['Int']>;
  /** Whether a customer needs to provide a shipping address when placing an order for the product variant. */
  requiresShipping: Scalars['Boolean'];
  /** List of product options applied to the variant. */
  selectedOptions: Array<ShopifyStorefront_SelectedOption>;
  /** Represents an association between a variant and a selling plan. Selling plan allocations describe which selling plans are available for each variant, and what their impact is on pricing. */
  sellingPlanAllocations: ShopifyStorefront_SellingPlanAllocationConnection;
  /** The SKU (stock keeping unit) associated with the variant. */
  sku?: Maybe<Scalars['String']>;
  /** The in-store pickup availability of this variant by location. */
  storeAvailability: ShopifyStorefront_StoreAvailabilityConnection;
  /** The product variant’s title. */
  title: Scalars['String'];
  /** The unit price value for the variant based on the variant's measurement. */
  unitPrice?: Maybe<ShopifyStorefront_MoneyV2>;
  /** The unit price measurement for the variant. */
  unitPriceMeasurement?: Maybe<ShopifyStorefront_UnitPriceMeasurement>;
  /** The weight of the product variant in the unit system specified with `weight_unit`. */
  weight?: Maybe<Scalars['Float']>;
  /** Unit of measurement for weight. */
  weightUnit: ShopifyStorefront_WeightUnit;
};


/** A product variant represents a different version of a product, such as differing sizes or differing colors. */
export type ShopifyStorefront_ProductVariantMetafieldArgs = {
  key: Scalars['String'];
  namespace: Scalars['String'];
};


/** A product variant represents a different version of a product, such as differing sizes or differing colors. */
export type ShopifyStorefront_ProductVariantMetafieldsArgs = {
  identifiers: Array<ShopifyStorefront_HasMetafieldsIdentifier>;
};


/** A product variant represents a different version of a product, such as differing sizes or differing colors. */
export type ShopifyStorefront_ProductVariantSellingPlanAllocationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};


/** A product variant represents a different version of a product, such as differing sizes or differing colors. */
export type ShopifyStorefront_ProductVariantStoreAvailabilityArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  near?: InputMaybe<ShopifyStorefront_GeoCoordinateInput>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};

/** An auto-generated type for paginating through multiple ProductVariants. */
export type ShopifyStorefront_ProductVariantConnection = {
  __typename?: 'ShopifyStorefront_ProductVariantConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_ProductVariantEdge>;
  /** A list of the nodes contained in ProductVariantEdge. */
  nodes: Array<ShopifyStorefront_ProductVariant>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one ProductVariant and a cursor during pagination. */
export type ShopifyStorefront_ProductVariantEdge = {
  __typename?: 'ShopifyStorefront_ProductVariantEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of ProductVariantEdge. */
  node: ShopifyStorefront_ProductVariant;
};

/** The set of valid sort keys for the ProductVariant query. */
export enum ShopifyStorefront_ProductVariantSortKeys {
  /** Sort by the `id` value. */
  Id = 'ID',
  /** Sort by the `position` value. */
  Position = 'POSITION',
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   */
  Relevance = 'RELEVANCE',
  /** Sort by the `sku` value. */
  Sku = 'SKU',
  /** Sort by the `title` value. */
  Title = 'TITLE'
}

/** SEO information. */
export type ShopifyStorefront_Seo = {
  __typename?: 'ShopifyStorefront_SEO';
  /** The meta description. */
  description?: Maybe<Scalars['String']>;
  /** The SEO title. */
  title?: Maybe<Scalars['String']>;
};

/**
 * Script discount applications capture the intentions of a discount that
 * was created by a Shopify Script.
 */
export type ShopifyStorefront_ScriptDiscountApplication = ShopifyStorefront_DiscountApplication & {
  __typename?: 'ShopifyStorefront_ScriptDiscountApplication';
  /** The method by which the discount's value is allocated to its entitled items. */
  allocationMethod: ShopifyStorefront_DiscountApplicationAllocationMethod;
  /** Which lines of targetType that the discount is allocated over. */
  targetSelection: ShopifyStorefront_DiscountApplicationTargetSelection;
  /** The type of line that the discount is applicable towards. */
  targetType: ShopifyStorefront_DiscountApplicationTargetType;
  /** The title of the application as defined by the Script. */
  title: Scalars['String'];
  /** The value of the discount application. */
  value: ShopifyStorefront_PricingValue;
};

/**
 * Properties used by customers to select a product variant.
 * Products can have multiple options, like different sizes or colors.
 */
export type ShopifyStorefront_SelectedOption = {
  __typename?: 'ShopifyStorefront_SelectedOption';
  /** The product option’s name. */
  name: Scalars['String'];
  /** The product option’s value. */
  value: Scalars['String'];
};

/** Specifies the input fields required for a selected option. */
export type ShopifyStorefront_SelectedOptionInput = {
  /** The product option’s name. */
  name: Scalars['String'];
  /** The product option’s value. */
  value: Scalars['String'];
};

/** Represents how products and variants can be sold and purchased. */
export type ShopifyStorefront_SellingPlan = {
  __typename?: 'ShopifyStorefront_SellingPlan';
  /** The initial payment due for the purchase. */
  checkoutCharge: ShopifyStorefront_SellingPlanCheckoutCharge;
  /** The description of the selling plan. */
  description?: Maybe<Scalars['String']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The name of the selling plan. For example, '6 weeks of prepaid granola, delivered weekly'. */
  name: Scalars['String'];
  /** The selling plan options available in the drop-down list in the storefront. For example, 'Delivery every week' or 'Delivery every 2 weeks' specifies the delivery frequency options for the product. Individual selling plans contribute their options to the associated selling plan group. For example, a selling plan group might have an option called `option1: Delivery every`. One selling plan in that group could contribute `option1: 2 weeks` with the pricing for that option, and another selling plan could contribute `option1: 4 weeks`, with different pricing. */
  options: Array<ShopifyStorefront_SellingPlanOption>;
  /** The price adjustments that a selling plan makes when a variant is purchased with a selling plan. */
  priceAdjustments: Array<ShopifyStorefront_SellingPlanPriceAdjustment>;
  /** Whether purchasing the selling plan will result in multiple deliveries. */
  recurringDeliveries: Scalars['Boolean'];
};

/** Represents an association between a variant and a selling plan. Selling plan allocations describe the options offered for each variant, and the price of the variant when purchased with a selling plan. */
export type ShopifyStorefront_SellingPlanAllocation = {
  __typename?: 'ShopifyStorefront_SellingPlanAllocation';
  /** The checkout charge amount due for the purchase. */
  checkoutChargeAmount: ShopifyStorefront_MoneyV2;
  /** A list of price adjustments, with a maximum of two. When there are two, the first price adjustment goes into effect at the time of purchase, while the second one starts after a certain number of orders. A price adjustment represents how a selling plan affects pricing when a variant is purchased with a selling plan. Prices display in the customer's currency if the shop is configured for it. */
  priceAdjustments: Array<ShopifyStorefront_SellingPlanAllocationPriceAdjustment>;
  /** The remaining balance charge amount due for the purchase. */
  remainingBalanceChargeAmount: ShopifyStorefront_MoneyV2;
  /** A representation of how products and variants can be sold and purchased. For example, an individual selling plan could be '6 weeks of prepaid granola, delivered weekly'. */
  sellingPlan: ShopifyStorefront_SellingPlan;
};

/** An auto-generated type for paginating through multiple SellingPlanAllocations. */
export type ShopifyStorefront_SellingPlanAllocationConnection = {
  __typename?: 'ShopifyStorefront_SellingPlanAllocationConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_SellingPlanAllocationEdge>;
  /** A list of the nodes contained in SellingPlanAllocationEdge. */
  nodes: Array<ShopifyStorefront_SellingPlanAllocation>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one SellingPlanAllocation and a cursor during pagination. */
export type ShopifyStorefront_SellingPlanAllocationEdge = {
  __typename?: 'ShopifyStorefront_SellingPlanAllocationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of SellingPlanAllocationEdge. */
  node: ShopifyStorefront_SellingPlanAllocation;
};

/** The resulting prices for variants when they're purchased with a specific selling plan. */
export type ShopifyStorefront_SellingPlanAllocationPriceAdjustment = {
  __typename?: 'ShopifyStorefront_SellingPlanAllocationPriceAdjustment';
  /** The price of the variant when it's purchased without a selling plan for the same number of deliveries. For example, if a customer purchases 6 deliveries of $10.00 granola separately, then the price is 6 x $10.00 = $60.00. */
  compareAtPrice: ShopifyStorefront_MoneyV2;
  /** The effective price for a single delivery. For example, for a prepaid subscription plan that includes 6 deliveries at the price of $48.00, the per delivery price is $8.00. */
  perDeliveryPrice: ShopifyStorefront_MoneyV2;
  /** The price of the variant when it's purchased with a selling plan For example, for a prepaid subscription plan that includes 6 deliveries of $10.00 granola, where the customer gets 20% off, the price is 6 x $10.00 x 0.80 = $48.00. */
  price: ShopifyStorefront_MoneyV2;
  /** The resulting price per unit for the variant associated with the selling plan. If the variant isn't sold by quantity or measurement, then this field returns `null`. */
  unitPrice?: Maybe<ShopifyStorefront_MoneyV2>;
};

/** The initial payment due for the purchase. */
export type ShopifyStorefront_SellingPlanCheckoutCharge = {
  __typename?: 'ShopifyStorefront_SellingPlanCheckoutCharge';
  /** The charge type for the checkout charge. */
  type: ShopifyStorefront_SellingPlanCheckoutChargeType;
  /** The charge value for the checkout charge. */
  value: ShopifyStorefront_SellingPlanCheckoutChargeValue;
};

/** The percentage value of the price used for checkout charge. */
export type ShopifyStorefront_SellingPlanCheckoutChargePercentageValue = {
  __typename?: 'ShopifyStorefront_SellingPlanCheckoutChargePercentageValue';
  /** The percentage value of the price used for checkout charge. */
  percentage: Scalars['Float'];
};

/** The checkout charge when the full amount isn't charged at checkout. */
export enum ShopifyStorefront_SellingPlanCheckoutChargeType {
  /** The checkout charge is a percentage of the product or variant price. */
  Percentage = 'PERCENTAGE',
  /** The checkout charge is a fixed price amount. */
  Price = 'PRICE'
}

/** The portion of the price to be charged at checkout. */
export type ShopifyStorefront_SellingPlanCheckoutChargeValue = ShopifyStorefront_MoneyV2 | ShopifyStorefront_SellingPlanCheckoutChargePercentageValue;

/** An auto-generated type for paginating through multiple SellingPlans. */
export type ShopifyStorefront_SellingPlanConnection = {
  __typename?: 'ShopifyStorefront_SellingPlanConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_SellingPlanEdge>;
  /** A list of the nodes contained in SellingPlanEdge. */
  nodes: Array<ShopifyStorefront_SellingPlan>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one SellingPlan and a cursor during pagination. */
export type ShopifyStorefront_SellingPlanEdge = {
  __typename?: 'ShopifyStorefront_SellingPlanEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of SellingPlanEdge. */
  node: ShopifyStorefront_SellingPlan;
};

/** A fixed amount that's deducted from the original variant price. For example, $10.00 off. */
export type ShopifyStorefront_SellingPlanFixedAmountPriceAdjustment = {
  __typename?: 'ShopifyStorefront_SellingPlanFixedAmountPriceAdjustment';
  /** The money value of the price adjustment. */
  adjustmentAmount: ShopifyStorefront_MoneyV2;
};

/** A fixed price adjustment for a variant that's purchased with a selling plan. */
export type ShopifyStorefront_SellingPlanFixedPriceAdjustment = {
  __typename?: 'ShopifyStorefront_SellingPlanFixedPriceAdjustment';
  /** A new price of the variant when it's purchased with the selling plan. */
  price: ShopifyStorefront_MoneyV2;
};

/** Represents a selling method. For example, 'Subscribe and save' is a selling method where customers pay for goods or services per delivery. A selling plan group contains individual selling plans. */
export type ShopifyStorefront_SellingPlanGroup = {
  __typename?: 'ShopifyStorefront_SellingPlanGroup';
  /** A display friendly name for the app that created the selling plan group. */
  appName?: Maybe<Scalars['String']>;
  /** The name of the selling plan group. */
  name: Scalars['String'];
  /** Represents the selling plan options available in the drop-down list in the storefront. For example, 'Delivery every week' or 'Delivery every 2 weeks' specifies the delivery frequency options for the product. */
  options: Array<ShopifyStorefront_SellingPlanGroupOption>;
  /** A list of selling plans in a selling plan group. A selling plan is a representation of how products and variants can be sold and purchased. For example, an individual selling plan could be '6 weeks of prepaid granola, delivered weekly'. */
  sellingPlans: ShopifyStorefront_SellingPlanConnection;
};


/** Represents a selling method. For example, 'Subscribe and save' is a selling method where customers pay for goods or services per delivery. A selling plan group contains individual selling plans. */
export type ShopifyStorefront_SellingPlanGroupSellingPlansArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  reverse?: InputMaybe<Scalars['Boolean']>;
};

/** An auto-generated type for paginating through multiple SellingPlanGroups. */
export type ShopifyStorefront_SellingPlanGroupConnection = {
  __typename?: 'ShopifyStorefront_SellingPlanGroupConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_SellingPlanGroupEdge>;
  /** A list of the nodes contained in SellingPlanGroupEdge. */
  nodes: Array<ShopifyStorefront_SellingPlanGroup>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one SellingPlanGroup and a cursor during pagination. */
export type ShopifyStorefront_SellingPlanGroupEdge = {
  __typename?: 'ShopifyStorefront_SellingPlanGroupEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of SellingPlanGroupEdge. */
  node: ShopifyStorefront_SellingPlanGroup;
};

/**
 * Represents an option on a selling plan group that's available in the drop-down list in the storefront.
 *
 * Individual selling plans contribute their options to the associated selling plan group. For example, a selling plan group might have an option called `option1: Delivery every`. One selling plan in that group could contribute `option1: 2 weeks` with the pricing for that option, and another selling plan could contribute `option1: 4 weeks`, with different pricing.
 */
export type ShopifyStorefront_SellingPlanGroupOption = {
  __typename?: 'ShopifyStorefront_SellingPlanGroupOption';
  /** The name of the option. For example, 'Delivery every'. */
  name: Scalars['String'];
  /** The values for the options specified by the selling plans in the selling plan group. For example, '1 week', '2 weeks', '3 weeks'. */
  values: Array<Scalars['String']>;
};

/** An option provided by a Selling Plan. */
export type ShopifyStorefront_SellingPlanOption = {
  __typename?: 'ShopifyStorefront_SellingPlanOption';
  /** The name of the option (ie "Delivery every"). */
  name?: Maybe<Scalars['String']>;
  /** The value of the option (ie "Month"). */
  value?: Maybe<Scalars['String']>;
};

/** A percentage amount that's deducted from the original variant price. For example, 10% off. */
export type ShopifyStorefront_SellingPlanPercentagePriceAdjustment = {
  __typename?: 'ShopifyStorefront_SellingPlanPercentagePriceAdjustment';
  /** The percentage value of the price adjustment. */
  adjustmentPercentage: Scalars['Int'];
};

/** Represents by how much the price of a variant associated with a selling plan is adjusted. Each variant can have up to two price adjustments. If a variant has multiple price adjustments, then the first price adjustment applies when the variant is initially purchased. The second price adjustment applies after a certain number of orders (specified by the `orderCount` field) are made. If a selling plan doesn't have any price adjustments, then the unadjusted price of the variant is the effective price. */
export type ShopifyStorefront_SellingPlanPriceAdjustment = {
  __typename?: 'ShopifyStorefront_SellingPlanPriceAdjustment';
  /** The type of price adjustment. An adjustment value can have one of three types: percentage, amount off, or a new price. */
  adjustmentValue: ShopifyStorefront_SellingPlanPriceAdjustmentValue;
  /** The number of orders that the price adjustment applies to. If the price adjustment always applies, then this field is `null`. */
  orderCount?: Maybe<Scalars['Int']>;
};

/** Represents by how much the price of a variant associated with a selling plan is adjusted. Each variant can have up to two price adjustments. */
export type ShopifyStorefront_SellingPlanPriceAdjustmentValue = ShopifyStorefront_SellingPlanFixedAmountPriceAdjustment | ShopifyStorefront_SellingPlanFixedPriceAdjustment | ShopifyStorefront_SellingPlanPercentagePriceAdjustment;

/** A shipping rate to be applied to a checkout. */
export type ShopifyStorefront_ShippingRate = {
  __typename?: 'ShopifyStorefront_ShippingRate';
  /** Human-readable unique identifier for this shipping rate. */
  handle: Scalars['String'];
  /** Price of this shipping rate. */
  price: ShopifyStorefront_MoneyV2;
  /**
   * Price of this shipping rate.
   * @deprecated Use `price` instead.
   */
  priceV2: ShopifyStorefront_MoneyV2;
  /** Title of this shipping rate. */
  title: Scalars['String'];
};

/** Shop represents a collection of the general settings and information about the shop. */
export type ShopifyStorefront_Shop = ShopifyStorefront_HasMetafields & ShopifyStorefront_Node & {
  __typename?: 'ShopifyStorefront_Shop';
  /** The shop's branding configuration. */
  brand?: Maybe<ShopifyStorefront_Brand>;
  /** A description of the shop. */
  description?: Maybe<Scalars['String']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** Returns a metafield found by namespace and key. */
  metafield?: Maybe<ShopifyStorefront_Metafield>;
  /** The metafields associated with the resource matching the supplied list of namespaces and keys. */
  metafields: Array<Maybe<ShopifyStorefront_Metafield>>;
  /** A string representing the way currency is formatted when the currency isn’t specified. */
  moneyFormat: Scalars['String'];
  /** The shop’s name. */
  name: Scalars['String'];
  /** Settings related to payments. */
  paymentSettings: ShopifyStorefront_PaymentSettings;
  /** The primary domain of the shop’s Online Store. */
  primaryDomain: ShopifyStorefront_Domain;
  /** The shop’s privacy policy. */
  privacyPolicy?: Maybe<ShopifyStorefront_ShopPolicy>;
  /** The shop’s refund policy. */
  refundPolicy?: Maybe<ShopifyStorefront_ShopPolicy>;
  /** The shop’s shipping policy. */
  shippingPolicy?: Maybe<ShopifyStorefront_ShopPolicy>;
  /** Countries that the shop ships to. */
  shipsToCountries: Array<ShopifyStorefront_CountryCode>;
  /** The shop’s subscription policy. */
  subscriptionPolicy?: Maybe<ShopifyStorefront_ShopPolicyWithDefault>;
  /** The shop’s terms of service. */
  termsOfService?: Maybe<ShopifyStorefront_ShopPolicy>;
};


/** Shop represents a collection of the general settings and information about the shop. */
export type ShopifyStorefront_ShopMetafieldArgs = {
  key: Scalars['String'];
  namespace: Scalars['String'];
};


/** Shop represents a collection of the general settings and information about the shop. */
export type ShopifyStorefront_ShopMetafieldsArgs = {
  identifiers: Array<ShopifyStorefront_HasMetafieldsIdentifier>;
};

/** Policy that a merchant has configured for their store, such as their refund or privacy policy. */
export type ShopifyStorefront_ShopPolicy = ShopifyStorefront_Node & {
  __typename?: 'ShopifyStorefront_ShopPolicy';
  /** Policy text, maximum size of 64kb. */
  body: Scalars['String'];
  /** Policy’s handle. */
  handle: Scalars['String'];
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** Policy’s title. */
  title: Scalars['String'];
  /** Public URL to the policy. */
  url: Scalars['ShopifyStorefront_URL'];
};

/**
 * A policy for the store that comes with a default value, such as a subscription policy.
 * If the merchant hasn't configured a policy for their store, then the policy will return the default value.
 * Otherwise, the policy will return the merchant-configured value.
 */
export type ShopifyStorefront_ShopPolicyWithDefault = {
  __typename?: 'ShopifyStorefront_ShopPolicyWithDefault';
  /** The text of the policy. Maximum size: 64KB. */
  body: Scalars['String'];
  /** The handle of the policy. */
  handle: Scalars['String'];
  /** The unique identifier of the policy. A default policy doesn't have an ID. */
  id?: Maybe<Scalars['ID']>;
  /** The title of the policy. */
  title: Scalars['String'];
  /** Public URL to the policy. */
  url: Scalars['ShopifyStorefront_URL'];
};

/**
 * The availability of a product variant at a particular location.
 * Local pick-up must be enabled in the  store's shipping settings, otherwise this will return an empty result.
 */
export type ShopifyStorefront_StoreAvailability = {
  __typename?: 'ShopifyStorefront_StoreAvailability';
  /** Whether the product variant is in-stock at this location. */
  available: Scalars['Boolean'];
  /** The location where this product variant is stocked at. */
  location: ShopifyStorefront_Location;
  /** Returns the estimated amount of time it takes for pickup to be ready (Example: Usually ready in 24 hours). */
  pickUpTime: Scalars['String'];
};

/** An auto-generated type for paginating through multiple StoreAvailabilities. */
export type ShopifyStorefront_StoreAvailabilityConnection = {
  __typename?: 'ShopifyStorefront_StoreAvailabilityConnection';
  /** A list of edges. */
  edges: Array<ShopifyStorefront_StoreAvailabilityEdge>;
  /** A list of the nodes contained in StoreAvailabilityEdge. */
  nodes: Array<ShopifyStorefront_StoreAvailability>;
  /** Information to aid in pagination. */
  pageInfo: ShopifyStorefront_PageInfo;
};

/** An auto-generated type which holds one StoreAvailability and a cursor during pagination. */
export type ShopifyStorefront_StoreAvailabilityEdge = {
  __typename?: 'ShopifyStorefront_StoreAvailabilityEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of StoreAvailabilityEdge. */
  node: ShopifyStorefront_StoreAvailability;
};

/** An object representing exchange of money for a product or service. */
export type ShopifyStorefront_Transaction = {
  __typename?: 'ShopifyStorefront_Transaction';
  /** The amount of money that the transaction was for. */
  amount: ShopifyStorefront_MoneyV2;
  /**
   * The amount of money that the transaction was for.
   * @deprecated Use `amount` instead.
   */
  amountV2: ShopifyStorefront_MoneyV2;
  /** The kind of the transaction. */
  kind: ShopifyStorefront_TransactionKind;
  /**
   * The status of the transaction.
   * @deprecated Use `statusV2` instead.
   */
  status: ShopifyStorefront_TransactionStatus;
  /** The status of the transaction. */
  statusV2?: Maybe<ShopifyStorefront_TransactionStatus>;
  /** Whether the transaction was done in test mode or not. */
  test: Scalars['Boolean'];
};

/** The different kinds of order transactions. */
export enum ShopifyStorefront_TransactionKind {
  /**
   * An amount reserved against the cardholder's funding source.
   * Money does not change hands until the authorization is captured.
   */
  Authorization = 'AUTHORIZATION',
  /** A transfer of the money that was reserved during the authorization stage. */
  Capture = 'CAPTURE',
  /** Money returned to the customer when they have paid too much. */
  Change = 'CHANGE',
  /** An authorization for a payment taken with an EMV credit card reader. */
  EmvAuthorization = 'EMV_AUTHORIZATION',
  /** An authorization and capture performed together in a single step. */
  Sale = 'SALE'
}

/** Transaction statuses describe the status of a transaction. */
export enum ShopifyStorefront_TransactionStatus {
  /** There was an error while processing the transaction. */
  Error = 'ERROR',
  /** The transaction failed. */
  Failure = 'FAILURE',
  /** The transaction is pending. */
  Pending = 'PENDING',
  /** The transaction succeeded. */
  Success = 'SUCCESS'
}

/** The measurement used to calculate a unit price for a product variant (e.g. $9.99 / 100ml). */
export type ShopifyStorefront_UnitPriceMeasurement = {
  __typename?: 'ShopifyStorefront_UnitPriceMeasurement';
  /** The type of unit of measurement for the unit price measurement. */
  measuredType?: Maybe<ShopifyStorefront_UnitPriceMeasurementMeasuredType>;
  /** The quantity unit for the unit price measurement. */
  quantityUnit?: Maybe<ShopifyStorefront_UnitPriceMeasurementMeasuredUnit>;
  /** The quantity value for the unit price measurement. */
  quantityValue: Scalars['Float'];
  /** The reference unit for the unit price measurement. */
  referenceUnit?: Maybe<ShopifyStorefront_UnitPriceMeasurementMeasuredUnit>;
  /** The reference value for the unit price measurement. */
  referenceValue: Scalars['Int'];
};

/** The accepted types of unit of measurement. */
export enum ShopifyStorefront_UnitPriceMeasurementMeasuredType {
  /** Unit of measurements representing areas. */
  Area = 'AREA',
  /** Unit of measurements representing lengths. */
  Length = 'LENGTH',
  /** Unit of measurements representing volumes. */
  Volume = 'VOLUME',
  /** Unit of measurements representing weights. */
  Weight = 'WEIGHT'
}

/** The valid units of measurement for a unit price measurement. */
export enum ShopifyStorefront_UnitPriceMeasurementMeasuredUnit {
  /** 100 centiliters equals 1 liter. */
  Cl = 'CL',
  /** 100 centimeters equals 1 meter. */
  Cm = 'CM',
  /** Metric system unit of weight. */
  G = 'G',
  /** 1 kilogram equals 1000 grams. */
  Kg = 'KG',
  /** Metric system unit of volume. */
  L = 'L',
  /** Metric system unit of length. */
  M = 'M',
  /** Metric system unit of area. */
  M2 = 'M2',
  /** 1 cubic meter equals 1000 liters. */
  M3 = 'M3',
  /** 1000 milligrams equals 1 gram. */
  Mg = 'MG',
  /** 1000 milliliters equals 1 liter. */
  Ml = 'ML',
  /** 1000 millimeters equals 1 meter. */
  Mm = 'MM'
}

/** A redirect on the online store. */
export type ShopifyStorefront_UrlRedirect = ShopifyStorefront_Node & {
  __typename?: 'ShopifyStorefront_UrlRedirect';
  /** The ID of the URL redirect. */
  id: Scalars['ID'];
  /** The old path to be redirected from. When the user visits this path, they'll be redirected to the target location. */
  path: Scalars['String'];
  /** The target location where the user will be redirected to. */
  target: Scalars['String'];
};

/** A filter used to view a subset of products in a collection matching a specific variant option. */
export type ShopifyStorefront_VariantOptionFilter = {
  /** The name of the variant option to filter on. */
  name: Scalars['String'];
  /** The value of the variant option to filter on. */
  value: Scalars['String'];
};

/** Represents a Shopify hosted video. */
export type ShopifyStorefront_Video = ShopifyStorefront_Media & ShopifyStorefront_Node & {
  __typename?: 'ShopifyStorefront_Video';
  /** A word or phrase to share the nature or contents of a media. */
  alt?: Maybe<Scalars['String']>;
  /** A globally-unique identifier. */
  id: Scalars['ID'];
  /** The media content type. */
  mediaContentType: ShopifyStorefront_MediaContentType;
  /** The preview image for the media. */
  previewImage?: Maybe<ShopifyStorefront_Image>;
  /** The sources for a video. */
  sources: Array<ShopifyStorefront_VideoSource>;
};

/** Represents a source for a Shopify hosted video. */
export type ShopifyStorefront_VideoSource = {
  __typename?: 'ShopifyStorefront_VideoSource';
  /** The format of the video source. */
  format: Scalars['String'];
  /** The height of the video. */
  height: Scalars['Int'];
  /** The video MIME type. */
  mimeType: Scalars['String'];
  /** The URL of the video. */
  url: Scalars['String'];
  /** The width of the video. */
  width: Scalars['Int'];
};

/** Units of measurement for weight. */
export enum ShopifyStorefront_WeightUnit {
  /** Metric system unit of mass. */
  Grams = 'GRAMS',
  /** 1 kilogram equals 1000 grams. */
  Kilograms = 'KILOGRAMS',
  /** Imperial system unit of mass. */
  Ounces = 'OUNCES',
  /** 1 pound equals 16 ounces. */
  Pounds = 'POUNDS'
}

export type SocialMediaCtaLarge = Node & {
  __typename?: 'SocialMediaCtaLarge';
  adminTitle?: Maybe<Scalars['String']>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  ctaText?: Maybe<Scalars['String']>;
  /** Get the document in other stages */
  documentInStages: Array<SocialMediaCtaLarge>;
  fullWidthTemplates: Array<CmsPage>;
  handle?: Maybe<Scalars['String']>;
  /** List of SocialMediaCtaLarge versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  imageGrid: Array<Asset>;
  platformLinks: Array<SocialMediaCtaLargeplatformLinksUnion>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type SocialMediaCtaLargeCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SocialMediaCtaLargeDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type SocialMediaCtaLargeFullWidthTemplatesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<CmsPageWhereInput>;
};


export type SocialMediaCtaLargeHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type SocialMediaCtaLargeImageGridArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetWhereInput>;
};


export type SocialMediaCtaLargePlatformLinksArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
};


export type SocialMediaCtaLargePublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type SocialMediaCtaLargeScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type SocialMediaCtaLargeUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type SocialMediaCtaLargeConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: SocialMediaCtaLargeWhereUniqueInput;
};

/** A connection to a list of items. */
export type SocialMediaCtaLargeConnection = {
  __typename?: 'SocialMediaCtaLargeConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<SocialMediaCtaLargeEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type SocialMediaCtaLargeCreateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  ctaText?: InputMaybe<Scalars['String']>;
  fullWidthTemplates?: InputMaybe<CmsPageCreateManyInlineInput>;
  handle?: InputMaybe<Scalars['String']>;
  imageGrid?: InputMaybe<AssetCreateManyInlineInput>;
  platformLinks?: InputMaybe<SocialMediaCtaLargeplatformLinksUnionCreateManyInlineInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type SocialMediaCtaLargeCreateManyInlineInput = {
  /** Connect multiple existing SocialMediaCtaLarge documents */
  connect?: InputMaybe<Array<SocialMediaCtaLargeWhereUniqueInput>>;
  /** Create and connect multiple existing SocialMediaCtaLarge documents */
  create?: InputMaybe<Array<SocialMediaCtaLargeCreateInput>>;
};

export type SocialMediaCtaLargeCreateOneInlineInput = {
  /** Connect one existing SocialMediaCtaLarge document */
  connect?: InputMaybe<SocialMediaCtaLargeWhereUniqueInput>;
  /** Create and connect one SocialMediaCtaLarge document */
  create?: InputMaybe<SocialMediaCtaLargeCreateInput>;
};

/** An edge in a connection. */
export type SocialMediaCtaLargeEdge = {
  __typename?: 'SocialMediaCtaLargeEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: SocialMediaCtaLarge;
};

/** Identifies documents */
export type SocialMediaCtaLargeManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SocialMediaCtaLargeWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SocialMediaCtaLargeWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SocialMediaCtaLargeWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  ctaText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  ctaText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  ctaText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  ctaText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  ctaText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  ctaText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  ctaText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  ctaText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  ctaText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  ctaText_starts_with?: InputMaybe<Scalars['String']>;
  documentInStages_every?: InputMaybe<SocialMediaCtaLargeWhereStageInput>;
  documentInStages_none?: InputMaybe<SocialMediaCtaLargeWhereStageInput>;
  documentInStages_some?: InputMaybe<SocialMediaCtaLargeWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  handle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  handle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  handle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  handle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  handle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  handle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  handle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  handle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  handle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  handle_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  imageGrid_every?: InputMaybe<AssetWhereInput>;
  imageGrid_none?: InputMaybe<AssetWhereInput>;
  imageGrid_some?: InputMaybe<AssetWhereInput>;
  /** All values in which the union is empty. */
  platformLinks_empty?: InputMaybe<Scalars['Boolean']>;
  /** Matches if the modular component contains at least one connection to the item provided to the filter */
  platformLinks_some?: InputMaybe<SocialMediaCtaLargeplatformLinksUnionWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum SocialMediaCtaLargeOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CtaTextAsc = 'ctaText_ASC',
  CtaTextDesc = 'ctaText_DESC',
  HandleAsc = 'handle_ASC',
  HandleDesc = 'handle_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type SocialMediaCtaLargeUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  ctaText?: InputMaybe<Scalars['String']>;
  fullWidthTemplates?: InputMaybe<CmsPageUpdateManyInlineInput>;
  handle?: InputMaybe<Scalars['String']>;
  imageGrid?: InputMaybe<AssetUpdateManyInlineInput>;
  platformLinks?: InputMaybe<SocialMediaCtaLargeplatformLinksUnionUpdateManyInlineInput>;
};

export type SocialMediaCtaLargeUpdateManyInlineInput = {
  /** Connect multiple existing SocialMediaCtaLarge documents */
  connect?: InputMaybe<Array<SocialMediaCtaLargeConnectInput>>;
  /** Create and connect multiple SocialMediaCtaLarge documents */
  create?: InputMaybe<Array<SocialMediaCtaLargeCreateInput>>;
  /** Delete multiple SocialMediaCtaLarge documents */
  delete?: InputMaybe<Array<SocialMediaCtaLargeWhereUniqueInput>>;
  /** Disconnect multiple SocialMediaCtaLarge documents */
  disconnect?: InputMaybe<Array<SocialMediaCtaLargeWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing SocialMediaCtaLarge documents */
  set?: InputMaybe<Array<SocialMediaCtaLargeWhereUniqueInput>>;
  /** Update multiple SocialMediaCtaLarge documents */
  update?: InputMaybe<Array<SocialMediaCtaLargeUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple SocialMediaCtaLarge documents */
  upsert?: InputMaybe<Array<SocialMediaCtaLargeUpsertWithNestedWhereUniqueInput>>;
};

export type SocialMediaCtaLargeUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  ctaText?: InputMaybe<Scalars['String']>;
  handle?: InputMaybe<Scalars['String']>;
};

export type SocialMediaCtaLargeUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: SocialMediaCtaLargeUpdateManyInput;
  /** Document search */
  where: SocialMediaCtaLargeWhereInput;
};

export type SocialMediaCtaLargeUpdateOneInlineInput = {
  /** Connect existing SocialMediaCtaLarge document */
  connect?: InputMaybe<SocialMediaCtaLargeWhereUniqueInput>;
  /** Create and connect one SocialMediaCtaLarge document */
  create?: InputMaybe<SocialMediaCtaLargeCreateInput>;
  /** Delete currently connected SocialMediaCtaLarge document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected SocialMediaCtaLarge document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single SocialMediaCtaLarge document */
  update?: InputMaybe<SocialMediaCtaLargeUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SocialMediaCtaLarge document */
  upsert?: InputMaybe<SocialMediaCtaLargeUpsertWithNestedWhereUniqueInput>;
};

export type SocialMediaCtaLargeUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: SocialMediaCtaLargeUpdateInput;
  /** Unique document search */
  where: SocialMediaCtaLargeWhereUniqueInput;
};

export type SocialMediaCtaLargeUpsertInput = {
  /** Create document if it didn't exist */
  create: SocialMediaCtaLargeCreateInput;
  /** Update document if it exists */
  update: SocialMediaCtaLargeUpdateInput;
};

export type SocialMediaCtaLargeUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: SocialMediaCtaLargeUpsertInput;
  /** Unique document search */
  where: SocialMediaCtaLargeWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type SocialMediaCtaLargeWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type SocialMediaCtaLargeWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SocialMediaCtaLargeWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SocialMediaCtaLargeWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SocialMediaCtaLargeWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  ctaText?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  ctaText_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  ctaText_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  ctaText_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  ctaText_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  ctaText_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  ctaText_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  ctaText_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  ctaText_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  ctaText_starts_with?: InputMaybe<Scalars['String']>;
  documentInStages_every?: InputMaybe<SocialMediaCtaLargeWhereStageInput>;
  documentInStages_none?: InputMaybe<SocialMediaCtaLargeWhereStageInput>;
  documentInStages_some?: InputMaybe<SocialMediaCtaLargeWhereStageInput>;
  fullWidthTemplates_every?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_none?: InputMaybe<CmsPageWhereInput>;
  fullWidthTemplates_some?: InputMaybe<CmsPageWhereInput>;
  handle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  handle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  handle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  handle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  handle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  handle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  handle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  handle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  handle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  handle_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  imageGrid_every?: InputMaybe<AssetWhereInput>;
  imageGrid_none?: InputMaybe<AssetWhereInput>;
  imageGrid_some?: InputMaybe<AssetWhereInput>;
  /** All values in which the union is empty. */
  platformLinks_empty?: InputMaybe<Scalars['Boolean']>;
  /** Matches if the modular component contains at least one connection to the item provided to the filter */
  platformLinks_some?: InputMaybe<SocialMediaCtaLargeplatformLinksUnionWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type SocialMediaCtaLargeWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<SocialMediaCtaLargeWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<SocialMediaCtaLargeWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<SocialMediaCtaLargeWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<SocialMediaCtaLargeWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References SocialMediaCtaLarge record uniquely */
export type SocialMediaCtaLargeWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type SocialMediaCtaLargeplatformLinksUnion = LinkIcon;

export type SocialMediaCtaLargeplatformLinksUnionConnectInput = {
  LinkIcon?: InputMaybe<LinkIconConnectInput>;
};

export type SocialMediaCtaLargeplatformLinksUnionCreateInput = {
  LinkIcon?: InputMaybe<LinkIconCreateInput>;
};

export type SocialMediaCtaLargeplatformLinksUnionCreateManyInlineInput = {
  /** Create and connect multiple existing SocialMediaCtaLargeplatformLinksUnion documents */
  create?: InputMaybe<Array<SocialMediaCtaLargeplatformLinksUnionCreateInput>>;
};

export type SocialMediaCtaLargeplatformLinksUnionCreateOneInlineInput = {
  /** Create and connect one SocialMediaCtaLargeplatformLinksUnion document */
  create?: InputMaybe<SocialMediaCtaLargeplatformLinksUnionCreateInput>;
};

export type SocialMediaCtaLargeplatformLinksUnionCreateWithPositionInput = {
  LinkIcon?: InputMaybe<LinkIconCreateWithPositionInput>;
};

export type SocialMediaCtaLargeplatformLinksUnionUpdateInput = {
  LinkIcon?: InputMaybe<LinkIconUpdateInput>;
};

export type SocialMediaCtaLargeplatformLinksUnionUpdateManyInlineInput = {
  /** Create and connect multiple SocialMediaCtaLargeplatformLinksUnion component instances */
  create?: InputMaybe<Array<SocialMediaCtaLargeplatformLinksUnionCreateWithPositionInput>>;
  /** Delete multiple SocialMediaCtaLargeplatformLinksUnion documents */
  delete?: InputMaybe<Array<SocialMediaCtaLargeplatformLinksUnionWhereUniqueInput>>;
  /** Update multiple SocialMediaCtaLargeplatformLinksUnion component instances */
  update?: InputMaybe<Array<SocialMediaCtaLargeplatformLinksUnionUpdateWithNestedWhereUniqueAndPositionInput>>;
  /** Upsert multiple SocialMediaCtaLargeplatformLinksUnion component instances */
  upsert?: InputMaybe<Array<SocialMediaCtaLargeplatformLinksUnionUpsertWithNestedWhereUniqueAndPositionInput>>;
};

export type SocialMediaCtaLargeplatformLinksUnionUpdateManyWithNestedWhereInput = {
  LinkIcon?: InputMaybe<LinkIconUpdateManyWithNestedWhereInput>;
};

export type SocialMediaCtaLargeplatformLinksUnionUpdateOneInlineInput = {
  /** Create and connect one SocialMediaCtaLargeplatformLinksUnion document */
  create?: InputMaybe<SocialMediaCtaLargeplatformLinksUnionCreateInput>;
  /** Delete currently connected SocialMediaCtaLargeplatformLinksUnion document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Update single SocialMediaCtaLargeplatformLinksUnion document */
  update?: InputMaybe<SocialMediaCtaLargeplatformLinksUnionUpdateWithNestedWhereUniqueInput>;
  /** Upsert single SocialMediaCtaLargeplatformLinksUnion document */
  upsert?: InputMaybe<SocialMediaCtaLargeplatformLinksUnionUpsertWithNestedWhereUniqueInput>;
};

export type SocialMediaCtaLargeplatformLinksUnionUpdateWithNestedWhereUniqueAndPositionInput = {
  LinkIcon?: InputMaybe<LinkIconUpdateWithNestedWhereUniqueAndPositionInput>;
};

export type SocialMediaCtaLargeplatformLinksUnionUpdateWithNestedWhereUniqueInput = {
  LinkIcon?: InputMaybe<LinkIconUpdateWithNestedWhereUniqueInput>;
};

export type SocialMediaCtaLargeplatformLinksUnionUpsertWithNestedWhereUniqueAndPositionInput = {
  LinkIcon?: InputMaybe<LinkIconUpsertWithNestedWhereUniqueAndPositionInput>;
};

export type SocialMediaCtaLargeplatformLinksUnionUpsertWithNestedWhereUniqueInput = {
  LinkIcon?: InputMaybe<LinkIconUpsertWithNestedWhereUniqueInput>;
};

export type SocialMediaCtaLargeplatformLinksUnionWhereInput = {
  LinkIcon?: InputMaybe<LinkIconWhereInput>;
};

export type SocialMediaCtaLargeplatformLinksUnionWhereUniqueInput = {
  LinkIcon?: InputMaybe<LinkIconWhereUniqueInput>;
};

/** Stage system enumeration */
export enum Stage {
  /** The Draft is the default stage for all your content. */
  Draft = 'DRAFT',
  /** The Published stage is where you can publish your content to. */
  Published = 'PUBLISHED'
}

export enum SystemDateTimeFieldVariation {
  Base = 'BASE',
  Combined = 'COMBINED',
  Localization = 'LOCALIZATION'
}

export enum TextAlignment {
  Center = 'center',
  Left = 'left',
  Right = 'right'
}

export enum TextLayout {
  OneColumn = 'one_column',
  TwoColumn = 'two_column'
}

export enum Theme {
  Link = 'link',
  Primary = 'primary',
  Secondary = 'secondary',
  Tertiary = 'tertiary',
  Text = 'text'
}

export enum TilesAlignment {
  Bumpy = 'bumpy',
  Straight = 'straight'
}

export enum TitleHeadingTag {
  H1 = 'h1',
  H2 = 'h2'
}

export enum TitleOrientation {
  Horizontal = 'horizontal',
  Vertical = 'vertical',
  VerticalLeft = 'verticalLeft'
}

export type UnpublishLocaleInput = {
  /** Locales to unpublish */
  locale: Locale;
  /** Stages to unpublish selected locales from */
  stages: Array<Stage>;
};

/** User system model */
export type User = Node & {
  __typename?: 'User';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** Get the document in other stages */
  documentInStages: Array<User>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** Flag to determine if user is active or not */
  isActive: Scalars['Boolean'];
  /** User Kind. Can be either MEMBER, PAT or PUBLIC */
  kind: UserKind;
  /** The username */
  name: Scalars['String'];
  /** Profile Picture url */
  picture?: Maybe<Scalars['String']>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
};


/** User system model */
export type UserDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};

export type UserConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: UserWhereUniqueInput;
};

/** A connection to a list of items. */
export type UserConnection = {
  __typename?: 'UserConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<UserEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type UserCreateManyInlineInput = {
  /** Connect multiple existing User documents */
  connect?: InputMaybe<Array<UserWhereUniqueInput>>;
};

export type UserCreateOneInlineInput = {
  /** Connect one existing User document */
  connect?: InputMaybe<UserWhereUniqueInput>;
};

/** An edge in a connection. */
export type UserEdge = {
  __typename?: 'UserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: User;
};

/** System User Kind */
export enum UserKind {
  AppToken = 'APP_TOKEN',
  Member = 'MEMBER',
  Pat = 'PAT',
  Public = 'PUBLIC',
  Webhook = 'WEBHOOK'
}

/** Identifies documents */
export type UserManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UserWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UserWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UserWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  documentInStages_every?: InputMaybe<UserWhereStageInput>;
  documentInStages_none?: InputMaybe<UserWhereStageInput>;
  documentInStages_some?: InputMaybe<UserWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  kind?: InputMaybe<UserKind>;
  /** All values that are contained in given list. */
  kind_in?: InputMaybe<Array<InputMaybe<UserKind>>>;
  /** Any other value that exists and is not equal to the given value. */
  kind_not?: InputMaybe<UserKind>;
  /** All values that are not contained in given list. */
  kind_not_in?: InputMaybe<Array<InputMaybe<UserKind>>>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  picture?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  picture_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  picture_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  picture_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  picture_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  picture_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  picture_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  picture_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  picture_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  picture_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
};

export enum UserOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  IsActiveAsc = 'isActive_ASC',
  IsActiveDesc = 'isActive_DESC',
  KindAsc = 'kind_ASC',
  KindDesc = 'kind_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  PictureAsc = 'picture_ASC',
  PictureDesc = 'picture_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type UserUpdateManyInlineInput = {
  /** Connect multiple existing User documents */
  connect?: InputMaybe<Array<UserConnectInput>>;
  /** Disconnect multiple User documents */
  disconnect?: InputMaybe<Array<UserWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing User documents */
  set?: InputMaybe<Array<UserWhereUniqueInput>>;
};

export type UserUpdateOneInlineInput = {
  /** Connect existing User document */
  connect?: InputMaybe<UserWhereUniqueInput>;
  /** Disconnect currently connected User document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
};

/** This contains a set of filters that can be used to compare values internally */
export type UserWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type UserWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UserWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UserWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UserWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  documentInStages_every?: InputMaybe<UserWhereStageInput>;
  documentInStages_none?: InputMaybe<UserWhereStageInput>;
  documentInStages_some?: InputMaybe<UserWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  kind?: InputMaybe<UserKind>;
  /** All values that are contained in given list. */
  kind_in?: InputMaybe<Array<InputMaybe<UserKind>>>;
  /** Any other value that exists and is not equal to the given value. */
  kind_not?: InputMaybe<UserKind>;
  /** All values that are not contained in given list. */
  kind_not_in?: InputMaybe<Array<InputMaybe<UserKind>>>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  picture?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  picture_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  picture_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  picture_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  picture_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  picture_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  picture_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  picture_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  picture_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  picture_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type UserWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UserWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UserWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UserWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<UserWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References User record uniquely */
export type UserWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Version = {
  __typename?: 'Version';
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  revision: Scalars['Int'];
  stage: Stage;
};

export type VersionWhereInput = {
  id: Scalars['ID'];
  revision: Scalars['Int'];
  stage: Stage;
};

export type WebsiteConfig = Node & {
  __typename?: 'WebsiteConfig';
  adminTitle: Scalars['String'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<WebsiteConfig>;
  footer?: Maybe<FooterConfig>;
  header?: Maybe<HeaderConfig>;
  /** List of WebsiteConfig versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};


export type WebsiteConfigCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type WebsiteConfigDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};


export type WebsiteConfigFooterArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type WebsiteConfigHeaderArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type WebsiteConfigHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


export type WebsiteConfigPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type WebsiteConfigScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};


export type WebsiteConfigUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type WebsiteConfigConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: WebsiteConfigWhereUniqueInput;
};

/** A connection to a list of items. */
export type WebsiteConfigConnection = {
  __typename?: 'WebsiteConfigConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<WebsiteConfigEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type WebsiteConfigCreateInput = {
  adminTitle: Scalars['String'];
  createdAt?: InputMaybe<Scalars['DateTime']>;
  footer?: InputMaybe<FooterConfigCreateOneInlineInput>;
  header?: InputMaybe<HeaderConfigCreateOneInlineInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type WebsiteConfigCreateManyInlineInput = {
  /** Connect multiple existing WebsiteConfig documents */
  connect?: InputMaybe<Array<WebsiteConfigWhereUniqueInput>>;
  /** Create and connect multiple existing WebsiteConfig documents */
  create?: InputMaybe<Array<WebsiteConfigCreateInput>>;
};

export type WebsiteConfigCreateOneInlineInput = {
  /** Connect one existing WebsiteConfig document */
  connect?: InputMaybe<WebsiteConfigWhereUniqueInput>;
  /** Create and connect one WebsiteConfig document */
  create?: InputMaybe<WebsiteConfigCreateInput>;
};

/** An edge in a connection. */
export type WebsiteConfigEdge = {
  __typename?: 'WebsiteConfigEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: WebsiteConfig;
};

/** Identifies documents */
export type WebsiteConfigManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<WebsiteConfigWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<WebsiteConfigWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<WebsiteConfigWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<WebsiteConfigWhereStageInput>;
  documentInStages_none?: InputMaybe<WebsiteConfigWhereStageInput>;
  documentInStages_some?: InputMaybe<WebsiteConfigWhereStageInput>;
  footer?: InputMaybe<FooterConfigWhereInput>;
  header?: InputMaybe<HeaderConfigWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum WebsiteConfigOrderByInput {
  AdminTitleAsc = 'adminTitle_ASC',
  AdminTitleDesc = 'adminTitle_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  IdAsc = 'id_ASC',
  IdDesc = 'id_DESC',
  PublishedAtAsc = 'publishedAt_ASC',
  PublishedAtDesc = 'publishedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC'
}

export type WebsiteConfigUpdateInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
  footer?: InputMaybe<FooterConfigUpdateOneInlineInput>;
  header?: InputMaybe<HeaderConfigUpdateOneInlineInput>;
};

export type WebsiteConfigUpdateManyInlineInput = {
  /** Connect multiple existing WebsiteConfig documents */
  connect?: InputMaybe<Array<WebsiteConfigConnectInput>>;
  /** Create and connect multiple WebsiteConfig documents */
  create?: InputMaybe<Array<WebsiteConfigCreateInput>>;
  /** Delete multiple WebsiteConfig documents */
  delete?: InputMaybe<Array<WebsiteConfigWhereUniqueInput>>;
  /** Disconnect multiple WebsiteConfig documents */
  disconnect?: InputMaybe<Array<WebsiteConfigWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing WebsiteConfig documents */
  set?: InputMaybe<Array<WebsiteConfigWhereUniqueInput>>;
  /** Update multiple WebsiteConfig documents */
  update?: InputMaybe<Array<WebsiteConfigUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple WebsiteConfig documents */
  upsert?: InputMaybe<Array<WebsiteConfigUpsertWithNestedWhereUniqueInput>>;
};

export type WebsiteConfigUpdateManyInput = {
  adminTitle?: InputMaybe<Scalars['String']>;
};

export type WebsiteConfigUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: WebsiteConfigUpdateManyInput;
  /** Document search */
  where: WebsiteConfigWhereInput;
};

export type WebsiteConfigUpdateOneInlineInput = {
  /** Connect existing WebsiteConfig document */
  connect?: InputMaybe<WebsiteConfigWhereUniqueInput>;
  /** Create and connect one WebsiteConfig document */
  create?: InputMaybe<WebsiteConfigCreateInput>;
  /** Delete currently connected WebsiteConfig document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected WebsiteConfig document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single WebsiteConfig document */
  update?: InputMaybe<WebsiteConfigUpdateWithNestedWhereUniqueInput>;
  /** Upsert single WebsiteConfig document */
  upsert?: InputMaybe<WebsiteConfigUpsertWithNestedWhereUniqueInput>;
};

export type WebsiteConfigUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: WebsiteConfigUpdateInput;
  /** Unique document search */
  where: WebsiteConfigWhereUniqueInput;
};

export type WebsiteConfigUpsertInput = {
  /** Create document if it didn't exist */
  create: WebsiteConfigCreateInput;
  /** Update document if it exists */
  update: WebsiteConfigUpdateInput;
};

export type WebsiteConfigUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: WebsiteConfigUpsertInput;
  /** Unique document search */
  where: WebsiteConfigWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type WebsiteConfigWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type WebsiteConfigWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<WebsiteConfigWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<WebsiteConfigWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<WebsiteConfigWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  adminTitle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  adminTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  adminTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  adminTitle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  adminTitle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  adminTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  adminTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  adminTitle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  adminTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  adminTitle_starts_with?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<WebsiteConfigWhereStageInput>;
  documentInStages_none?: InputMaybe<WebsiteConfigWhereStageInput>;
  documentInStages_some?: InputMaybe<WebsiteConfigWhereStageInput>;
  footer?: InputMaybe<FooterConfigWhereInput>;
  header?: InputMaybe<HeaderConfigWhereInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type WebsiteConfigWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<WebsiteConfigWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<WebsiteConfigWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<WebsiteConfigWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<WebsiteConfigWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References WebsiteConfig record uniquely */
export type WebsiteConfigWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export enum _FilterKind {
  And = 'AND',
  Not = 'NOT',
  Or = 'OR',
  Contains = 'contains',
  ContainsAll = 'contains_all',
  ContainsNone = 'contains_none',
  ContainsSome = 'contains_some',
  EndsWith = 'ends_with',
  Eq = 'eq',
  EqNot = 'eq_not',
  Gt = 'gt',
  Gte = 'gte',
  In = 'in',
  JsonPathExists = 'json_path_exists',
  JsonValueRecursive = 'json_value_recursive',
  Lt = 'lt',
  Lte = 'lte',
  NotContains = 'not_contains',
  NotEndsWith = 'not_ends_with',
  NotIn = 'not_in',
  NotStartsWith = 'not_starts_with',
  RelationalEvery = 'relational_every',
  RelationalNone = 'relational_none',
  RelationalSingle = 'relational_single',
  RelationalSome = 'relational_some',
  Search = 'search',
  StartsWith = 'starts_with',
  UnionEmpty = 'union_empty',
  UnionEvery = 'union_every',
  UnionNone = 'union_none',
  UnionSingle = 'union_single',
  UnionSome = 'union_some'
}

export enum _MutationInputFieldKind {
  Enum = 'enum',
  Relation = 'relation',
  RichText = 'richText',
  RichTextWithEmbeds = 'richTextWithEmbeds',
  Scalar = 'scalar',
  Union = 'union',
  Virtual = 'virtual'
}

export enum _MutationKind {
  Create = 'create',
  Delete = 'delete',
  DeleteMany = 'deleteMany',
  Publish = 'publish',
  PublishMany = 'publishMany',
  SchedulePublish = 'schedulePublish',
  ScheduleUnpublish = 'scheduleUnpublish',
  Unpublish = 'unpublish',
  UnpublishMany = 'unpublishMany',
  Update = 'update',
  UpdateMany = 'updateMany',
  Upsert = 'upsert'
}

export enum _OrderDirection {
  Asc = 'asc',
  Desc = 'desc'
}

export enum _RelationInputCardinality {
  Many = 'many',
  One = 'one'
}

export enum _RelationInputKind {
  Create = 'create',
  Update = 'update'
}

export enum _RelationKind {
  Regular = 'regular',
  Union = 'union'
}

export enum _SystemDateTimeFieldVariation {
  Base = 'base',
  Combined = 'combined',
  Localization = 'localization'
}
